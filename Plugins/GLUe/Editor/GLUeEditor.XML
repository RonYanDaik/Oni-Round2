<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GLUeEditor</name>
    </assembly>
    <members>
        <member name="T:GLUSourceFileInfo">
            <summary>
            Source file info. Used in source analyzer
            </summary>
        </member>
        <member name="F:GLUSourceFileInfo.prefixes">
            <summary>
            Member prefixes
            </summary>
        </member>
        <member name="F:GLUSourceFileInfo.separators">
            <summary>
            Word separators
            </summary>
        </member>
        <member name="F:GLUSourceFileInfo.cr">
            <summary>
            Return char
            </summary>
        </member>
        <member name="F:GLUSourceFileInfo.skipPatterns">
            <summary>
            Patterns to skip
            </summary>
        </member>
        <member name="F:GLUSourceFileInfo.tokens">
            <summary>
            Source file tokens
            </summary>
        </member>
        <member name="F:GLUSourceFileInfo.classes">
            <summary>
            Source file classes
            </summary>
        </member>
        <member name="M:GLUSourceFileInfo.SkipUntil(System.Int32@,System.Int32@,System.String,System.String,System.Char,System.Char)">
            <summary>
            Skip text characters until endChar appearance
            </summary>
            <param name="pos">Current text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
            <param name="endChar">End chars</param>
            <param name="startGroupChar">Start group char. Text, enclosed in group characters is ignored</param>
            <param name="endGroupChar">End group char</param>
        </member>
        <member name="M:GLUSourceFileInfo.SkipSpaces(System.Int32@,System.Int32@,System.String)">
            <summary>
            Skips spaces and delimiters in provided text
            </summary>
            <param name="pos">Current text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
        </member>
        <member name="M:GLUSourceFileInfo.SkipUntil(System.Int32@,System.Int32@,System.String,System.String)">
            <summary>
            Skip text characters until endChar appearance
            </summary>
            <param name="pos">Current text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
            <param name="endPattern">End chars</param>
        </member>
        <member name="M:GLUSourceFileInfo.SimpleSkipUntil(System.Int32@,System.Int32@,System.String,System.String)">
            <summary>
            Skip text characters until endPattern appearance
            </summary>
            <param name="pos">Current text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
            <param name="endPattern">End chars</param>
        </member>
        <member name="M:GLUSourceFileInfo.GetAttribute(System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            Acquires attribute fro provided text, starting from pos
            </summary>
            <param name="sPos">Attribute start pos</param>
            <param name="sLN">Attribute start line number</param>
            <param name="pos">Current text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
            <returns>Attribute token</returns>
        </member>
        <member name="M:GLUSourceFileInfo.SkipUnnecessary(System.Int32@,System.Int32@,System.String)">
            <summary>
            Skip unnecessary characters
            </summary>
            <param name="pos">Curren text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
            <returns>Skip result</returns>
        </member>
        <member name="M:GLUSourceFileInfo.GetClass(System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            Acquires class definition and body from source text
            </summary>
            <param name="sPos">Class start position</param>
            <param name="sLN">Class start line number</param>
            <param name="pos">Current text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
            <returns>Class info</returns>
        </member>
        <member name="M:GLUSourceFileInfo.RemoveUnnecessary(System.String)">
            <summary>
            Removes unnecessary expressions(comments, regions, compiler directives)
            </summary>
            <param name="text">Provided text</param>
            <returns>Text with unnecessary expressions removed</returns>
        </member>
        <member name="M:GLUSourceFileInfo.Load(System.String)">
            <summary>
            Loads content from source text
            </summary>
            <param name="sourceText">Provided source text</param>
        </member>
        <member name="M:GLUSourceFileInfo.Get(System.String)">
            <summary>
            Creates GLUSourceFileInfo by provided source text
            </summary>
            <param name="sourceText">Provided source text</param>
            <returns>GLUSourceFileInfo instance, filled with source text parsing results</returns>
        </member>
        <member name="T:GLUGLUCurveEditor">
            <summary>
            Animation curve editor
            </summary>
        </member>
        <member name="T:GLUEditor">
            <summary>
            Base class for class editor
            </summary>
        </member>
        <member name="M:GLUEditor.DrawHeader(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Draws editor header in editor window
            </summary>
            <param name="collectionMember">If true, target object is collection member</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>True, if editor is unfolded (need to draw content)</returns>
        </member>
        <member name="F:GLUEditor.focused">
            <summary>
            Currently focused editor
            </summary>
        </member>
        <member name="F:GLUEditor.editorModifiers">
            <summary>
            States of toggles, drop-down, etc.. 
            </summary>
        </member>
        <member name="F:GLUEditor.categorized">
            <summary>
            If true, editor content will be categorized as list of member groups. Otherwize, content will be displayed in alphabetic order
            </summary>
        </member>
        <member name="F:GLUEditor.indentStep">
            <summary>
            Global indent between level of hierarchy 
            </summary>
        </member>
        <member name="F:GLUEditor.toggleStep">
            <summary>
            Toggle button indent
            </summary>
        </member>
        <member name="F:GLUEditor._target">
            <summary>
            Internal. Target (edited) object
            </summary>
        </member>
        <member name="M:GLUEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUEditor.UpdateTarget(System.Object)">
            <summary>
            Updates target object
            </summary>
            <param name="value">New target object value</param>
        </member>
        <member name="M:GLUEditor.GetMember(System.String,System.Int32@)">
            <summary>
            Gets editor member by provided path
            </summary>
            <param name="path">Provided path</param>
            <param name="i">Member index</param>
            <returns>Member with provided path</returns>
        </member>
        <member name="M:GLUEditor.GetEditor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Creates editor for provided target
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="targetType">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
            <returns>New editor instance</returns>
        </member>
        <member name="M:GLUEditor.RemoveButton">
            <summary>
            Draws remove button for collection member
            </summary>
            <returns>True, if button was pressed</returns>
        </member>
        <member name="M:GLUEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUEditor.UpdateValues">
            <summary>
            Updates members values
            </summary>
        </member>
        <member name="M:GLUEditor.DrawCollectionControls(System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Draws collection member management controls
            </summary>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
        </member>
        <member name="M:GLUEditor.GetPath(GLUEditor,System.Object,System.String,System.Object)">
            <summary>
            Returns system path
            </summary>
            <param name="parent">Parent member</param>
            <param name="value">Value</param>
            <param name="key">Collection key, parent is collection</param>
            <param name="name">Object holder (field or property) name</param>
            <returns>Path to member</returns>
        </member>
        <member name="M:GLUEditor.Focus">
            <summary>
            Sets editor as focused one
            </summary>
        </member>
        <member name="M:GLUEditor.DrawEditorName(System.String)">
            <summary>
            Draws editor name
            </summary>
            <param name="name">Name to draw</param>
        </member>
        <member name="M:GLUEditor.Refresh">
            <summary>
            Refreshes editor
            </summary>
        </member>
        <member name="M:GLUEditor.LoadContent">
            <summary>
            Loads editor content
            </summary>
        </member>
        <member name="M:GLUEditor.StaticFoldUnfoldButton(System.String,System.String,System.Int32)">
            <summary>
            Displays foldout with memorized state of provided object
            </summary>
            <param name="obj">Object</param>
            <param name="text">Text label</param>
            <param name="indent">Visual indent</param>
            <returns>State value</returns>
        </member>
        <member name="M:GLUEditor.FoldUnfoldButton(System.String,System.String,System.Int32)">
            <summary>
            Displays foldout with memorized state of provided object
            </summary>
            <param name="obj">Object</param>
            <param name="text">Text label</param>
            <param name="indent">Visual indent</param>
            <returns>State value</returns>
        </member>
        <member name="M:GLUEditor.SetEditorModifier(System.String,GLUEditorModifierDelegate)">
            <summary>
            Sets editor modifier delegate for specified path
            </summary>
            <param name="path">Specified path</param>
            <param name="applyDelegate">Modifier delegate. It is called each time, when editor with specified path is created</param>
        </member>
        <member name="M:GLUEditor.GetEditorModifier(System.String)">
            <summary>
            Gets editor modifier delegate forn specified path
            </summary>
            <param name="path">Specified path</param>
            <returns>Editor modifier, if found or null otherwize</returns>
        </member>
        <member name="M:GLUEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUEditor.GetTypeAttribute(System.Type,System.Type)">
            <summary>
            Searches type for provided custom attribute
            </summary>
            <param name="type">Type to search</param>
            <param name="attType">Provided attribute type</param>
            <returns>Attribute object if found</returns>
        </member>
        <member name="M:GLUEditor.GetChildByTarget(System.Object)">
            <summary>
            Searches child editors for one with provided target
            </summary>
            <param name="target">Provided target</param>
            <returns>Editor found and null otherwize</returns>
        </member>
        <member name="P:GLUEditor.rootStyle">
            <summary>
            Root style
            </summary>
        </member>
        <member name="P:GLUEditor.buttonStyle">
            <summary>
            Editor button style
            </summary>
        </member>
        <member name="P:GLUEditor.textFieldStyle">
            <summary>
            Editor text field style
            </summary>
        </member>
        <member name="P:GLUEditor.foldUnfoldStyle">
            <summary>
            Editor Fold/Unfold style
            </summary>
        </member>
        <member name="P:GLUEditor.toggleStyle">
            <summary>
            Toggle GUI style
            </summary>
        </member>
        <member name="P:GLUEditor.name">
            <summary>
            Editor name
            </summary>
        </member>
        <member name="P:GLUEditor.target">
            <summary>
            Target (edited) object
            </summary>
        </member>
        <member name="P:GLUEditor.indent">
            <summary>
            Editor's indent in editor window
            </summary>
        </member>
        <member name="P:GLUEditor.path">
            <summary>
            Path to target object from the root object
            </summary>
        </member>
        <member name="P:GLUEditor.root">
            <summary>
            If true, this editor is root editor. Thus, it has no parent
            </summary>
        </member>
        <member name="P:GLUEditor.type">
            <summary>
            Target object type 
            </summary>
        </member>
        <member name="P:GLUEditor.memberInfo">
            <summary>
            Edited member info
            </summary>
        </member>
        <member name="P:GLUEditor.parent">
            <summary>
            Parent editor
            </summary>
        </member>
        <member name="P:GLUEditor.fold">
            <summary>
            If true, object content is displayed
            </summary>
        </member>
        <member name="M:GLUGLUCurveEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUCurveEditor.DrawCurve(UnityEngine.Rect)">
            <summary>
            Draws curve
            </summary>
            <param name="rect">Viewport rect</param>
        </member>
        <member name="M:GLUGLUCurveEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUCurveEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUCurveEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
        </member>
        <member name="T:GLUFormEditorState">
            <summary>
            Form editor state
            </summary>
        </member>
        <member name="F:GLUFormEditorState.reserved">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:GLUFormEditorState.newForm">
            <summary>
            New form just has created
            </summary>
        </member>
        <member name="F:GLUFormEditorState.newMethod">
            <summary>
            New method just has created
            </summary>
        </member>
        <member name="F:GLUFormEditorState.formLoaded">
            <summary>
            Form is loaded. Normal state
            </summary>
        </member>
        <member name="F:GLUFormEditorState.goToMethod">
            <summary>
            Goes to method source in external editor. 
            </summary>
        </member>
        <member name="T:GLUFormEditorWindow">
            <summary>
            Form editor window
            </summary>
        </member>
        <member name="F:GLUFormEditorWindow.script">
            <summary>
            Current form script
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.ShowEditorForm">
            <summary>
            Unity menu item handler
            </summary>
        </member>
        <member name="F:GLUFormEditorWindow.state">
            <summary>
            Current form editor state
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.NewForm">
            <summary>
            New form item handler
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.OnDisable">
            <summary>
            Standard disable handler
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.OnEnable">
            <summary>
            Standard enable handler
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.Update">
            <summary>
            Standard Update handler
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.OnDestroy">
            <summary>
            Standard destroy handler
            </summary>
        </member>
        <member name="F:GLUFormEditorWindow.parameter">
            <summary>
            State parameter
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.LoadForm">
            <summary>
            Opens load form dialogue
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.ReloadForm">
            <summary>
            Reloads current form
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.SaveForm">
            <summary>
            Saves current form
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.CreateMethod(System.Object,System.String,System.String,System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            Creates method
            </summary>
            <param name="obj">Method holder object</param>
            <param name="eventName">Event name</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Method parameters</param>
            <param name="returnType">Method return type</param>
        </member>
        <member name="M:GLUFormEditorWindow.DrawToolBar">
            <summary>
            Draws window toolbar
            </summary>
        </member>
        <member name="M:GLUFormEditorWindow.OnGUI">
            <summary>
            Standard OnGUI handler
            </summary>
        </member>
        <member name="P:GLUFormEditorWindow.terminal">
            <summary>
            Editor terminal
            </summary>
        </member>
        <member name="P:GLUFormEditorWindow.instance">
            <summary>
            Window instance
            </summary>
        </member>
        <member name="T:GLUAnimationSetEditor">
            <summary>
            Animation set editor
            </summary>
        </member>
        <member name="T:GLUCollectionEditor">
            <summary>
            Base editor class for all collections
            </summary>
        </member>
        <member name="T:GLUObjectEditor">
            <summary>
            Default editor for objects. If no special editor found, this one will be used 
            </summary>
        </member>
        <member name="F:GLUObjectEditor.contentLoaded">
            <summary>
            Internal. If false, content need be loaded or updated
            </summary>
        </member>
        <member name="F:GLUObjectEditor.members">
            <summary>
            Object class members
            </summary>
        </member>
        <member name="M:GLUObjectEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUObjectEditor.GetMemberByEditor(GLUEditor)">
            <summary>
            Searches members for one having editor == provided editor
            </summary>
            <param name="e">Provided editor</param>
            <returns>Member found, or null</returns>
        </member>
        <member name="M:GLUObjectEditor.GetMemberByValue(System.Object)">
            <summary>
            Searches members for one having value == provided value
            </summary>
            <param name="value">Provided value</param>
            <returns>Member found, or null</returns>
        </member>
        <member name="M:GLUObjectEditor.UpdateTarget(System.Object)">
            <summary>
            Updates target object and performs all nesessary internal updates
            </summary>
            <param name="value">New target object</param>
        </member>
        <member name="M:GLUObjectEditor.GetMember(System.String,System.Int32@)">
            <summary>
            Gets editor member by provided path
            </summary>
            <param name="path">Provided path</param>
            <param name="i">Member index</param>
            <returns>Member with provided path</returns>
        </member>
        <member name="M:GLUObjectEditor.SetValue(GLUMemberInfo,System.Object,System.Boolean)">
            <summary>
            Set value
            </summary>
            <param name="mi">Member info</param>
            <param name="addToUndo">If true, this action will be added to undo list</param>
            <param name="value">Member value</param>
        </member>
        <member name="M:GLUObjectEditor.GetEditor(GLUMemberInfo)">
            <summary>
            Creates editor for provided member info
            </summary>
            <param name="mi">Provided memebr info</param>
            <returns>New editor instance</returns>
        </member>
        <member name="M:GLUObjectEditor.Refresh">
            <summary>
            Updates editor content
            </summary>
        </member>
        <member name="M:GLUObjectEditor.DrawMember(GLUMemberInfo,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Draws member
            </summary>
            <param name="mi">Memebr info</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
        </member>
        <member name="M:GLUObjectEditor.DrawContent">
            <summary>
            Draws editor content
            </summary>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUObjectEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUObjectEditor.UpdateValues">
            <summary>
            Updates members values
            </summary>
        </member>
        <member name="M:GLUObjectEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUObjectEditor.GetValue(System.Object,System.Reflection.MemberInfo,System.Type@)">
            <summary>
            Gets member value
            </summary>
            <param name="parent">Parent object</param>
            <param name="memberInfo">System member info</param>
            <param name="mt">Member type</param>
            <returns>Value</returns>
        </member>
        <member name="M:GLUObjectEditor.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Returns system type of provided member info
            </summary>
            <param name="mi">Member info</param>
            <returns>System type</returns>
        </member>
        <member name="M:GLUObjectEditor.LoadContent">
            <summary>
            Loads members content
            </summary>
        </member>
        <member name="M:GLUObjectEditor.GetChildByTarget(System.Object)">
            <summary>
            Searches child editors for one with provided target
            </summary>
            <param name="target">Provided target</param>
            <returns>Editor found and null otherwize</returns>
        </member>
        <member name="M:GLUObjectEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="F:GLUCollectionEditor.drawAppendButton">
            <summary>
            If true, default append button will be displayed
            </summary>
        </member>
        <member name="F:GLUCollectionEditor.OnRemoveItem">
            <summary>
            Remove item event
            </summary>
        </member>
        <member name="F:GLUCollectionEditor.OnDrawAppendButton">
            <summary>
            Append button 
            </summary>
        </member>
        <member name="M:GLUCollectionEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUCollectionEditor.SetValue(GLUMemberInfo,System.Object,System.Boolean)">
            <summary>
            Set value
            </summary>
            <param name="mi">Member info</param>
            <param name="addToUndo">If true, this action will be added to undo list</param>
            <param name="value">Member value</param>
        </member>
        <member name="M:GLUCollectionEditor.GetGenericArguments(System.Type)">
            <summary>
            Returns generic arguments for provided type
            </summary>
            <param name="type">Provided</param>
            <returns>Generic arguments list</returns>
        </member>
        <member name="M:GLUCollectionEditor.UpdateValues">
            <summary>
            Updates editor members values
            </summary>
        </member>
        <member name="M:GLUCollectionEditor.DefaultDrawAppendButton">
            <summary>
            Draws default append button
            </summary>
            <returns>True, if button pressed</returns>
        </member>
        <member name="M:GLUCollectionEditor.Add(System.Object)">
            <summary>
            Adds object to target collection
            </summary>
            <param name="member"></param>
        </member>
        <member name="M:GLUCollectionEditor.RemoveMember(GLUMemberInfo)">
            <summary>
            Removes member and its value from members list and form target
            </summary>
            <param name="member">Member to remove</param>
        </member>
        <member name="M:GLUCollectionEditor.RemoveMembers(System.Collections.Generic.List{GLUMemberInfo})">
            <summary>
            Remove members
            </summary>
            <param name="rl">Members list to remove</param>
        </member>
        <member name="M:GLUCollectionEditor.DrawContent">
            <summary>
            Draws content 
            </summary>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUCollectionEditor.LoadContent">
            <summary>
            Loads member content
            </summary>
        </member>
        <member name="M:GLUCollectionEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="M:GLUAnimationSetEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUAnimationSetEditor.DrawHeader(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Draws editor header in editor window
            </summary>
            <param name="collectionMember">If true, target object is collection member</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>True, if editor is unfolded (need to draw content)</returns>
        </member>
        <member name="M:GLUAnimationSetEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUStatesTable">
            <summary>
            Editors folds states table
            </summary>
        </member>
        <member name="M:GLUStatesTable.ToString">
            <summary>
            Converts table to text
            </summary>
            <returns>Text representation</returns>
        </member>
        <member name="M:GLUStatesTable.Parse(System.String)">
            <summary>
            Parses provided string dump, and fills content of new GLUStatesTable instance with parse results
            </summary>
            <param name="dump">Provided string dump</param>
        </member>
        <member name="M:GLUStatesTable.Save">
            <summary>
            Saves table content to Editor Prefs
            </summary>
        </member>
        <member name="M:GLUStatesTable.Load">
            <summary>
            Loads table content from Editor Prefs
            </summary>
        </member>
        <member name="P:GLUStatesTable.instance">
            <summary>
            Table instance
            </summary>
        </member>
        <member name="P:GLUStatesTable.Item(System.String)">
            <summary>
            This interface
            </summary>
            <param name="index">State index</param>
            <returns>State value</returns>
        </member>
        <member name="T:GLUFormScript">
            <summary>
            Form script holder
            </summary>
        </member>
        <member name="F:GLUFormScript.localFormResourcesPath">
            <summary>
            Local path to form resources folder
            </summary>
        </member>
        <member name="F:GLUFormScript.formResourcesPath">
            <summary>
            Global path to form resources
            </summary>
        </member>
        <member name="F:GLUFormScript.formExtension">
            <summary>
            Form file extension
            </summary>
        </member>
        <member name="F:GLUFormScript.methodRegex">
            <summary>
            Method regex. Regex to search method bodies among source text
            </summary>
        </member>
        <member name="F:GLUFormScript.controlsRegionRegex">
            <summary>
            Controls region regex
            </summary>
        </member>
        <member name="F:GLUFormScript.deleteFieldRegex">
            <summary>
            Regex for field deletion
            </summary>
        </member>
        <member name="F:GLUFormScript.deleteDelegateLinksRegex">
            <summary>
            Regex for searching delegate links 
            </summary>
        </member>
        <member name="F:GLUFormScript.renameFieldLinkRegex">
            <summary>
            Regex for field link renaming
            </summary>
        </member>
        <member name="F:GLUFormScript.renameDelegateLinksRegex">
            <summary>
            Regex for delegate links renaming
            </summary>
        </member>
        <member name="F:GLUFormScript.codeLineDelimiters">
            <summary>
            Code lines delimiters
            </summary>
        </member>
        <member name="F:GLUFormScript.crlf">
            <summary>
            New line character
            </summary>
        </member>
        <member name="F:GLUFormScript.form">
            <summary>
            Target form
            </summary>
        </member>
        <member name="F:GLUFormScript.type">
            <summary>
            Form type
            </summary>
        </member>
        <member name="F:GLUFormScript.sourceText">
            <summary>
            Source text
            </summary>
        </member>
        <member name="F:GLUFormScript.lastModificationTime">
            <summary>
            Last modification time
            </summary>
        </member>
        <member name="F:GLUFormScript.linesCount">
            <summary>
            Source lines count
            </summary>
        </member>
        <member name="F:GLUFormScript.objectCouner">
            <summary>
            Objects counter grouped by type
            </summary>
        </member>
        <member name="F:GLUFormScript.className">
            <summary>
            Target class name
            </summary>
        </member>
        <member name="F:GLUFormScript.xmlFileName">
            <summary>
            Target XML file name
            </summary>
        </member>
        <member name="F:GLUFormScript.sourceFileName">
            <summary>
            Target source file name
            </summary>
        </member>
        <member name="M:GLUFormScript.Save(System.String)">
            <summary>
            Saves script to provided file
            </summary>
            <param name="fileName">File name to save</param>
        </member>
        <member name="M:GLUFormScript.SaveTemporary(System.String)">
            <summary>
            Saves form to temporary XML
            </summary>
            <param name="filename">Temporary path</param>
        </member>
        <member name="M:GLUFormScript.Save">
            <summary>
            Saves script and form
            </summary>
        </member>
        <member name="M:GLUFormScript.GotoMethod(System.String)">
            <summary>
            Opens target source in extended editor at specified method 
            </summary>
            <param name="name">Method name</param>
        </member>
        <member name="F:GLUFormScript.enableUpdates">
            <summary>
            If true, updates are enabled, when form child changes 
            </summary>
        </member>
        <member name="F:GLUFormScript.xMember">
            <summary>
            X property info of GLUControl 
            </summary>
        </member>
        <member name="F:GLUFormScript.yMember">
            <summary>
            Y property info of GLUControl
            </summary>
        </member>
        <member name="M:GLUFormScript.Load(System.String)">
            <summary>
            Loads and analyzes source text
            </summary>
            <param name="sourceText">Text to load</param>
        </member>
        <member name="M:GLUFormScript.AddField(GLUControl)">
            <summary>
            Adds control field to source class
            </summary>
            <param name="control">Control object to make link</param>
        </member>
        <member name="M:GLUFormScript.RemoveField(System.String)">
            <summary>
            Removes field by provided XML link GUID and type
            </summary>
            <param name="guid">Provided XML link GUID</param>
        </member>
        <member name="M:GLUFormScript.RenameObject(System.Object,System.String)">
            <summary>
            Renames control or menu item in source text 
            </summary>
            <param name="obj">Control or menu item</param>
            <param name="oldName">Old object name</param>
        </member>
        <member name="M:GLUFormScript.LoadFromXML(System.String)">
            <summary>
            Searches and loads script source by provided Xml file name
            </summary>
            <param name="xmlName">Provided name</param>
            <returns>an instance of  GLUFormScript</returns>
        </member>
        <member name="M:GLUFormScript.LoadFromXML(System.String,System.String)">
            <summary>
            Loads script source and associated xml form
            </summary>
            <param name="xmlFileName">Form Xml name</param>
            <param name="sourceFileName">Source file name </param>
            <returns>GLUForm script instance</returns>
        </member>
        <member name="M:GLUFormScript.LoadFromTemporaryXML(System.String,System.String,System.String)">
            <summary>
            Loads script source and associated xml form
            </summary>
            <param name="xmlFileName">Form Xml name</param>
            <param name="sourceFileName">Source file name </param>
            <param name="tempXmlFileName">Temporary Xml file name</param>
            <returns>GLUForm script instance</returns>
        </member>
        <member name="M:GLUFormScript.StartBatchUpdate">
            <summary>
            Starts batch source update
            </summary>
        </member>
        <member name="M:GLUFormScript.StartBatchUpdate(System.Int32)">
            <summary>
            Starts batch update and sets up startindex
            </summary>
            <param name="startIndex">Start line index</param>
        </member>
        <member name="M:GLUFormScript.InsertLine(System.Int32,System.String)">
            <summary>
            Inserts line (crlf - terminated string) into a source
            </summary>
            <param name="startIndex">Line index</param>
            <param name="line">Line to insert</param>
            <returns>Inserted line length</returns>
        </member>
        <member name="M:GLUFormScript.Insert(System.Int32,System.String)">
            <summary>
            Inserts text into source
            </summary>
            <param name="startIndex">Text index to insert</param>
            <param name="text">Text to insert</param>
            <returns>Inserted text length</returns>
        </member>
        <member name="M:GLUFormScript.AddLine(System.String)">
            <summary>
            Adds line to source
            </summary>
            <param name="line">Line to add</param>
            <returns>Line number</returns>
        </member>
        <member name="M:GLUFormScript.EndBatchUpdate">
            <summary>
            Ends up batch lines adding
            </summary>
        </member>
        <member name="M:GLUFormScript.CreateMethodName(System.Object,System.String)">
            <summary>
            Creates method for specified event in provided object
            </summary>
            <param name="obj">Provided object</param>
            <param name="eventName">Specified event name</param>
            <returns>Method name</returns>
        </member>
        <member name="M:GLUFormScript.CreateMethod(System.Object,System.String,System.String,System.Reflection.ParameterInfo[],System.Type)">
            <summary>
            Creats empty method in provided object's class source and places a Xml delegate link on it
            </summary>
            <param name="obj">Provided object</param>
            <param name="eventName">Event name</param>
            <param name="methodName">Method name</param>
            <param name="parameters">Method parameters list</param>
            <param name="returnType">Method return type</param>
            <returns>Newly created method line number</returns>
        </member>
        <member name="M:GLUFormScript.CreateNew(System.Type,System.String,System.String)">
            <summary>
            Creates new form script class of specified type, with specified className and saves it to specified fileName
            </summary>
            <param name="baseType">New class parent</param>
            <param name="className">New class name</param>
            <param name="fileName">Source file name</param>
            <returns>GLUFormScript instance </returns>
        </member>
        <member name="M:GLUFormScript.CreateFieldName(System.Type,System.Type)">
            <summary>
            Creates field name of specified type in specified containing type 
            </summary>
            <param name="parent">Parent type</param>
            <param name="type">Field type</param>
            <returns>New field name</returns>
        </member>
        <member name="P:GLUFormScript.classInfo">
            <summary>
            Form class info
            </summary>
        </member>
        <member name="T:GLUCurveEditorWindow">
            <summary>
            Curve editor window
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.handlerSize">
            <summary>
            Curve point handler size
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.tangentSize">
            <summary>
            Tangent handler size
            </summary>
        </member>
        <member name="M:GLUCurveEditorWindow.ShowEditorForm">
            <summary>
            Unity menu item handler
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.curveRenderTexture">
            <summary>
            Render texture
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.scale">
            <summary>
            Current scale
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.offset">
            <summary>
            Current offset
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.scrollZoomInc">
            <summary>
            Scroll zoom increase coefficient
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.scrollZoomDec">
            <summary>
            Scroll zoom decrease coefficient
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.selectedKeyIndex">
            <summary>
            Selected key index
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.selectedTangentIndex">
            <summary>
            Selected tangent index
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.besierSegmentSteps">
            <summary>
            Curve segment subdivisions
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.needScaleToFit">
            <summary>
            Scale-to-fit flag
            </summary>
        </member>
        <member name="M:GLUCurveEditorWindow.Fit">
            <summary>
            Fits curve to viewport
            </summary>
        </member>
        <member name="F:GLUCurveEditorWindow.snap">
            <summary>
            Snap flag. If true, grid snap is on in curve viewport
            </summary>
        </member>
        <member name="M:GLUCurveEditorWindow.OnEnable">
            <summary>
            On enable handler
            </summary>
        </member>
        <member name="M:GLUCurveEditorWindow.AddKey(UnityEngine.Vector3)">
            <summary>
            Inserts key to curve
            </summary>
            <param name="c">Key coordinates</param>
        </member>
        <member name="M:GLUCurveEditorWindow.OnGUI">
            <summary>
            On GUI handler
            </summary>
        </member>
        <member name="M:GLUCurveEditorWindow.Update">
            <summary>
            Update handler
            </summary>
        </member>
        <member name="M:GLUCurveEditorWindow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUCurveEditorWindow.OnDisable">
            <summary>
            On disable handler
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.instance">
            <summary>
            Window instance
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.curve">
            <summary>
            Currently edited curve
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.editor">
            <summary>
            Root editor
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.gridSubMaterial">
            <summary>
            Grid subdivision material
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.gridAxisMaterial">
            <summary>
            Grid axis material
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.gridMaterial">
            <summary>
            Grid main material
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.curveMaterial">
            <summary>
            Curve material
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.tangentMaterial">
            <summary>
            Tangent line material
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.selectedKeyMaterial">
            <summary>
            Selected key material
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.selectedTangentMaterial">
            <summary>
            Selected tangent material
            </summary>
        </member>
        <member name="P:GLUCurveEditorWindow.rulerTextStyle">
            <summary>
            Ruler text style
            </summary>
        </member>
        <member name="T:GLUUndo">
            <summary>
            Editor undo class
            </summary>
        </member>
        <member name="F:GLUUndo.pending">
            <summary>
            Pending (last) user action
            </summary>
        </member>
        <member name="F:GLUUndo.maxUndoCount">
            <summary>
            Maximum stored undo actions
            </summary>
        </member>
        <member name="M:GLUUndo.Do(GLUEditorAction,GLUEditorAction)">
            <summary>
            Stores provided action to undo list, and sets GLUUndo.pending property
            </summary>
            <param name="action">Provided undo action</param>
            <param name="pending">Pending (last) action</param>
            <returns>Undo position</returns>
        </member>
        <member name="M:GLUUndo.Perform(GLUEditorAction)">
            <summary>
            Performs provided action
            </summary>
            <param name="action">Provided action</param>
        </member>
        <member name="M:GLUUndo.Undo">
            <summary>
            Decreases current undo index and performs undo action with it
            </summary>
            <returns>Editor action performed</returns>
        </member>
        <member name="M:GLUUndo.Redo">
            <summary>
            Increases current undo index and performs action with it
            </summary>
            <returns>Editor action performed</returns>
        </member>
        <member name="M:GLUUndo.CheckUndoRedoInput">
            <summary>
            Checks undo/redo hotkeys
            </summary>
        </member>
        <member name="P:GLUUndo.currentIndex">
            <summary>
            Current undo position
            </summary>
        </member>
        <member name="P:GLUUndo.actions">
            <summary>
            Undo actions list
            </summary>
        </member>
        <member name="T:GLUVector2Editor">
            <summary>
            Vector2 editor
            </summary>
        </member>
        <member name="M:GLUVector2Editor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUVector2Editor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUVector2Editor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUVector2Editor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUStringEditor">
            <summary>
            String editor
            </summary>
        </member>
        <member name="M:GLUStringEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUStringEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUStringEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUStringEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUDelegateEditor">
            <summary>
            Delegate object editor
            </summary>
        </member>
        <member name="M:GLUDelegateEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUDelegateEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUDelegateEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUDelegateEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUEditorModifierDelegate">
            <summary>
            Editor modifier delegate
            </summary>
            <param name="editor">Target editor</param>
        </member>
        <member name="T:GLUEditorModifier">
            <summary>
            Editor modifier
            </summary>
        </member>
        <member name="M:GLUEditorModifier.Apply(GLUEditor)">
            <summary>
            Applies modifiers to target
            </summary>
            <param name="e">Target</param>
        </member>
        <member name="M:GLUEditorModifier.#ctor(GLUEditorModifierDelegate)">
            <summary>
            Constructor
            </summary>
            <param name="modifier">Modifier delegate</param>
        </member>
        <member name="E:GLUEditorModifier.modifiers">
            <summary>
            Modifiers event
            </summary>
        </member>
        <member name="T:GLUGLUPaddingEditor">
            <summary>
            GLUPadding editor
            </summary>
        </member>
        <member name="M:GLUGLUPaddingEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUPaddingEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUPaddingEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUPaddingEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUFontUtils">
            <summary>
            Font utils class
            </summary>
        </member>
        <member name="M:GLUFontUtils.Save(GLUFontMipmap)">
            <summary>
            Saves mipmap textures to disk
            </summary>
        </member>
        <member name="M:GLUFontUtils.WriteToStream(GLUFontMipmap,System.IO.BinaryWriter)">
            <summary>
            Writes mipmap to stream
            </summary>
            <param name="mip">Mipmap to write</param>
            <param name="writer">Stream</param>
        </member>
        <member name="M:GLUFontUtils.WriteToStream(GLUFont,System.IO.BinaryWriter)">
            <summary>
            Writes font to stream
            </summary>
            <param name="font">Font to write</param>
            <param name="writer">Stream to write</param>
        </member>
        <member name="M:GLUFontUtils.Save(GLUFont)">
            <summary>
            Saves font and all its mipmaps to Resources/GLU/Fonts/ folder
            </summary>
        </member>
        <member name="T:GLUAnimationCurveEditor">
            <summary>
            Animation curve editor
            </summary>
        </member>
        <member name="M:GLUAnimationCurveEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUAnimationCurveEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUAnimationCurveEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUAnimationCurveEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
        </member>
        <member name="T:GLUFontImporterWindow">
            <summary>
            Form importer tool
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.fontName">
            <summary>
            Importing font name
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.font">
            <summary>
            Unity font to import
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.sizes">
            <summary>
            Font sizes array
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.charset">
            <summary>
            Charset string. For example: "0x09-0xb6, 0x410 - 0x451, 0x2116"
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.bottomOffset">
            <summary>
            Letter bottom offset from image bottom
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.hPadding">
            <summary>
            Horizontal interval between symbol images in font texture
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.vPadding">
            <summary>
            Vertical interval between symbol images in font texture
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.margin">
            <summary>
            Margin around symbol included in symbol UV rect
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.underlinePosition">
            <summary>
            Underline offset from symbol bottomn
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.underlineWidthCoefficient">
            <summary>
            Underline width coefficient
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.clearColor">
            <summary>
            Font texture background color
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.alphaMultiplier">
            <summary>
            Symbol image alpha multiplier
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.gluFont">
            <summary>
            Imported font
            </summary>
        </member>
        <member name="F:GLUFontImporterWindow.captureBufferSize">
            <summary>
            Capture font buffer size
            </summary>
        </member>
        <member name="M:GLUFontImporterWindow.ShowInstance">
            <summary>
            Shows font importer instance
            </summary>
        </member>
        <member name="M:GLUFontImporterWindow.OnGUI">
            <summary>
            OnGUI handler
            </summary>
        </member>
        <member name="M:GLUFontImporterWindow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:GLUFontImporterWindow.instance">
            <summary>
            Window instance
            </summary>
        </member>
        <member name="P:GLUFontImporterWindow.ustyle">
            <summary>
            Underline box style
            </summary>
        </member>
        <member name="T:GLUMemberActionType">
            <summary>
            Member internal action type
            </summary>
        </member>
        <member name="F:GLUMemberActionType.set">
            <summary>
            Set action
            </summary>
        </member>
        <member name="F:GLUMemberActionType.add">
            <summary>
            Add action
            </summary>
        </member>
        <member name="F:GLUMemberActionType.remove">
            <summary>
            Remove action
            </summary>
        </member>
        <member name="F:GLUMemberActionType.invoke">
            <summary>
            Invoke method action
            </summary>
        </member>
        <member name="T:GLUMemberAction">
            <summary>
            Member action
            </summary>
        </member>
        <member name="F:GLUMemberAction.type">
            <summary>
            Internal action type
            </summary>
        </member>
        <member name="F:GLUMemberAction.member">
            <summary>
            Member
            </summary>
        </member>
        <member name="F:GLUMemberAction.parentObject">
            <summary>
            Member's parent object
            </summary>
        </member>
        <member name="F:GLUMemberAction.value">
            <summary>
            Member value
            </summary>
        </member>
        <member name="M:GLUMemberAction.#ctor(GLUMemberActionType,System.Object,System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="type">Internal member action type</param>
            <param name="member">Member</param>
            <param name="value">Member value</param>
            <param name="parentObject">Member's parent</param>
        </member>
        <member name="M:GLUMemberAction.ToString">
            <summary>
            Standard ToString() override
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:GLUEditorAction">
            <summary>
            Editor action
            </summary>
        </member>
        <member name="F:GLUEditorAction.members">
            <summary>
            Action members
            </summary>
        </member>
        <member name="M:GLUEditorAction.#ctor(GLUMemberActionType,GLUMemberInfo[])">
            <summary>
            Constructor
            </summary>
            <param name="type">Action type</param>
            <param name="members">Members list</param>
        </member>
        <member name="M:GLUEditorAction.#ctor(GLUMemberAction[])">
            <summary>
            Constructor
            </summary>
            <param name="members">Member actions list</param>
        </member>
        <member name="T:GLUUndoEditorWindow">
            <summary>
            Undo list window
            </summary>
        </member>
        <member name="M:GLUUndoEditorWindow.OnGUI">
            <summary>
            Standard OnGUI handler
            </summary>
        </member>
        <member name="M:GLUUndoEditorWindow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUUndoEditorWindow.OnEnable">
            <summary>
            OnEnable handler
            </summary>
        </member>
        <member name="M:GLUUndoEditorWindow.OnDisable">
            <summary>
            OnDisable handler
            </summary>
        </member>
        <member name="P:GLUUndoEditorWindow.instance">
            <summary>
            Undo window instance
            </summary>
        </member>
        <member name="T:GLUKeySequenceEditor">
            <summary>
            Key sequence editor
            </summary>
        </member>
        <member name="M:GLUKeySequenceEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUKeySequenceEditor.DefaultDrawAppendButton">
            <summary>
            Draws default append button
            </summary>
            <returns>True, if button pressed</returns>
        </member>
        <member name="M:GLUKeySequenceEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUAnimationIndexEditor">
            <summary>
            Animation index editor
            </summary>
        </member>
        <member name="M:GLUAnimationIndexEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUAnimationIndexEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUAnimationIndexEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUAnimationIndexEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUGLUAnchorsEditor">
            <summary>
            GLUAnchors editor
            </summary>
        </member>
        <member name="M:GLUGLUAnchorsEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUAnchorsEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUAnchorsEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUAnchorsEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUGLUObjectEditor">
            <summary>
            Default control editor
            </summary>
        </member>
        <member name="F:GLUGLUObjectEditor.memberGroups">
            <summary>
            Member groups
            </summary>
        </member>
        <member name="M:GLUGLUObjectEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUObjectEditor.DrawMember(GLUMemberInfo,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Draws member
            </summary>
            <param name="mi">Memebr info</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
        </member>
        <member name="M:GLUGLUObjectEditor.DrawContent">
            <summary>
            Draws content
            </summary>
            <returns>Target object</returns>
        </member>
        <member name="F:GLUGLUObjectEditor.groupPaths">
            <summary>
            Paths to member groups
            </summary>
        </member>
        <member name="F:GLUGLUObjectEditor.groupNames">
            <summary>
            Member group names
            </summary>
        </member>
        <member name="M:GLUGLUObjectEditor.LoadContent">
            <summary>
            Loads members content
            </summary>
        </member>
        <member name="M:GLUGLUObjectEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUTextureEditor">
            <summary>
            Texture object editor
            </summary>
        </member>
        <member name="M:GLUTextureEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUTextureEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUTextureEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUTextureEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUGLUColorEditor">
            <summary>
            GLUColor object editor
            </summary>
        </member>
        <member name="M:GLUGLUColorEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUColorEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUColorEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUColorEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUChangeStyleEvent">
            <summary>
            Style change delegate
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:GLUStyleSheetsWindow">
            <summary>
            Style sheets editor window
            </summary>
        </member>
        <member name="M:GLUStyleSheetsWindow.LoadSheetNames">
            <summary>
            Loads sheet names
            </summary>
        </member>
        <member name="M:GLUStyleSheetsWindow.ShowInstance">
            <summary>
            Shows instance window
            </summary>
        </member>
        <member name="F:GLUStyleSheetsWindow.states">
            <summary>
            States of toggles, drop-down, etc.. 
            </summary>
        </member>
        <member name="M:GLUStyleSheetsWindow.GetState(System.Object)">
            <summary>
            Returns state of object from states hashtable
            </summary>
            <param name="obj">Object</param>
            <returns>State</returns>
        </member>
        <member name="M:GLUStyleSheetsWindow.SetState(System.Object,System.Boolean)">
            <summary>
            Sets state of an object
            </summary>
            <param name="obj">Object</param>
            <param name="value">State</param>
        </member>
        <member name="M:GLUStyleSheetsWindow.FoldUnfoldButton(System.Object,System.String,System.Int32)">
            <summary>
            Displays foldout with memorized state of provided object
            </summary>
            <param name="obj">Object</param>
            <param name="text">Text label</param>
            <param name="indent">Visual indent</param>
            <returns>State value</returns>
        </member>
        <member name="M:GLUStyleSheetsWindow.Foldout(System.Boolean,System.String,System.Int32)">
            <summary>
            Displays foldout with memorized state of provided object
            </summary>
            <param name="value">Foldout flag</param>
            <param name="text">Text label</param>
            <param name="indent">Visual indent</param>
            <returns>State value</returns>
        </member>
        <member name="M:GLUStyleSheetsWindow.SortByButton(System.Object,System.Int32)">
            <summary>
            Displays SortBy button of provided object
            </summary>
            <param name="obj">Object</param>
            <param name="indent">Visual indent</param>
            <returns>True if pressed</returns>
        </member>
        <member name="M:GLUStyleSheetsWindow.DictionaryToString``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            Creates string and fills it with provided dictionary content
            </summary>
            <typeparam name="T">Generic argument type</typeparam>
            <param name="dictionary">Provided dictionary</param>
            <returns>String representation</returns>
        </member>
        <member name="M:GLUStyleSheetsWindow.LoadStylesSheetFromString(System.String)">
            <summary>
            Loads style sheet from string
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:GLUStyleSheetsWindow.OnDisable">
            <summary>
            Disable event handler
            </summary>
        </member>
        <member name="M:GLUStyleSheetsWindow.OnEnable">
            <summary>
            Enable event handler
            </summary>
        </member>
        <member name="M:GLUStyleSheetsWindow.SheetsChanged(GLUStyleSheet)">
            <summary>
            Sheet change handler
            </summary>
            <param name="sender">Sheet source</param>
        </member>
        <member name="F:GLUStyleSheetsWindow.startup">
            <summary>
            Startup flag
            </summary> 
        </member>
        <member name="F:GLUStyleSheetsWindow.scrollViewPosition">
            <summary>
            ScrollView position vector
            </summary>
        </member>
        <member name="M:GLUStyleSheetsWindow.StyleChanged(GLUControl,GLUStyle)">
            <summary>
            Control changed event handler
            </summary>
            <param name="sender">Sender style</param>
            <param name="control">Control</param>
        </member>
        <member name="F:GLUStyleSheetsWindow._currentSheet">
            <summary>
            Selected object. Used to determine global selected object changes
            </summary>
        </member>
        <member name="F:GLUStyleSheetsWindow.currentSheetNameIndex">
            <summary>
            Currently selected popup index
            </summary>
        </member>
        <member name="M:GLUStyleSheetsWindow.OnGUI">
            <summary>
            Window GUI is displayed here
            </summary>
        </member>
        <member name="M:GLUStyleSheetsWindow.Refresh">
            <summary>
            Refreshes window content
            </summary>
        </member>
        <member name="P:GLUStyleSheetsWindow.sheetNames">
            <summary>
            Sheets names list
            </summary>
        </member>
        <member name="P:GLUStyleSheetsWindow.instance">
            <summary>
            Instance of props editor
            </summary>
        </member>
        <member name="P:GLUStyleSheetsWindow.rootStyle">
            <summary>
            Root style
            </summary>
        </member>
        <member name="P:GLUStyleSheetsWindow.rootEditor">
            <summary>
            Root member of currently edited object. Used for internal comparsion with global one, when global one changes
            </summary>
        </member>
        <member name="P:GLUStyleSheetsWindow.currentSheet">
            <summary>
            Selected object. Used to determine global selected object changes
            </summary>
        </member>
        <member name="T:GLUMaterialEditor">
            <summary>
            GLUMaterial object editor
            </summary>
        </member>
        <member name="M:GLUMaterialEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUMaterialEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUMaterialEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUMaterialEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUAnimationSetLinkEditor">
            <summary>
            Animation set link editor. Not user for now
            </summary>
        </member>
        <member name="M:GLUAnimationSetLinkEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUAnimationSetLinkEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUAnimationSetLinkEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUAnimationSetLinkEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="P:GLUAnimationSetLinkEditor.currentSheet">
            <summary>
            Current sheet
            </summary>
        </member>
        <member name="T:GLUEditorClipboard">
            <summary>
            Editor clipboard. Used to copy/paste controls in forms
            </summary>
        </member>
        <member name="M:GLUEditorClipboard.ProcessContextMenu(UnityEditor.GenericMenu.MenuFunction,UnityEditor.GenericMenu.MenuFunction)">
            <summary>
            Draws context menu
            </summary>
            <param name="copyHandler">Copy item handler</param>
            <param name="pasteHandler">Paste item handler</param>
        </member>
        <member name="P:GLUEditorClipboard.xmlClipboardDoc">
            <summary>
            Clipboard document holder 
            </summary>
        </member>
        <member name="P:GLUEditorClipboard.xmlClipboard">
            <summary>
            Clipboard
            </summary>
        </member>
        <member name="T:GLUGLUStringEditor">
            <summary>
            GLUString object editor
            </summary>
        </member>
        <member name="M:GLUGLUStringEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUStringEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUStringEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUStringEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUVector3Editor">
            <summary>
            Vector3 editor
            </summary>
        </member>
        <member name="M:GLUVector3Editor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUVector3Editor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUVector3Editor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUVector3Editor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUQuaternionEditor">
            <summary>
            Quaternion value editor
            </summary>
        </member>
        <member name="M:GLUQuaternionEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUQuaternionEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUQuaternionEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUQuaternionEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLULayeredControlStyleLayerStylesEditor">
            <summary>
            Layer styles editor
            </summary>
        </member>
        <member name="M:GLULayeredControlStyleLayerStylesEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLULayeredControlStyleLayerStylesEditor.DefaultDrawAppendButton">
            <summary>
            Draws default append button
            </summary>
            <returns>True, if button pressed</returns>
        </member>
        <member name="M:GLULayeredControlStyleLayerStylesEditor.GetEditor(GLUMemberInfo)">
            <summary>
            Creates editor for provided member info
            </summary>
            <param name="mi">Provided memebr info</param>
            <returns>New editor instance</returns>
        </member>
        <member name="M:GLULayeredControlStyleLayerStylesEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="P:GLULayeredControlStyleLayerStylesEditor.layerStyleTypes">
            <summary>
            Layer style types list
            </summary>
        </member>
        <member name="P:GLULayeredControlStyleLayerStylesEditor.layerStyleNames">
            <summary>
            Layer style names array 
            </summary>
        </member>
        <member name="T:GLULayeredControlEditor">
            <summary>
            Editor for layered control object
            </summary>
        </member>
        <member name="M:GLULayeredControlEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLULayeredControlEditor.LoadContent">
            <summary>
            Loads members content
            </summary>
        </member>
        <member name="M:GLULayeredControlEditor.DrawAppendLayerButton(GLUEditor)">
            <summary>
            Draws default append layer button for provided editor
            </summary>
            <param name="e">Provided editor</param>
            <returns>True, if button pressed</returns>
        </member>
        <member name="M:GLULayeredControlEditor.LayersEditorModifier(GLUEditor)">
            <summary>
            Layers editor modifier method
            </summary>
            <param name="e">Target editor</param>
        </member>
        <member name="M:GLULayeredControlEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLULayeredControlEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="P:GLULayeredControlEditor.igTypes">
            <summary>
            Internal graphic types list
            </summary>
        </member>
        <member name="P:GLULayeredControlEditor.igNames">
            <summary>
            Internal graphic type names array
            </summary>
        </member>
        <member name="T:GLUAnimationEditor">
            <summary>
            Animation object editor
            </summary>
        </member>
        <member name="M:GLUAnimationEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUAnimationEditor.DefaultDrawAppendButton">
            <summary>
            Draws default append button. 
            </summary>
            <returns>True, if append button is pressed </returns>
        </member>
        <member name="M:GLUAnimationEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUAnimationEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="P:GLUAnimationEditor.sequenceTypes">
            <summary>
            Sequence types
            </summary>
        </member>
        <member name="P:GLUAnimationEditor.sequenceNames">
            <summary>
            Sequence type names array
            </summary>
        </member>
        <member name="T:GLUGLUNumberEditor">
            <summary>
            GLUNumber editor
            </summary>
        </member>
        <member name="M:GLUGLUNumberEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUNumberEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUNumberEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUNumberEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUGLUBordersEditor">
            <summary>
            GLUBorders editor
            </summary>
        </member>
        <member name="M:GLUGLUBordersEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUBordersEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUBordersEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUBordersEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUColorEditor">
            <summary>
            Color object editor
            </summary>
        </member>
        <member name="M:GLUColorEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUColorEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUColorEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUColorEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUClassEditorAttribute">
            <summary>
            Attribute, which indicates, that provided class  
            </summary>
        </member>
        <member name="F:GLUClassEditorAttribute.editors">
            <summary>
            Editor classes list
            </summary>
        </member>
        <member name="F:GLUClassEditorAttribute.targets">
            <summary>
            List of classes, allowed in this editor
            </summary>
        </member>
        <member name="M:GLUClassEditorAttribute.#ctor(System.Type[])">
            <summary>
            Constructor
            </summary>
            <param name="targets">List of classes, allowed in this editor</param>
        </member>
        <member name="M:GLUClassEditorAttribute.GetEditorType(System.Type)">
            <summary>
            Returns editor type for provided type
            </summary>
            <param name="type">Provided type</param>
            <returns>Editor type, if found</returns>
        </member>
        <member name="T:GLUITEditor">
            <summary>
            Custom editor for GLUInteractiveTerminal object
            </summary>
        </member>
        <member name="M:GLUITEditor.OnInspectorGUI">
            <summary>
            Standard OnGUI method override
            </summary>
        </member>
        <member name="T:GLUCodeTokenInfo">
            <summary>
            Source code token
            </summary>
        </member>
        <member name="F:GLUCodeTokenInfo.name">
            <summary>
            Token name
            </summary>
        </member>
        <member name="F:GLUCodeTokenInfo.lineNumber">
            <summary>
            Token line number
            </summary>
        </member>
        <member name="F:GLUCodeTokenInfo.startPosition">
            <summary>
            Token start position in text
            </summary>
        </member>
        <member name="F:GLUCodeTokenInfo.endPosition">
            <summary>
            Token end position in text
            </summary>
        </member>
        <member name="M:GLUCodeTokenInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Token info constructor
            </summary>
            <param name="name">Token name</param>
            <param name="lineNumber">Token line number</param>
            <param name="endPosition">Token end position in source text</param>
            <param name="startPosition">Token start position in source text</param>
        </member>
        <member name="T:GLUIntEditor">
            <summary>
            Int value editor
            </summary>
        </member>
        <member name="M:GLUIntEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUIntEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUIntEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUIntEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUObjectPropertiesWindow">
            <summary>
            Visual object properties editor
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.needToUpdate">
            <summary>
            If true, root editor will be updated on next access
            </summary>
        </member>
        <member name="M:GLUObjectPropertiesWindow.ShowControlProperties">
            <summary>
            Shows instance window
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.states">
            <summary>
            States of toggles, drop-down, etc.. 
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.OnRenameObject">
            <summary>
            Innvoked, when user renames an object
            </summary>
        </member>
        <member name="M:GLUObjectPropertiesWindow.GetState(System.Object)">
            <summary>
            Returns state of object from states hashtable
            </summary>
            <param name="obj">Object</param>
            <returns>State</returns>
        </member>
        <member name="M:GLUObjectPropertiesWindow.SetState(System.Object,System.Boolean)">
            <summary>
            Sets state of an object
            </summary>
            <param name="obj">Object</param>
            <param name="value">State</param>
        </member>
        <member name="M:GLUObjectPropertiesWindow.OnDisable">
            <summary>
            Disable event handler
            </summary>
        </member>
        <member name="M:GLUObjectPropertiesWindow.OnEnable">
            <summary>
            Enable event handler
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.startup">
            <summary>
            Startup flag
            </summary> 
        </member>
        <member name="F:GLUObjectPropertiesWindow.scrollViewPosition">
            <summary>
            ScrollView position vector
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.rootEditor">
            <summary>
            Root member of currently edited object. Used for internal comparsion with global one, when global one changes
            </summary>
        </member>
        <member name="M:GLUObjectPropertiesWindow.SelectedChanged(GLUEditorTerminal,System.Collections.Generic.List{GLUControl})">
            <summary>
            Control changed event handler
            </summary>
            <param name="sender">Source terminal</param>
            <param name="control">Control</param>
        </member>
        <member name="F:GLUObjectPropertiesWindow.selectedObject">
            <summary>
            Selected object. Used to determine global selected object changes
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.selectedEditor">
            <summary>
            Selected editor. Used in copy/paste operations
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.controls">
            <summary>
            Form control names array. Used to display controls popup 
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.popups">
            <summary>
            form popup menus names array
            </summary>
        </member>
        <member name="F:GLUObjectPropertiesWindow.controlsPopupIndex">
            <summary>
            Currently selected popup index
            </summary>
        </member>
        <member name="M:GLUObjectPropertiesWindow.OnGUI">
            <summary>
            Window GUI is displayed here
            </summary>
        </member>
        <member name="M:GLUObjectPropertiesWindow.ReloadPopupsList">
            <summary>
            Reloads popup list, when user added or removed popup
            </summary>
        </member>
        <member name="M:GLUObjectPropertiesWindow.ReloadControlsPopup">
            <summary>
            Reload controls list, when user added or removed control
            </summary>
        </member>
        <member name="M:GLUObjectPropertiesWindow.Refresh">
            <summary>
            Refreshes window content
            </summary>
        </member>
        <member name="P:GLUObjectPropertiesWindow.instance">
            <summary>
            Instance of props editor
            </summary>
        </member>
        <member name="P:GLUObjectPropertiesWindow.rootStyle">
            <summary>
            Root style
            </summary>
        </member>
        <member name="T:GLUClassMemberType">
            <summary>
            Class member type for sourcea nalyzer
            </summary>
        </member>
        <member name="F:GLUClassMemberType.fieldMember">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:GLUClassMemberType.propertyMember">
            <summary>
            Property
            </summary>
        </member>
        <member name="F:GLUClassMemberType.methodMember">
            <summary>
            Method
            </summary>
        </member>
        <member name="F:GLUClassMemberType.classMember">
            <summary>
            Subclass
            </summary>
        </member>
        <member name="F:GLUClassMemberType.enumMember">
            <summary>
            Nested enum
            </summary>
        </member>
        <member name="F:GLUClassMemberType.structMember">
            <summary>
            Nested struct
            </summary>
        </member>
        <member name="F:GLUClassMemberType.delegateMember">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="T:GLUClassMemberInfo">
            <summary>
            Class member info fo source analyzer
            </summary>
        </member>
        <member name="F:GLUClassMemberInfo.type">
            <summary>
            Member return type
            </summary>
        </member>
        <member name="F:GLUClassMemberInfo.memberType">
            <summary>
            Internal member type
            </summary>
        </member>
        <member name="M:GLUClassMemberInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String,GLUClassMemberType)">
            <summary>
            Class member info constructor
            </summary>
            <param name="name">Member name</param>
            <param name="lineNumber">Member line number</param>
            <param name="endPosition">Member end position in source text</param>
            <param name="memberType">Member internal type</param>
            <param name="startPosition">Start member position in source text</param>
            <param name="type">Member type</param>
        </member>
        <member name="M:GLUClassMemberInfo.Get(System.Int32@,System.Int32@,System.String)">
            <summary>
            Aquires class member from provided source text
            </summary>
            <param name="pos">Current text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
            <returns>Instance of GLUClassMember info</returns>
        </member>
        <member name="T:GLUStyleSheetMemberGroupEditor">
            <summary>
            Internal sheet member group editor
            </summary>
        </member>
        <member name="M:GLUStyleSheetMemberGroupEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUStyleSheetMemberGroupEditor.RemoveMembers(System.Collections.Generic.List{GLUMemberInfo})">
            <summary>
            Remove members
            </summary>
            <param name="rl">Members list to remove</param>
        </member>
        <member name="M:GLUStyleSheetMemberGroupEditor.GetEditor(GLUMemberInfo)">
            <summary>
            Creates editor for provided member info
            </summary>
            <param name="mi">Provided memebr info</param>
            <returns>New editor instance</returns>
        </member>
        <member name="M:GLUStyleSheetMemberGroupEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUShaderEditor">
            <summary>
            Shader object editor
            </summary>
        </member>
        <member name="M:GLUShaderEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUShaderEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUShaderEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUShaderEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUGLURectEditor">
            <summary>
            GLURect object editor
            </summary>
        </member>
        <member name="M:GLUGLURectEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLURectEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLURectEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLURectEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUFloatEditor">
            <summary>
            Float values editor
            </summary>
        </member>
        <member name="M:GLUFloatEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUFloatEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUFloatEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUFloatEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUBoolEditor">
            <summary>
            Boolean editor
            </summary>
        </member>
        <member name="M:GLUBoolEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUBoolEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUBoolEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUBoolEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUEditorEvent">
            <summary>
            Editor event delegate
            </summary>
            <param name="e">Event source</param>
            <returns>Handler operation result</returns>
        </member>
        <member name="T:GLUGUIDEditor">
            <summary>
            Editor for GUID strings
            </summary>
        </member>
        <member name="M:GLUGUIDEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGUIDEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGUIDEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGUIDEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUEditorAddControlEvent">
            <summary>
            Add control delegate
            </summary>
            <param name="sender">Terminal source</param>
            <param name="parent">Control's parent</param>
            <param name="type">Control type</param>
            <param name="mp">Control origin in parent space</param>
        </member>
        <member name="T:GLUEditorDeleteControlEvent">
            <summary>
            Delete control delegate
            </summary>
            <param name="sender">Terminal source</param>
            <param name="control">Deleted control</param>
        </member>
        <member name="T:GLUEditorChangeControlEvent">
            <summary>
            Change control delegate
            </summary>
            <param name="sender">Terminal source</param>
            <param name="control">Changed control</param>
        </member>
        <member name="T:GLUEditorChangeControlsEvent">
            <summary>
            Change controls delegate
            </summary>
            <param name="sender">Terminal source</param>
            <param name="controls">Changed controls list</param>
        </member>
        <member name="T:GLUEditorTerminal">
            <summary>
            Editor terminal
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.selectedType">
            <summary>
            Currently selected control type
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.targetTexture">
            <summary>
            Target texture
            </summary>
        </member>
        <member name="M:GLUEditorTerminal.ResetFlags">
            <summary>
            Resets internal flags
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.dropTarget">
            <summary>
            Current drop target
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.OnAddControl">
            <summary>
            Add control event
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.OnStartDrag">
            <summary>
            Start drag event
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.OnEndDrag">
            <summary>
            End drag event
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.OnChangeSelected">
            <summary>
            Selection change event
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.OnRemoveControls">
            <summary>
            Delete controls event
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.monoBehaviour">
            <summary>
            MonoBehavior, terminal is attached to 
            </summary>
        </member>
        <member name="M:GLUEditorTerminal.FormByCoord(UnityEngine.Vector3)">
            <summary>
            Returns form, Containing provided coordinates 
            </summary>
            <param name="coord">Provided coordinates</param>
            <returns>Form</returns>
        </member>
        <member name="M:GLUEditorTerminal.AnyControlByCoord(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns control containing provided coordinates 
            </summary>
            <param name="coord">provided coordinates</param>
            <param name="enabledOnly">If true, disabled children are ignored</param>
            <returns>Form</returns>
        </member>
        <member name="M:GLUEditorTerminal.ProcessControlInput(GLUControl)">
            <summary>
            Processes control input
            </summary>
            <param name="control">Control to process</param>
        </member>
        <member name="M:GLUEditorTerminal.InternalProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Processes control key and dispatches events to all focused controls
            </summary>
            <param name="key">Key to process</param>
        </member>
        <member name="M:GLUEditorTerminal.ProcessFormInput(GLUForm)">
            <summary>
            Processes form's mouse input
            </summary>
            <param name="form">Form to process</param>
        </member>
        <member name="M:GLUEditorTerminal.RepaintSelection">
            <summary>
            Repaints controls selection
            </summary>
        </member>
        <member name="M:GLUEditorTerminal.ProcessForm">
            <summary>
            Main method for updating forms
            </summary>
            <returns>Input interceptionFlag</returns>
        </member>
        <member name="M:GLUEditorTerminal.DrawForm">
            <summary>
            Main method for drawing forms
            </summary>
        </member>
        <member name="M:GLUEditorTerminal.Render">
            <summary>
            Renders GLU forms
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.drawWidth">
            <summary>
            Terminal draw width
            </summary>
        </member>
        <member name="F:GLUEditorTerminal.drawHeight">
            <summary>
            Terminal draw height
            </summary>
        </member>
        <member name="M:GLUEditorTerminal.ReplaceSelection(GLUControl)">
            <summary>
            Replaces controls selection
            </summary>
            <param name="c">Replacer control</param>
        </member>
        <member name="M:GLUEditorTerminal.AddToSelection(GLUControl)">
            <summary>
            Adds control to selection
            </summary>
            <param name="c">Control to add</param>
        </member>
        <member name="M:GLUEditorTerminal.RemoveFromSelection(GLUControl)">
            <summary>
            Removes control from selection list
            </summary>
            <param name="c">Control to remove</param>
        </member>
        <member name="M:GLUEditorTerminal.ClearSelection">
            <summary>
            Clears controls selection
            </summary>
        </member>
        <member name="M:GLUEditorTerminal.SetResolution(System.Int32,System.Int32)">
            <summary>
            Sets terminal's screen resolution
            </summary>
            <param name="width">Screen width</param>
            <param name="height">Screen height</param>
        </member>
        <member name="M:GLUEditorTerminal.FocusControl(GLUControl)">
            <summary>
            Focus control
            </summary>
            <param name="c">Control to focus</param>
        </member>
        <member name="M:GLUEditorTerminal.SetControlFocus(GLUControl)">
            <summary>
            Sets control's focus. Internal use
            </summary>
            <param name="c">Control</param>
        </member>
        <member name="M:GLUEditorTerminal.Update(System.Boolean,UnityEngine.Vector3)">
            <summary>
            Process forms and input
            </summary>
        </member>
        <member name="M:GLUEditorTerminal.AddControl(GLUControl)">
            <summary>
            Adds control to terminal
            </summary>
            <param name="c">Control to add</param>
            <returns>Add result</returns>
        </member>
        <member name="M:GLUEditorTerminal.Awake">
            <summary>
            Set up internal states and variables
            </summary>
        </member>
        <member name="M:GLUEditorTerminal.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of terminal</param>
            <param name="width">Width of screen or targetTexture</param>
            <param name="height">Height of screen or targetTexture</param>
        </member>
        <member name="P:GLUEditorTerminal.form">
            <summary>
            Edited forms
            </summary>
        </member>
        <member name="T:GLUControlListWindow">
            <summary>
            Visual controls palette window
            </summary>
        </member>
        <member name="M:GLUControlListWindow.ShowControlsPanelForm">
            <summary>
            Displays Visual control palette window
            </summary>
        </member>
        <member name="M:GLUControlListWindow.FoldUnfoldButton(System.String,System.String,System.Int32)">
            <summary>
            Displays foldout with memorized state of provided object
            </summary>
            <param name="obj">Object</param>
            <param name="text">Text label</param>
            <param name="indent">Visual indent</param>
            <returns>State value</returns>
        </member>
        <member name="M:GLUControlListWindow.OnGUI">
            <summary>
            Standard OnGUI handler
            </summary>
        </member>
        <member name="M:GLUControlListWindow.OnDisable">
            <summary>
            Standard OnDisable handler
            </summary>
        </member>
        <member name="M:GLUControlListWindow.OnEnable">
            <summary>
            Standard OnEnable handler
            </summary>
        </member>
        <member name="P:GLUControlListWindow.selectedButtonStyle">
            <summary>
            Selected button style
            </summary>
        </member>
        <member name="P:GLUControlListWindow.controlTypes">
            <summary>
            List of visual control types
            </summary>
        </member>
        <member name="P:GLUControlListWindow.instance">
            <summary>
            Window instance
            </summary>
        </member>
        <member name="T:GLUEnumEditor">
            <summary>
            Enum object editor
            </summary>
        </member>
        <member name="M:GLUEnumEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUEnumEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUEnumEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUEnumEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUClassInfo">
            <summary>
            Class source analyzer data
            </summary>
        </member>
        <member name="F:GLUClassInfo.separators">
            <summary>
            Words separators
            </summary>
        </member>
        <member name="F:GLUClassInfo.classes">
            <summary>
            Subclasses
            </summary>
        </member>
        <member name="F:GLUClassInfo.enums">
            <summary>
            Nested enums
            </summary>
        </member>
        <member name="F:GLUClassInfo.delegates">
            <summary>
            Neste delegates
            </summary>
        </member>
        <member name="F:GLUClassInfo.structs">
            <summary>
            Nested structs
            </summary>
        </member>
        <member name="F:GLUClassInfo.fields">
            <summary>
            Class fields
            </summary>
        </member>
        <member name="F:GLUClassInfo.properties">
            <summary>
            Class properties
            </summary>
        </member>
        <member name="F:GLUClassInfo.methods">
            <summary>
            Class methods
            </summary>
        </member>
        <member name="M:GLUClassInfo.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Class info constructor
            </summary>
            <param name="name">Class name</param>
            <param name="endPosition">Class end position in text</param>
            <param name="lineNumber">Class start line position in text</param>
            <param name="startPosition">Class start position in text</param>
            <param name="type">Class type</param>
        </member>
        <member name="M:GLUClassInfo.Get(System.Int32,System.Int32,System.Int32@,System.Int32@,System.String)">
            <summary>
            Aquires class data from provided text
            </summary>
            <param name="sPos">Class start position in provided text</param>
            <param name="sLN">Start line number</param>
            <param name="pos">Current text position</param>
            <param name="lineNumber">Current line number</param>
            <param name="text">Provided text</param>
            <returns>Class source analyzer data</returns>
        </member>
        <member name="M:GLUClassInfo.GetMethod(System.String)">
            <summary>
            Gets method by provided name
            </summary>
            <param name="name">Provded name</param>
            <returns>Method info, if found one and null otherwize</returns>
        </member>
        <member name="T:GLUStyleEditor">
            <summary>
            Style object editor
            </summary>
        </member>
        <member name="F:GLUStyleEditor.styleResourcesPath">
            <summary>
            Style absolute resources path
            </summary>
        </member>
        <member name="F:GLUStyleEditor.applicibleStyles">
            <summary>
            Applicible styles list
            </summary>
        </member>
        <member name="F:GLUStyleEditor.styleNames">
            <summary>
            Style names list
            </summary>
        </member>
        <member name="M:GLUStyleEditor.LoadStyleNames">
            <summary>
            Loads style names 
            </summary>
        </member>
        <member name="F:GLUStyleEditor.currentSheetIndex">
            <summary>
            Current style sheet index
            </summary>
        </member>
        <member name="F:GLUStyleEditor.currentStyleIndex">
            <summary>
            Current style index
            </summary>
        </member>
        <member name="F:GLUStyleEditor.styleName">
            <summary>
            Style name
            </summary>
        </member>
        <member name="M:GLUStyleEditor.StyleChanged(System.Int32)">
            <summary>
            Style change handler
            </summary>
            <param name="i">New current style index</param>
        </member>
        <member name="M:GLUStyleEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUStyleEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUStyleEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUStyleEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="P:GLUStyleEditor.currentSheet">
            <summary>
            Current style sheet
            </summary>
        </member>
        <member name="T:GLUGLUTextureEditor">
            <summary>
            GLUTexture object editor
            </summary>
        </member>
        <member name="M:GLUGLUTextureEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUTextureEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUTextureEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUTextureEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUControlStateEditor">
            <summary>
            Animation index editor
            </summary>
        </member>
        <member name="M:GLUControlStateEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUControlStateEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUControlStateEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUControlStateEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUStyleSheetItemsEditor">
            <summary>
            Styl sheet items editor
            </summary>
        </member>
        <member name="T:GLUDictionaryEditor">
            <summary>
            Editor for dictionary object
            </summary>
        </member>
        <member name="F:GLUDictionaryEditor.OnDrawAppendButton">
            <summary>
            Draw append button action
            </summary>
        </member>
        <member name="F:GLUDictionaryEditor.OnGetKeyText">
            <summary>
            Key mapper action
            </summary>
        </member>
        <member name="F:GLUDictionaryEditor.OnRemoveItem">
            <summary>
            Remove item event
            </summary>
        </member>
        <member name="M:GLUDictionaryEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUDictionaryEditor.SetValue(GLUMemberInfo,System.Object,System.Boolean)">
            <summary>
            Set value
            </summary>
            <param name="mi">Member info</param>
            <param name="addToUndo">If true, this action will be added to undo list</param>
            <param name="value">Member value</param>
        </member>
        <member name="M:GLUDictionaryEditor.RemoveMember(GLUMemberInfo)">
            <summary>
            Removes member and its value from members list and form target
            </summary>
            <param name="member">Member to remove</param>
        </member>
        <member name="M:GLUDictionaryEditor.RemoveMembers(System.Collections.Generic.List{GLUMemberInfo})">
            <summary>
            Remove members
            </summary>
            <param name="rl">Members list to remove</param>
        </member>
        <member name="M:GLUDictionaryEditor.DrawContent">
            <summary>
            Draws content 
            </summary>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUDictionaryEditor.LoadContent">
            <summary>
            Loads member content
            </summary>
        </member>
        <member name="M:GLUDictionaryEditor.UpdateValues">
            <summary>
            Updates editor members values
            </summary>
        </member>
        <member name="M:GLUDictionaryEditor.GetKeyText(System.Object)">
            <summary>
            Internal. Used to map dictionary key to another value
            </summary>
            <param name="value">Key value</param>
            <returns>Mapped value</returns>
        </member>
        <member name="M:GLUDictionaryEditor.DefaultDrawAppendButton">
            <summary>
            Draw default append button. Dictionary editor does not draws append button by default.
            </summary>
            <returns>True, if button pressed</returns>
        </member>
        <member name="M:GLUDictionaryEditor.Add(System.Object,System.Object)">
            <summary>
            Adds new member to target object
            </summary>
            <param name="key">Member key</param>
            <param name="value">Member value</param>
        </member>
        <member name="M:GLUDictionaryEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="F:GLUStyleSheetItemsEditor.gluStyleType">
            <summary>
            GLUStyle type object
            </summary>
        </member>
        <member name="F:GLUStyleSheetItemsEditor.gluStyleAttributeType">
            <summary>
            GLUStyle attribute type object
            </summary>
        </member>
        <member name="F:GLUStyleSheetItemsEditor.memberGroups">
            <summary>
            Member groups list
            </summary>
        </member>
        <member name="M:GLUStyleSheetItemsEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUStyleSheetItemsEditor.DrawContent">
            <summary>
            Draws editor content
            </summary>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUStyleSheetItemsEditor.LoadContent">
            <summary>
            Loads members content
            </summary>
        </member>
        <member name="M:GLUStyleSheetItemsEditor.DefaultDrawAppendButton">
            <summary>
            Draws default append button
            </summary>
            <returns>True, if button pressed</returns>
        </member>
        <member name="M:GLUStyleSheetItemsEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="P:GLUStyleSheetItemsEditor.styleTypes">
            <summary>
            Style types list
            </summary>
        </member>
        <member name="P:GLUStyleSheetItemsEditor.styleNames">
            <summary>
            Style names list
            </summary>
        </member>
        <member name="T:GLUChangeObjectNameEvent">
            <summary>
            When GLUe object changes, it is called
            </summary>
            <param name="sender">Sender, usually terminal</param>
            <param name="obj">Object</param>
            <param name="oldName">Old name, if object has changed its name</param>
        </member>
        <member name="T:GLUMemberInfo">
            <summary>
            Member info structure
            </summary>
        </member>
        <member name="F:GLUMemberInfo.memberGroup">
            <summary>
            Member display group type
            </summary>
        </member>
        <member name="F:GLUMemberInfo.parent">
            <summary>
            Parent editor
            </summary>
        </member>
        <member name="F:GLUMemberInfo.type">
            <summary>
            System type
            </summary>
        </member>
        <member name="F:GLUMemberInfo.root">
            <summary>
            If true, member is root
            </summary>
        </member>
        <member name="F:GLUMemberInfo.memberInfo">
            <summary>
            System member info
            </summary>
        </member>
        <member name="F:GLUMemberInfo.parentObject">
            <summary>
            Object, which contains member
            </summary>
        </member>
        <member name="F:GLUMemberInfo.typeName">
            <summary>
            System type name
            </summary>
        </member>
        <member name="F:GLUMemberInfo.name">
            <summary>
            Member name
            </summary>
        </member>
        <member name="F:GLUMemberInfo.value">
            <summary>
            Member's value
            </summary>
        </member>
        <member name="F:GLUMemberInfo.indent">
            <summary>
            Visual indent
            </summary>
        </member>
        <member name="F:GLUMemberInfo.path">
            <summary>
            Path to member
            </summary>
        </member>
        <member name="F:GLUMemberInfo.key">
            <summary>
            Member index, if it is a collection member
            </summary>
        </member>
        <member name="F:GLUMemberInfo.displayName">
            <summary>
            Member name. Used in path
            </summary>
        </member>
        <member name="M:GLUMemberInfo.#ctor(GLUEditor,System.String,System.Object,System.Type,GLUMemberGroup,System.String,System.Reflection.MemberInfo,System.Object,System.Int32,System.String,System.Object,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent member</param>
            <param name="parentObject">Parent object</param>
            <param name="type">Parent system type</param>
            <param name="typeName">Parent system type name</param>
            <param name="mi">System member info</param>
            <param name="value">Member's value</param>
            <param name="indent">Visual indent</param>
            <param name="name">Member name</param>
            <param name="path">Path to the member</param>
            <param name="key">Collection key</param>
            <param name="memberGroup">Parent member group</param>
            <param name="root">Root flag</param>
        </member>
        <member name="M:GLUMemberInfo.AddChild(System.Collections.Generic.List{GLUMemberInfo},GLUMemberInfo)">
            <summary>
            Adds child member to giiven list
            </summary>
            <param name="listToAdd">List to add</param>
            <param name="child">Child</param>
        </member>
        <member name="M:GLUMemberInfo.Comparer(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Comparer for alphabet sort
            </summary>
            <param name="mi0">First operand</param>
            <param name="mi1">Second operand</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUMemberInfo.UpdateValues">
            <summary>
            Updates editor member values
            </summary>
        </member>
        <member name="M:GLUMemberInfo.ToString">
            <summary>
            Converts member ifo to string
            </summary>
            <returns>Text representation</returns>
        </member>
        <member name="M:GLUMemberInfo.Clone">
            <summary>
            Creates member clone
            </summary>
            <returns>Member clone</returns>
        </member>
        <member name="P:GLUMemberInfo.editor">
            <summary>
            Member editor
            </summary>
        </member>
        <member name="T:GLUKeyMapperEvent">
            <summary>
            Delegate for dictionary key mapping
            </summary>
            <param name="key">Key to map</param>
            <returns>Map value</returns>
        </member>
        <member name="T:GLUControlLinkEditor">
            <summary>
            Control link editor. Allows to select control from existed form children
            </summary>
        </member>
        <member name="M:GLUControlLinkEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUControlLinkEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUControlLinkEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUStyleSheetTextStylesEditor">
            <summary>
            Text style editor for style sheets editor
            </summary>
        </member>
        <member name="M:GLUStyleSheetTextStylesEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUStyleSheetTextStylesEditor.DefaultDrawAppendButton">
            <summary>
            Draws default append button
            </summary>
            <returns>True, if button pressed</returns>
        </member>
        <member name="M:GLUStyleSheetTextStylesEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUStyleLinkEditor">
            <summary>
            Style link editor
            </summary>
        </member>
        <member name="M:GLUStyleLinkEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUStyleLinkEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUStyleLinkEditor.StyleChanged(System.Int32)">
            <summary>
            Style change handler
            </summary>
            <param name="i">New current style index</param>
        </member>
        <member name="M:GLUStyleLinkEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
        <member name="T:GLUGLUConstraintsEditor">
            <summary>
            GLUConstraints editor
            </summary>
        </member>
        <member name="M:GLUGLUConstraintsEditor.Edit(System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Displays target editor
            </summary>
            <param name="collectionMember">If true, editor need to display collection member controls</param>
            <param name="remove">If true, remove collection member button was pressed</param>
            <param name="moveUp">If true, move up collection member button was pressed</param>
            <param name="moveDown">If true, move down collection member button was pressed</param>
            <returns>Target object</returns>
        </member>
        <member name="M:GLUGLUConstraintsEditor.Update">
            <summary>
            Updates editor
            </summary>
        </member>
        <member name="M:GLUGLUConstraintsEditor.#ctor(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor object name</param>
            <param name="type">Type of edited object</param>
            <param name="target">Edited object</param>
            <param name="indent">Indent in editor window</param>
            <param name="path">Path to edited object</param>
            <param name="root">If true, this editor is root and parent must be null</param>
            <param name="gmi">Edited object member info. Contains information about object itself and about object's holder</param>
        </member>
        <member name="M:GLUGLUConstraintsEditor.GetInstance(GLUEditor,System.String,System.Type,System.Object,System.Int32,System.String,System.Boolean,GLUMemberInfo)">
            <summary>
            Common interface for getting custom editor for provided object
            </summary>
            <param name="parent">Parent editor</param>
            <param name="name">Editor name</param>
            <param name="type">Target object type</param>
            <param name="target">Target object</param>
            <param name="indent">Draw indent</param>
            <param name="path">PAth to target object holder</param>
            <param name="root">If true, this editor will be root</param>
            <param name="gmi">Target object holder member info</param>
            <returns>Editor instance</returns>
        </member>
    </members>
</doc>
