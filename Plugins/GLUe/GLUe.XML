<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GLUe</name>
    </assembly>
    <members>
        <member name="T:GLUDebugLogForm">
            <summary>
            GLUe debug log console
            </summary>
        </member>
        <member name="T:GLUForm">
            <summary>
            GLU Form
            </summary>
        </member>
        <member name="T:GLULayeredTextControl">
            <summary>
            Layered text control
            </summary>
        </member>
        <member name="T:GLULayeredControl">
            <summary>
            Base class of all controls with animated graphics
            </summary>
        </member>
        <member name="T:GLUControl">
            <summary>
            Base class for all GLU interactable objects (Controls)
            </summary>
        </member>
        <member name="T:GLUGraphicObject">
            <summary>
            Base class for all styled graphic objects
            </summary>
        </member>
        <member name="T:GLUObject">
            <summary>
            Base class form most of entities in GLUe
            </summary>
        </member>
        <member name="T:IGLUAnimateable">
            <summary>
            Bas e interface for all animated objects. Contains methods for storing temporary states of current animation
            </summary>
        </member>
        <member name="M:IGLUAnimateable.GetSequenceState(System.Type)">
            <summary>
            Return current sequence state (Mostly, temporary transition sequence)
            </summary>
            <param name="t">Time parameter. Contains last acces time in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:IGLUAnimateable.SetSequenceState(System.Type,GLUSequenceState)">
            <summary>
            Sets new current sequence state value
            </summary>
            <param name="t">Time parameter. Contains last acces time in milliseconds</param>
            <param name="value">New sequence state</param>
            <returns>Newly set sequence state</returns>
        </member>
        <member name="T:IGLUTransformable">
            <summary>
            Common interface for transformable objects
            </summary>
        </member>
        <member name="P:IGLUTransformable.localDrawScale">
            <summary>
            Object's drawing scale
            </summary>
        </member>
        <member name="P:IGLUTransformable.localDrawOffset">
            <summary>
            Object's drawing offset
            </summary>
        </member>
        <member name="P:IGLUTransformable.localDrawRotation">
            <summary>
            Object drawing rotation
            </summary>
        </member>
        <member name="T:IGLUObject">
            <summary>
            Common interface for all objects in GLUe
            </summary>
        </member>
        <member name="M:IGLUObject.GetParentOfType``1">
            <summary>
            Returns parent object of provided type. Recursive.
            </summary>
            <typeparam name="T">Parent type to search</typeparam>
            <returns>Parent of type T, if found one and null otherwize.</returns>
            <example>
            This example shows how to use an GetParentOfType method
            <code>
            \code
            GLUForm f = this.GetParentOfType&lt;GLUForm&gt;();
            f.Show();
            \endcode
            </code>
            </example>
        </member>
        <member name="P:IGLUObject.id">
            <summary>
            Object's GUID
            </summary>
        </member>
        <member name="P:IGLUObject.parent">
            <summary>
            Object's parent
            </summary>
        </member>
        <member name="T:IGLUMemberHolder">
            <summary>
            MemberHolder interface
            </summary>
        </member>
        <member name="M:IGLUMemberHolder.SetMemberValue(System.String,System.Object,System.Reflection.MemberInfo)">
            <summary>
            Sets up member value
            </summary>
            <param name="memberName">Member name</param>
            <param name="value">New member value</param>
            <param name="mi">Member info</param>
        </member>
        <member name="P:IGLUMemberHolder.id">
            <summary>
            Object id
            </summary>
        </member>
        <member name="F:GLUObject._visible">
            <summary>
            Internal visibility flag
            </summary>
        </member>
        <member name="M:GLUObject.SetVisible(System.Boolean)">
            <summary>
            Sets visible flag
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="F:GLUObject.selectionMeshOutlineValue">
            <summary>
            Used in Editor. When control is selected, it is surrounded by selection frame.  selectionMeshOutlineValue is outline of selection by natural object size
            </summary>
        </member>
        <member name="F:GLUObject._verticalAlignment">
            <summary>
            Internal object alignment in parent space
            </summary>
        </member>
        <member name="F:GLUObject._alignment">
            <summary>
            Internal. Horizontal alignment of object
            </summary>
        </member>
        <member name="M:GLUObject.GetSequenceState(System.Type)">
            <summary>
            Searches sequenceStates for one with provided type key
            </summary>
            <param name="type">Provided type</param>
            <returns>If no state found, returns null</returns>
        </member>
        <member name="M:GLUObject.SetSequenceState(System.Type,GLUSequenceState)">
            <summary>
            Searches sequenceStates for one with provided type key
            </summary>
            <param name="type">Provided type</param>
            <param name="value">New state</param>
            <returns>State found or null otherwize</returns>
        </member>
        <member name="F:GLUObject.debug">
            <summary>
            Debug flag. If true, provided object will display debug info
            </summary>
        </member>
        <member name="M:GLUObject.GetObjectByID(System.String)">
            <summary>
            Searches object by provided id among all objects
            </summary>
            <param name="id">Provided id</param>
            <returns>Object found or null otherwize</returns>
        </member>
        <member name="M:GLUObject.Destroy(GLUObject)">
            <summary>
            Destroys provided object
            </summary>
            <param name="obj">Provided object</param>
        </member>
        <member name="M:GLUObject.DrawSelectedMesh(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws editor selected mesh
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="F:GLUObject.destroyed">
            <summary>
            Destroyed flag
            </summary>
        </member>
        <member name="F:GLUObject._padding">
            <summary>
            Object padding
            </summary>
        </member>
        <member name="M:GLUObject.SetPadding(GLUPadding)">
            <summary>
            Sets up new padding and performs all internal updates with it
            </summary>
            <param name="value">New padding</param>
        </member>
        <member name="F:GLUObject._widthConstraints">
            <summary>
            Internal width constraints
            </summary>
        </member>
        <member name="M:GLUObject.DoRefresh">
            <summary>
            Calls Refresh(), if it is possible, and Changed() after it
            </summary>
        </member>
        <member name="M:GLUObject.SetWidthConstraints(GLUConstraints)">
            <summary>
            Sets up new width constraints and performs all nesessary updates with it
            </summary>
            <param name="value">New width constraints</param>
        </member>
        <member name="F:GLUObject._heightConstraints">
            <summary>
            Internal. Height constraints
            </summary>
        </member>
        <member name="M:GLUObject.SetHeightConstraints(GLUConstraints)">
            <summary>
            Sets up new height constraints and performs all nesessary operations
            </summary>
            <param name="value">New constraints</param>
        </member>
        <member name="F:GLUObject.clientOffset">
            <summary>
            Internal use. Object's content local offset
            </summary>
        </member>
        <member name="F:GLUObject.offset">
            <summary>
            Internal use. Object's local offset
            </summary>
        </member>
        <member name="F:GLUObject.clientDrawOffset">
            <summary>
            Internal use. Object's content local draw offset
            </summary>
        </member>
        <member name="F:GLUObject.drawOffset">
            <summary>
            Internal use. Object's local draw offset
            </summary>
        </member>
        <member name="F:GLUObject.bounds">
            <summary>
            Real bounds of object. It may exceeds its width and height
            </summary>
        </member>
        <member name="F:GLUObject._x">
            <summary>
            Internal. Left position of object
            </summary>
        </member>
        <member name="M:GLUObject.SetX(GLUNumber)">
            <summary>
            Sets x (horizontal position) value
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="F:GLUObject._y">
            <summary>
            Internal. Top position of object
            </summary>
        </member>
        <member name="M:GLUObject.SetY(GLUNumber)">
            <summary>
            Sets y (vertical position) value
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLUObject.GetAcceptable">
            <summary>
            Checks, if this object accepts children and return it, if true. Otherwize, searches acceptable object among parents
            </summary>
            <returns>This object or first acceptable parent</returns>
        </member>
        <member name="F:GLUObject._width">
            <summary>
            Internal width field
            </summary>
        </member>
        <member name="M:GLUObject.SetWidth(GLUNumber)">
            <summary>
            Sets up new object width and performs all nesessary operations
            </summary>
            <param name="value">New width</param>
        </member>
        <member name="F:GLUObject._localDrawScale">
            <summary>
            Internal. Draw scale
            </summary>
        </member>
        <member name="F:GLUObject._localDrawOffset">
            <summary>
            Inernal. Draw offset
            </summary>
        </member>
        <member name="F:GLUObject._localDrawRotation">
            <summary>
            Internal. Draw rotation
            </summary>
        </member>
        <member name="F:GLUObject._height">
            <summary>
            Internal object height field
            </summary>
        </member>
        <member name="M:GLUObject.SetHeight(GLUNumber)">
            <summary>
            Sets up new height and performs all nesessary actions
            </summary>
            <param name="value">New height</param>
        </member>
        <member name="F:GLUObject._autoSize">
            <summary>
            Internal auto size flag
            </summary>
        </member>
        <member name="M:GLUObject.SetAutoSize(System.Boolean)">
            <summary>
            Sets up autosize flag and performs all nesessary internal operations
            </summary>
            <param name="value">New autoSize value</param>
        </member>
        <member name="M:GLUObject.Changed(GLUObject)">
            <summary>
            Called after object changes to inform parent that it happens
            </summary>
            <param name="sender">Event source</param>
        </member>
        <member name="F:GLUObject.tag">
            <summary>
            Tag. Use it to attach additional data to object
            </summary>
        </member>
        <member name="F:GLUObject._parent">
            <summary>
            Internal object parent
            </summary>
        </member>
        <member name="F:GLUObject.lastMP">
            <summary>
            For debug purposes. Last cursor position in object
            </summary>
        </member>
        <member name="F:GLUObject.OnChange">
            <summary>
            OnChange delegate. Occurs after changing any property, affecting appearance
            </summary>
        </member>
        <member name="M:GLUObject.#ctor(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Base constructor
            </summary>
            <param name="parent">Object parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of object</param>
            <param name="height">Height of object</param>
            <param name="padding">Padding</param>
            <param name="alignment">Horizontal alignment in parent space</param>
            <param name="verticalAlignment">Vertical alignment in parent space</param>
        </member>
        <member name="M:GLUObject.#ctor">
            <summary>
            Parameterless constructor for serialization and other internal purposes
            </summary>
        </member>
        <member name="F:GLUObject.opw">
            <summary>
            Old parent width. Internal
            </summary>
        </member>
        <member name="F:GLUObject.oph">
            <summary>
            Old parent height. Internal
            </summary>
        </member>
        <member name="M:GLUObject.UpdateBounds(GLURect@,System.Nullable{GLUConstraints},System.Nullable{GLUConstraints},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean@,System.Boolean@,System.Int32@,System.Int32@)">
            <summary>
            Calculates internal bounds. Used in auto size mechanizm
            </summary>
        </member>
        <member name="F:GLUObject.lb">
            <summary>
            Internal local bounds
            </summary>
        </member>
        <member name="M:GLUObject.MoveContent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves content by specified dx and dy
            </summary>
            <param name="dx">Horizontal position delta</param>
            <param name="dy">Vertical position delta</param>
            <param name="w">Parent width</param>
            <param name="h">Parent height</param>
        </member>
        <member name="M:GLUObject.UpdateAutosizeLayout">
            <summary>
            Updates layout of autosize object 
            </summary>
        </member>
        <member name="M:GLUObject.UpdatePadding(UnityEngine.Vector2)">
            <summary>
            Updates padding with new parent size
            </summary>
            <param name="sz">New parent size</param>
        </member>
        <member name="M:GLUObject.UpdateConstraints(UnityEngine.Vector2)">
            <summary>
            Updates constraints with new parent size
            </summary>
            <param name="sz">New parent size</param>
        </member>
        <member name="F:GLUObject.parentWidth">
            <summary>
            Parent width. If parent == null, contains terminal width
            </summary>
        </member>
        <member name="F:GLUObject.parentHeight">
            <summary>
            Parent height. If parent == null, contains terminal height
            </summary>
        </member>
        <member name="M:GLUObject.UpdateParentSize">
            <summary>
            Updates parentWidth and parentHeight fields
            </summary>
        </member>
        <member name="M:GLUObject.Update">
            <summary>
            Updates object layout and calls Refresh, if needed
            </summary>
        </member>
        <member name="M:GLUObject.UpdateInternals">
            <summary>
            Updates internal values (offsets, bounds, etc.)
            </summary>
        </member>
        <member name="M:GLUObject.Contains(UnityEngine.Vector3)">
            <summary>
            Check if object contains point
            </summary>
            <param name="p">Point to check</param>
            <returns>True, if point is contained in this control's bounds</returns>
        </member>
        <member name="M:GLUObject.Intersects(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Check if object intersects with provided area
            </summary>
            <param name="xMin">Left border</param>
            <param name="yMin">Top border</param>
            <param name="xMax">Right border</param>
            <param name="yMax">Bottom border</param>
            <returns>True, if object intersects</returns>
        </member>
        <member name="M:GLUObject.Contained(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Check if object is contained in provided area
            </summary>
            <param name="xMin">Left border</param>
            <param name="yMin">Top border</param>
            <param name="xMax">Right border</param>
            <param name="yMax">Bottom border</param>
            <returns>True, if object is contained</returns>
        </member>
        <member name="F:GLUObject.initialized">
            <summary>
            Internal. If false, this object isn't initialized yet.
            </summary>
        </member>
        <member name="M:GLUObject.ApplyConstraints">
            <summary>
            Internal. Applies layout constraints. Called during Refresh
            </summary>
        </member>
        <member name="M:GLUObject.ApplyConstraints(UnityEngine.Vector2,GLUConstraints,GLUConstraints)">
            <summary>
            Internal. Applies layout constraints to provided coords.
            </summary>
        </member>
        <member name="F:GLUObject.editorSelectedMesh">
            <summary>
            Selection mesh. Drawn over selected control in visual editor mode.
            </summary>
        </member>
        <member name="M:GLUObject.GenerateSelectedMesh(System.Int32,GLUColor)">
            <summary>
            Generates selected mesh. Editor mode
            </summary>
        </member>
        <member name="M:GLUObject.RefreshObject">
            <summary>
            Internal. Base method for object content update.
            </summary>
        </member>
        <member name="M:GLUObject.CalculateBounds(System.Nullable{GLUConstraints},System.Nullable{GLUConstraints},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Internal. Calculate object bounds. Called during Refresh
            </summary>
        </member>
        <member name="F:GLUObject.localBounds">
            <summary>
            Control bounds. Calculated in 
            </summary>
        </member>
        <member name="F:GLUObject.needToRefresh">
            <summary>
            Internal. Is set to true, when object needs to refresh during refresh. Used to avoid endless recursion
            </summary>
        </member>
        <member name="F:GLUObject._pivot">
            <summary>
            Internal object drawing pivot 
            </summary>
        </member>
        <member name="F:GLUObject._pivotType">
            <summary>
            Internal pivot type
            </summary>
        </member>
        <member name="M:GLUObject.UpdatePivot">
            <summary>
            Internal use. Updates control's and its content's pivots.
            </summary>
        </member>
        <member name="F:GLUObject.updateLayoutInProgress">
            <summary>
            If true, UpdateLayout() method is in progress
            </summary>
        </member>
        <member name="M:GLUObject.UpdateContent">
            <summary>
            Updates content 
            </summary>
        </member>
        <member name="M:GLUObject.UpdateLayout">
            <summary>
            Updates internal layout and prepares values for refreshing
            </summary>
        </member>
        <member name="M:GLUObject.Initialize">
            <summary>
            Used for the first initialization of the object
            </summary>
        </member>
        <member name="M:GLUObject.PrepareRefresh">
            <summary>
            Called internally before refresh
            </summary>
        </member>
        <member name="M:GLUObject.Refresh">
            <summary>
            Updates logic and visual parts of object
            </summary>
        </member>
        <member name="M:GLUObject.GetActiveTextStyle">
            <summary>
            Used in documents. Returns active text style of document
            </summary>
            <returns>Active text style if this is one of GLUDocument objects and null otherwize</returns>
        </member>
        <member name="M:GLUObject.GetParentOfType``1">
            <summary>
            Returns object's ancestor of provided type
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>Ancestor of provided type if found one, and null otherwize</returns>
        </member>
        <member name="M:GLUObject.GetTopmostParent">
            <summary>
            Returns object's topmost parent
            </summary>
            <returns>Topmost parent, if found one, and null otherwize</returns>
        </member>
        <member name="M:GLUObject.CalculatePaddedContentBounds(GLUConstraints,GLUConstraints,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates absolute padded content bounds in parent space
            </summary>
            <param name="widthConstraints">Width constraints</param>
            <param name="heightConstraints">Height constraints</param>
            <param name="pw">Specified parent width. If omitted, current parent width will be used</param>
            <param name="ph">Specified parent height. If omitted, current parent height will be used</param>
            <returns>Object bounds</returns>
        </member>
        <member name="M:GLUObject.CalculateNonPaddedContentBounds(GLUConstraints,GLUConstraints,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates absolute non-padded content bounds in parent space
            </summary>
            <param name="widthConstraints">Width constraints</param>
            <param name="heightConstraints">Height constraints</param>
            <param name="pw">Specified parent width. If omitted, current parent width will be used</param>
            <param name="ph">Specified parent height. If omitted, current parent height will be used</param>
            <returns>Object bounds</returns>
        </member>
        <member name="M:GLUObject.SetParent(GLUObject)">
            <summary>
            Sets parent of object
            </summary>
            <param name="value">New parent</param>
        </member>
        <member name="M:GLUObject.ChildChanged(GLUObject)">
            <summary>
            Child changes handler
            </summary>
            <param name="child">Child changed. Can be non-control</param>
        </member>
        <member name="M:GLUObject.ParentToWorld(UnityEngine.Vector3)">
            <summary>
            Translates vector coordinates to object local space
            </summary>
            <param name="coords">Coordinates to translate</param>
            <returns>Local coordinates</returns>
        </member>
        <member name="M:GLUObject.ParentToParent(GLUObject,UnityEngine.Vector3)">
            <summary>
            Translates vector coordinates from local parent space to target parent space
            </summary>
            <param name="targetParent">Target parent</param>
            <param name="coords">Coords</param>
            <returns>Coordinates, translated to target parent space</returns>
        </member>
        <member name="M:GLUObject.CoordToParent(GLUObject,UnityEngine.Vector3)">
            <summary>
            Translates vector coordinates to object parent space
            </summary>
            <param name="coords">Coords</param>
            <param name="parentToStart">Prent to start from</param>
            <returns>Coordinates, translated to object's parent space</returns>
        </member>
        <member name="M:GLUObject.WorldToParent(UnityEngine.Vector3)">
            <summary>
            Translates vector coordinates to object parent space
            </summary>
            <param name="coords">Coords</param>
            <returns>Coordinates, translated to object's parent space</returns>
        </member>
        <member name="M:GLUObject.PrepareSerialization">
            <summary>
            Prepares serialization. This method is used to set XML-specific fields of object
            </summary>
        </member>
        <member name="M:GLUObject.Save(System.String)">
            <summary>
            Saves object to XML-file
            </summary>
            <param name="fileName">URL to save</param>
        </member>
        <member name="M:GLUObject.CompleteDeserialization">
            <summary>
            This method is called internally after deserialization. Use with caution
            </summary>
        </member>
        <member name="M:GLUObject.PrepareDeserialization">
            <summary>
            This method is called internally before deserialization. Use with caution
            </summary>
        </member>
        <member name="M:GLUObject.ToggleVisualUpdates(System.Boolean)">
            <summary>
            Toggles visual updates
            </summary>
            <param name="v">Visual updates flag</param>
        </member>
        <member name="M:GLUObject.Load``1(System.String)">
            <summary>
            Creates an instance of provided class and load its values from provided file
            </summary>
            <typeparam name="T">Provided class</typeparam>
            <param name="filename">URL to read from</param>
            <returns>An instance of provided class, if successfull</returns>
            <example>
            This example shows how to use a GLUObject.Load&lt;T&gt; method
            <code>
            \code
            GLUForm f = GLUObject.Load&lt;GLUForm&gt;("MyForm");
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUObject.LoadContentFromResource(System.String)">
            <summary>
            Load object content from provided file
            </summary>
            <param name="resourceName">Resource to load</param>
        </member>
        <member name="M:GLUObject.LoadContent(System.Xml.XmlNode)">
            <summary>
            Load object content from provided Xml node
            </summary>
            <param name="node">Node to load from</param>
        </member>
        <member name="M:GLUObject.LoadContent(System.String)">
            <summary>
            Load object content from provided file
            </summary>
            <param name="filename">Filename to load</param>
        </member>
        <member name="M:GLUObject.LoadContentFromString(System.String)">
            <summary>
            Load object content from provided string
            </summary>
            <param name="data">String to parse</param>
        </member>
        <member name="M:GLUObject.Loader(System.String)">
            <summary>
            Internal content loader
            </summary>
            <param name="url">URL to load</param>
            <returns>Enumerator</returns>
        </member>
        <member name="M:GLUObject.LoadContentFromUrl(System.String)">
            <summary>
            Loads content from provided URL
            </summary>
            <param name="url">URL to load</param>
        </member>
        <member name="M:GLUObject.Load(System.String)">
            <summary>
            Load object from provided xml file
            </summary>
            <param name="filename">URL to load</param>
            <returns>Loaded object</returns>
        </member>
        <member name="M:GLUObject.Assign(GLUObject)">
            <summary>
            Assigns values from provided object
            </summary>
            <param name="o">Source object</param>
        </member>
        <member name="M:GLUObject.NeedRepaint(GLUObject)">
            <summary>
            Call this to say to parent, that you need to repaint. Generally used, when parent is GLUScrollView to cut out unnesessary children draws, when idle.
            </summary>
        </member>
        <member name="M:GLUObject.NeedRepaint">
            <summary>
            Call this to say to parent, that control needs to repaint. Generally used, when parent is GLUScrollView to cut out unnesessary children draws, when idle.
            </summary>
        </member>
        <member name="M:GLUObject.Destroy">
            <summary>
            Set to null all reference fields
            </summary>
        </member>
        <member name="M:GLUObject.SetValues(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Sets values of an object
            </summary>
            <param name="parent">Parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of an object</param>
            <param name="height">Height of an object</param>
            <param name="padding">Object's content padding</param>
            <param name="alignment">Horizontal alignment</param>
            <param name="verticalAlignment">Vertical alignment</param>
        </member>
        <member name="M:GLUObject.SetValues(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding)">
            <summary>
            Sets object's values
            </summary>
            <param name="parent">Parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of an object</param>
            <param name="height">Height of an object</param>
            <param name="padding">Object's content padding</param>
        </member>
        <member name="M:GLUObject.Reorder">
            <summary>
            Recreates control order chain
            </summary>
        </member>
        <member name="M:GLUObject.NullList(System.Collections.Generic.List{GLUControl})">
            <summary>
            Nullify elements of the list
            </summary>
            <param name="list">List to nullify</param>
        </member>
        <member name="M:GLUObject.SetMemberValue(System.String,System.Object,System.Reflection.MemberInfo)">
            <summary>
            Sets member value
            </summary>
            <param name="memberName">Member name</param>
            <param name="value">Member value</param>
            <param name="mi">Optional member info parameter</param>
        </member>
        <member name="M:GLUObject.NullList``1(System.Collections.Generic.List{``0})">
            <summary>
            Nullify elements of the list
            </summary>
            <typeparam name="T">List element type: GLUControl</typeparam>
            <param name="list">List to nullify</param>
        </member>
        <member name="M:GLUObject.ToString">
            <summary>
            Returns text representation
            </summary>
            <returns>Text representation</returns>
        </member>
        <member name="M:GLUObject.SerializeToString">
            <summary>
            Returns text representation
            </summary>
            <returns>Text representation</returns>
        </member>
        <member name="M:GLUObject.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUObject.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parse results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="P:GLUObject.anchors">
            <summary>
            Object anchors.Anchors manages object behaviour, when parent object changes its size 
            </summary>
        </member>
        <member name="P:GLUObject.visible">
            <summary>
            Visibility/invisibility of control
            </summary>
        </member>
        <member name="P:GLUObject.verticalAlignment">
            <summary>
            Vertical alignment of object in parent space
            </summary>
        </member>
        <member name="P:GLUObject.enabled">
            <summary>
            Enabled flag. Disabled controls cannot process input
            </summary>
        </member>
        <member name="P:GLUObject.alignment">
            <summary>
            Horizontal alignment of object
            </summary>
        </member>
        <member name="P:GLUObject.id">
            <summary>
            Unique ID of object. Not implemented yet
            </summary>
        </member>
        <member name="P:GLUObject.padding">
            <summary>
            Padding of object. This means a padding of object's visual content, excluding its background
            </summary>
        </member>
        <member name="P:GLUObject.widthConstraints">
            <summary>
            Width constraints
            </summary>
        </member>
        <member name="P:GLUObject.heightConstraints">
            <summary>
            Height constrains
            </summary>
        </member>
        <member name="P:GLUObject.clientWidth">
            <summary>
            Client width of object. Usually width - padding.left - padding.right
            </summary>
        </member>
        <member name="P:GLUObject.clientHeight">
            <summary>
            Client height of object. Usually height - padding.top - padding.bottom
            </summary>
        </member>
        <member name="P:GLUObject.x">
            <summary>
            Left position of object
            </summary>
        </member>
        <member name="P:GLUObject.y">
            <summary>
            Top position of object
            </summary>
        </member>
        <member name="P:GLUObject.acceptsChildren">
            <summary>
            Indicates editor, this object doesn't accept visually created children 
            </summary>
        </member>
        <member name="P:GLUObject.width">
            <summary>
            Width of object. Setting it will cause mesh generation
            </summary>
        </member>
        <member name="P:GLUObject.localDrawScale">
            <summary>
            Draw scale
            </summary>
        </member>
        <member name="P:GLUObject.localDrawOffset">
            <summary>
            Draw offset
            </summary>
        </member>
        <member name="P:GLUObject.localDrawRotation">
            <summary>
            Draw rotation
            </summary>
        </member>
        <member name="P:GLUObject.height">
            <summary>
            Height of object. Setting it will cause mesh generation
            </summary>
        </member>
        <member name="P:GLUObject.autoSize">
            <summary>
            Autosize flag. If true, object automatically changes size according to content's layout
            </summary>
        </member>
        <member name="P:GLUObject.parent">
            <summary>
            Object's parent. If parent == null, current terminal is assumed to be a parent
            </summary>
        </member>
        <member name="P:GLUObject.disableVisualUpdates">
            <summary>
            Disale visual updates. When set, property changes doesn't affect visuals
            </summary>
        </member>
        <member name="P:GLUObject.refreshInProgress">
            <summary>
            Internal. If true, refresh is in progress. Used to avoid endless recursion
            </summary>
        </member>
        <member name="P:GLUObject.pivot">
            <summary>
            Pivot coordinates
            </summary>
        </member>
        <member name="P:GLUObject.pivotType">
            <summary>
            Pivot type
            </summary>
        </member>
        <member name="F:GLUGraphicObject._style">
            <summary>
            Internal style
            </summary>
        </member>
        <member name="M:GLUGraphicObject.SetStyle(GLUStyle)">
            <summary>
            Internal method used to set up new style
            </summary>
            <param name="style">Style to set up</param>
        </member>
        <member name="M:GLUGraphicObject.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUGraphicObject.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="styleName">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUGraphicObject.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUGraphicObject.Assign(GLUObject)">
            <summary>
            Assigns values from provided object
            </summary>
            <param name="o">Source object</param>
        </member>
        <member name="M:GLUGraphicObject.#ctor(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,GLUStyle,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Object parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of object</param>
            <param name="height">Height of object</param>
            <param name="padding">Padding</param>
            <param name="style">Object style</param>
            <param name="alignment">Object horizontal alignment</param>
            <param name="verticalAlignment">Object vertical alignment</param>
        </member>
        <member name="M:GLUGraphicObject.#ctor(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUStyle,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Object parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of object</param>
            <param name="height">Height of object</param>
            <param name="style">Object style</param>
            <param name="alignment">Object horizontal alignment</param>
            <param name="verticalAlignment">Object vertical alignment</param>
        </member>
        <member name="M:GLUGraphicObject.#ctor">
            <summary>
            Parameterless constructor for serialization purposes
            </summary>
        </member>
        <member name="F:GLUGraphicObject.oStyle">
            <summary>
            Internal. Useтd to check if style is changed during Refresh
            </summary>
        </member>
        <member name="M:GLUGraphicObject.RefreshGraphicObject">
            <summary>
            Internal. Base method for graphic object content update.
            </summary>
        </member>
        <member name="M:GLUGraphicObject.PrepareRefresh">
            <summary>
            Called internally before refresh
            </summary>
        </member>
        <member name="M:GLUGraphicObject.RefreshObject">
            <summary>
            Internal. Updates content
            </summary>
        </member>
        <member name="M:GLUGraphicObject.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes object to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUGraphicObject.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling object's content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUGraphicObject.SetValues(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUStyle)">
            <summary>
            Sets object's values
            </summary>
            <param name="parent">Parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of an object</param>
            <param name="height">Height of an object</param>
            <param name="style">Object style</param>
        </member>
        <member name="P:GLUGraphicObject.parent">
            <summary>
            Parent
            </summary>
        </member>
        <member name="P:GLUGraphicObject.style">
            <summary>
            Object style
            </summary>
        </member>
        <member name="T:IGLUControl">
            <summary>
            GLUControl interface
            </summary>
        </member>
        <member name="P:IGLUControl.name">
            <summary>
            Control name
            </summary>
        </member>
        <member name="F:GLUControl.terminal">
            <summary>
            Cointrols's terminal
            </summary>
        </member>
        <member name="F:GLUControl._children">
            <summary>
            Internal list of children controls of control
            </summary>
        </member>
        <member name="F:GLUControl.disabledColorMultiplier">
            <summary>
            Disable color multiplier
            </summary>
        </member>
        <member name="F:GLUControl.orderList">
            <summary>
            Children order list
            </summary>
        </member>
        <member name="F:GLUControl.passEventToParent">
            <summary>
            If true, event will be passed to parent via event handlers (InputPressed, Focus, etc..) 
            </summary>
        </member>
        <member name="M:GLUControl.ChangeControlState(System.Int32)">
            <summary>
            Sets control state
            </summary>
            <param name="value">New state</param>
        </member>
        <member name="F:GLUControl.hideTransitionDuration">
            <summary>
            Hide transition (post-hide visibility) duration.
            </summary>
        </member>
        <member name="M:GLUControl.SetControlStateFlag(GLUControlState)">
            <summary>
            Sets control state flag 
            </summary>
            <param name="flag">Flag to set</param>
        </member>
        <member name="M:GLUControl.GetControlStateFlag(GLUControlState)">
            <summary>
            Checks, if provided flag is set
            </summary>
            <param name="flag">Flag to check</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUControl.ResetControlStateFlag(GLUControlState)">
            <summary>
            Resets control state flag
            </summary>
            <param name="flag">Flag to reset</param>
        </member>
        <member name="F:GLUControl.disableContainingCheck">
            <summary>
            Internal. Used to disable cursor containing check on Press
            </summary>
        </member>
        <member name="F:GLUControl.internalChild">
            <summary>
            If set to true, control is inavailable for selection in visual form editor
            </summary>
        </member>
        <member name="M:GLUControl.WaitForHideTransitionEnd">
            <summary>
            Waits until hide transition ends 
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:GLUControl.SetVisible(System.Boolean)">
            <summary>
            Sets visible flag
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="F:GLUControl._popup">
            <summary>
            Popup menu for this control 
            </summary>
        </member>
        <member name="F:GLUControl.popupId">
            <summary>
            Popup menu id 
            </summary>
        </member>
        <member name="M:GLUControl.SetStayOnTop(System.Boolean)">
            <summary>
            Sets stayOnTop flag 
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLUControl.SetInputTransparent(System.Boolean)">
            <summary>
            Sets inputTransparent flag
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="F:GLUControl.hoverOnFocus">
            <summary>
            If true, control will change state to "hovered" on focus and to "normal" on unfocus 
            </summary>
        </member>
        <member name="F:GLUControl.OnShow">
            <summary>
            OnShow delegate. Occurs after setting "visible" prop to true 
            </summary>
        </member>
        <member name="F:GLUControl.OnHide">
            <summary>
            OnHide delegate. Occurs after setting "visible" prop to false 
            </summary>
        </member>
        <member name="F:GLUControl.OnFocus">
            <summary>
            OnFocus. Triggered when control gets input focus
            </summary>
        </member>
        <member name="F:GLUControl.OnUnFocus">
            <summary>
            OnUnFocus. Triggered when control looses input focus
            </summary>
        </member>
        <member name="F:GLUControl.OnDrop">
            <summary>
            Triggered when something had dropped to the control 
            </summary>
        </member>
        <member name="F:GLUControl.OnInputMove">
            <summary>
            Triggered when cursor moved over the (focused) control
            </summary>
        </member>
        <member name="F:GLUControl.OnClick">
            <summary>
            When user clicks on the control
            </summary>
        </member>
        <member name="F:GLUControl.OnDoubleClick">
            <summary>
            When user double clicks on the control
            </summary>
        </member>
        <member name="F:GLUControl.OnRefresh">
            <summary>
            When control is refreshed
            </summary>
        </member>
        <member name="F:GLUControl.OnChange">
            <summary>
            Change delegate. Called when control changes
            </summary>
        </member>
        <member name="F:GLUControl.OnInputDown">
            <summary>
            Triggered when mouse button or touchscreen is held. Warning: it will be called every Update time!
            </summary>
        </member>
        <member name="F:GLUControl.OnInputPressed">
            <summary>
            Triggered when mouse button or touchscreen is just pressed
            </summary>
        </member>
        <member name="F:GLUControl.OnInputReleased">
            <summary>
            Triggered when mouse button or touchscreen is just released
            </summary>
        </member>
        <member name="F:GLUControl.OnChar">
            <summary>
            Triggered when any character is pressed
            </summary>
        </member>
        <member name="F:GLUControl.OnControlKeyPressed">
            <summary>
            Triggered when keyboard key is pressed
            </summary>
        </member>
        <member name="F:GLUControl.OnStartDrag">
            <summary>
            Triggered whem user start dragging control
            </summary>
        </member>
        <member name="F:GLUControl.OnDrag">
            <summary>
            Triggered when control is dragged
            </summary>
        </member>
        <member name="F:GLUControl.OnEndDrag">
            <summary>
            Occurs when user ends dragging control
            </summary>
        </member>
        <member name="F:GLUControl.OnLeave">
            <summary>
            Triggered when cursor leaves the control
            </summary>
        </member>
        <member name="F:GLUControl.OnEnter">
            <summary>
            Triggered when cursor enters the control
            </summary>
        </member>
        <member name="F:GLUControl.OnWheelRotated">
            <summary>
            Triggered when mouse wheel is rotated or user makes pinch on touchescreen
            </summary>
        </member>
        <member name="F:GLUControl.OnDraw">
            <summary>
            Custom draw event. Put handler here, if you want custom-draw control
            </summary>
        </member>
        <member name="F:GLUControl.OnChangeResolution">
            <summary>
            Resolution change delegate
            </summary>
        </member>
        <member name="F:GLUControl.OnTerminalDestroy">
            <summary>
            Terminal destroy delegate 
            </summary>
        </member>
        <member name="F:GLUControl.OnSetMember">
            <summary>
            When one of members is set 
            </summary>
        </member>
        <member name="M:GLUControl.#ctor">
            <summary>
            Parameterles constructor. For deserialization purposes
            </summary>
        </member>
        <member name="M:GLUControl.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.Boolean)">
            <summary>
            Base constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="padding">Padding</param>
            <param name="visible">Control's visibility</param>    
        </member>
        <member name="M:GLUControl.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>    
            <param name="style">Control style</param>
        </member>
        <member name="M:GLUControl.GetChildrenOfType``1">
            <summary>
            Gets child of provided type. Recursive. Generic
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:GLUControl.GetChildrenOfType(System.Type)">
            <summary>
            Gets child of provided type. Recursive.Non-generic
            </summary>
            <param name="type">Type to search</param>
            <returns>Children list. If no children found, empty list will be returned</returns>
            <example>
            This example shows how to use GetChildrenOfType method
            <code>
            \code
            List&lt;GLUControl&gt; = GetChildrenOfType(typeof(GLUButton));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUControl.AddChild(GLUControl)">
            <summary>
            Adds child to child list. Also sets parent property and reorders
            </summary>
            <param name="child">Child to add</param>
            <returns>Added child</returns>
        </member>
        <member name="M:GLUControl.Assign(GLUObject)">
            <summary>
            Assigns values from provided object
            </summary>
            <param name="o">Source object</param>
        </member>
        <member name="M:GLUControl.UpdatePivot">
            <summary>
            Common update pivot method. Updates pivot
            </summary>
        </member>
        <member name="M:GLUControl.UpdateParentSize">
            <summary>
            Updates parentWidth and parentHeight fields
            </summary>
        </member>
        <member name="M:GLUControl.AddChild(GLUControl,System.Boolean)">
            <summary>
            Adds child to child list. Also sets parent property and reorders
            </summary>
            <param name="child">Child to add</param>
            <param name="internalChild">Internal flag</param>
            <returns>Added child</returns>
        </member>
        <member name="M:GLUControl.GenerateBorder(GLUMesh,UnityEngine.Rect,System.Single)">
            <summary>
            Generates square border around control 
            </summary>
            <param name="m"></param>
            <param name="rect"></param>
            <param name="borderWidth"></param>
        </member>
        <member name="M:GLUControl.GetChildByName(System.String,System.Boolean)">
            <summary>
            Returns child with provided name. Both Non-recursive an recursive
            </summary>
            <param name="name">Child name</param>
            <param name="recursive">If true, children are also searched for subchildren with provided name</param>
            <returns>Found child</returns>
        </member>
        <member name="M:GLUControl.GetChildByID(System.String,System.Boolean)">
            <summary>
            Returns child with provided id. Both Non-recursive an recursive
            </summary>
            <param name="id">Child id</param>
            <param name="recursive">If true, search iterates through children</param>
            <returns>Found child</returns>
        </member>
        <member name="M:GLUControl.GetObjectByID(System.String,System.Boolean)">
            <summary>
            Returns member holder child with provided id. Both Non-recursive an recursive
            </summary>
            <param name="recursive">If true, search iterates through children</param>
            <param name="id">Child id</param>
            <returns>Found child</returns>
        </member>
        <member name="M:GLUControl.GetHolderByID(System.String,System.Boolean)">
            <summary>
            Returns child member holder with provided id. Both Non-recursive an recursive
            </summary>
            <param name="id">Holder id</param>
            <param name="recursive">If true, search iterates through the children</param>
            <returns>Found holder</returns>
        </member>
        <member name="M:GLUControl.ProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Process control key. Internal use
            </summary>
            <param name="key">Key code</param>
        </member>
        <member name="M:GLUControl.ProcessChar(System.Char)">
            <summary>
            Process char. Internal use
            </summary>
            <param name="character">Character</param>
        </member>
        <member name="M:GLUControl.Drop(GLUControl,System.Boolean)">
            <summary>
            Internal drop. Use with caution
            </summary>
            <param name="source">Drag source</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.Focus(GLUControl,System.Boolean)">
            <summary>
            Internal focus. Use with caution
            </summary>
            <param name="sender">Control to focus</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.GetParentHintLabel">
            <summary>
            Internal. Returns parent hint label
            </summary>
            <returns>Parent hint label</returns>
        </member>
        <member name="F:GLUControl.dragMode">
            <summary>
            Internal flag. If true, control is dragged
            </summary>
        </member>
        <member name="M:GLUControl.UnFocus(GLUControl,GLUControl,System.Boolean)">
            <summary>
            Internal unfocus. Use with caution
            </summary>
            <param name="sender">Event source</param>
            <param name="focused">New focused control</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.Enter(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal cursor enter. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.Leave(GLUControl,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal cursor Leave. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="hovered">New hovered control</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.Click(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal input Click. Use with caution (When user presses mouse or touchscreen, than releases)
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.DoubleClick(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal input Double Click. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.InputMove(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Input Move. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall"></param>
        </member>
        <member name="M:GLUControl.InputDown(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal input down. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.InputReleased(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Input released. Use with caution
            </summary>
            <param name="mp">Local cursor coordinates</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.ResolutionChange(GLUTerminal)">
            <summary>
            Change resolution handler
            </summary>
            <param name="sender">Terminal, which changes resolution</param>
        </member>
        <member name="M:GLUControl.TerminalDestroyed(GLUTerminal)">
            <summary>
            Terminal destroyed handler
            </summary>
            <param name="sender">Terminal, which is destroyed</param>
        </member>
        <member name="M:GLUControl.InputPressed(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Input pressed. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.Drag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Drag. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Start drag. Use with caution
            </summary>
            <param name="mp">Local cursor position</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.EndDrag(GLUControl,System.Boolean)">
            <summary>
            Internal End drag. Use with caution
            </summary>
            <param name="target">Drop target</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUControl.WheelRotated(UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Internal call
            </summary>
            <param name="mp">Input position</param>
            <param name="wheelDelta">Wheel rotation delta</param>
            <param name="internalCall">If true, call is child-to-parent</param>
        </member>
        <member name="M:GLUControl.DrawChildren(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws control children
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUControl.DrawChildren(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws control children which intersects provided coordinates area
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="minX">Local visible area minX</param>
            <param name="minY">Local visible area minY</param>
            <param name="maxX">Local visible area maxX</param>
            <param name="maxY">Local visible area maxY</param>
        </member>
        <member name="M:GLUControl.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw componen't default presentation. Non-uniform scaled
            </summary>
            <param name="offset">Offset. Local</param>
            <param name="scale">Scale</param>
            <param name="minX">Local visible area minX</param>
            <param name="minY">Local visible area minY</param>
            <param name="maxX">Local visible area maxX</param>
            <param name="maxY">Local visible area maxY</param>
        </member>
        <member name="M:GLUControl.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draw componen't default presentation. Non-uniform scaled
            </summary>
            <param name="offset">Offset. Local</param>
            <param name="scale">Scale</param>
        </member>
        <member name="F:GLUControl.startDragDelta">
            <summary>
            Internal. Used in editor 
            </summary>
        </member>
        <member name="F:GLUControl.tempColor">
            <summary>
            Internal variable for storing global color during draw
            </summary>
        </member>
        <member name="M:GLUControl.CheckPopped(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Internal. Used in Refresh() to determine if control is popped up. If true, provided offset and scale are stored in special variables
            </summary>
            <param name="offset">Control offset</param>
            <param name="scale">Control scale</param>
            <returns>True, if control is popped up</returns>
        </member>
        <member name="M:GLUControl.Draw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Same thing as Draw, excepts only non-uniform parameter scale. Strechs control non-uniformely
            </summary>
            <param name="offset"></param>
            <param name="scale"></param>
        </member>
        <member name="M:GLUControl.Draw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws control with provided offset and scale. Stretches control non-uniformely
            </summary>
            <param name="offset">Provided offset</param>
            <param name="scale">Provided scale</param>
            <param name="maxX">Viewport right border</param>
            <param name="maxY">Viewport bottom border</param>
            <param name="minX">Viewport left border</param>
            <param name="minY">Viewport top border</param>
        </member>
        <member name="M:GLUControl.DrawPopped">
            <summary>
            Draw control as popped up 
            </summary>
        </member>
        <member name="M:GLUControl.ChildByCoord(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns child by provided coordinates
            </summary>
            <param name="coord">Point to check</param>
            <param name="enabledOnly">If true, ignores disabled children</param>
            <returns>Child, containing provided coordinates</returns>
        </member>
        <member name="M:GLUControl.SetFocus">
            <summary>
            Sets focus of the control
            </summary>
        </member>
        <member name="M:GLUControl.ApplyStyle">
            <summary>
            Common ApplyStyle override. Sets control contents according to control style 
            </summary>
        </member>
        <member name="M:GLUControl.RefreshControl">
            <summary>
            Refresh control method. Used to set up control and generate visuals
            </summary>
        </member>
        <member name="M:GLUControl.MoveContent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal. Moves and updates content by specified dx and dy
            </summary>
            <param name="dx">Horizontal position delta</param>
            <param name="dy">Vertical position delta</param>
            <param name="w">Parent width</param>
            <param name="h">Parent height</param>
        </member>
        <member name="M:GLUControl.UpdateContent">
            <summary>
            Updates content 
            </summary>
        </member>
        <member name="M:GLUControl.CalculatePaddedContentBounds(GLUConstraints,GLUConstraints,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates absolute object bounds in parent space
            </summary>
            <param name="widthConstraints">Width constraints</param>
            <param name="heightConstraints">Height constraints</param>
            <param name="pw">Specified parent width. If omitted, current parent width will be used</param>
            <param name="ph">Specified parent height. If omitted, current parent height will be used</param>
            <returns>Object bounds</returns>
        </member>
        <member name="M:GLUControl.RefreshGraphicObject">
            <summary>
            Common GLU method for meshes generation 
            </summary>
        </member>
        <member name="M:GLUControl.GetEnabled">
            <summary>
            Return this if this.enabled == true and closest enabled parent otherwize
            </summary>
            <returns>This if this.enabled == true and closest enabled parent otherwize</returns>
        </member>
        <member name="M:GLUControl.HasChild(GLUControl)">
            <summary>
            Checks, if control has provided child. Recursive
            </summary>
            <param name="child">Child to check</param>
            <returns>True, if child is among inheritors</returns>
        </member>
        <member name="M:GLUControl.Show">
            <summary>
            Makes control visible
            </summary>
        </member>
        <member name="F:GLUControl.popupContainer">
            <summary>
            If control has popup menu, and it is visible, popupContainer contains menu container (usually form or scrollview)
            </summary>
        </member>
        <member name="M:GLUControl.Popup">
            <summary>
            Pops up control
            </summary>
        </member>
        <member name="M:GLUControl.Hide">
            <summary>
            Hides control
            </summary>
        </member>
        <member name="M:GLUControl.BringToFront">
            <summary>
            Bring control to the top amongst its parent's children 
            </summary>
        </member>
        <member name="M:GLUControl.ToggleVisualUpdates(System.Boolean)">
            <summary>
            Toggles visual updates
            </summary>
            <param name="value">Visual updates</param>
        </member>
        <member name="M:GLUControl.PrepareDeserialization">
            <summary>
            This method is called internally before deserialization. Use with caution
            </summary>
        </member>
        <member name="M:GLUControl.CompleteDeserialization">
            <summary>
            This method is called internally after deserialization. Use with caution
            </summary>
        </member>
        <member name="M:GLUControl.Initialize">
            <summary>
            Initializes control after deserialization
            </summary>
        </member>
        <member name="M:GLUControl.Setup">
            <summary>
            Used to set some object fields after deserializatioon
            </summary>
        </member>
        <member name="M:GLUControl.PrepareSerialization">
            <summary>
            This method is called internally before serialization
            </summary>
        </member>
        <member name="M:GLUControl.ToString">
            <summary>
            ToString conversion
            </summary>
            <returns>Name of control</returns>
        </member>
        <member name="M:GLUControl.GetNonInternal">
            <summary>
            Returns non-internal children
            </summary>
            <returns>Non-internal children</returns>
        </member>
        <member name="M:GLUControl.ClearChildren">
            <summary>
            Clears children list and destroy its content
            </summary>
        </member>
        <member name="M:GLUControl.Destroy">
            <summary>
            Destroys control
            </summary>
        </member>
        <member name="M:GLUControl.Reorder">
            <summary>
            Sorts children in tab order 
            </summary>
        </member>
        <member name="M:GLUControl.CompareByTabOrder(GLUControl,GLUControl)">
            <summary>
            Compare two controls using their tab order values
            </summary>
            <param name="X">First control</param>
            <param name="Y">Second control</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUControl.FocusNextChild(GLUControl)">
            <summary>
            Travels focus to next child
            </summary>
            <param name="focused">Currently focused child</param>
        </member>
        <member name="F:GLUControl.focusedChild">
            <summary>
            Last focused child
            </summary>
        </member>
        <member name="M:GLUControl.ChildFocused(GLUControl)">
            <summary>
            Called, when child gets focus
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:GLUControl.FocusNext">
            <summary>
            Focus to next control in parent's child list 
            </summary>
        </member>
        <member name="M:GLUControl.RemoveChild(GLUControl)">
            <summary>
            Removes child form child list
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:GLUControl.Reset">
            <summary>
            Resets control state to initial
            </summary>
        </member>
        <member name="M:GLUControl.ResetState">
            <summary>
            Resets control state 
            </summary>
        </member>
        <member name="M:GLUControl.GetAllChildren(System.Boolean)">
            <summary>
            Returns list of all contained controls. Recursive
            </summary>
            <param name="includeInternal">If true, internal controls are included</param>
            <returns>List of controls</returns>
        </member>
        <member name="M:GLUControl.SerializeToString">
            <summary>
            String serialization method. Not implemented
            </summary>
            <returns>Nothing</returns>
        </member>
        <member name="M:GLUControl.PushChildSizes">
            <summary>
            Memorize child sizes
            </summary>
        </member>
        <member name="M:GLUControl.PopChildSizes">
            <summary>
            Recall child sizes
            </summary>
        </member>
        <member name="M:GLUControl.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            Fills style content 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">Style sheet container</param>
        </member>
        <member name="M:GLUControl.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Do\cument container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUControl.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="P:GLUControl.hintStyle">
            <summary>
            Hint text style 
            </summary>
        </member>
        <member name="P:GLUControl.name">
            <summary>
            Name of control 
            </summary>
        </member>
        <member name="P:GLUControl.children">
            <summary>
            List of children controls of control
            </summary>
        </member>
        <member name="P:GLUControl.controlState">
            <summary>
            Control state
            </summary>
        </member>
        <member name="P:GLUControl.hideTransitionInProgress">
            <summary>
            If true, control is hiding and drawing its hide animation
            </summary>
        </member>
        <member name="P:GLUControl.scrollChild">
            <summary>
            If set to true, control is a child of scrollView
            </summary>
        </member>
        <member name="P:GLUControl.hintLabel">
            <summary>
            Label for displaying hint
            </summary>
        </member>
        <member name="P:GLUControl.hint">
            <summary>
            Hint text
            </summary>
        </member>
        <member name="P:GLUControl.popup">
            <summary>
            Popup menu
            </summary>
        </member>
        <member name="P:GLUControl.stayOnTop">
            <summary>
            If set to true, form gets focus first of all, except modal ones
            </summary>
        </member>
        <member name="P:GLUControl.inputTransparent">
            <summary>
            If set to true, control is transparent for input events. 
            For example, if user clicks on this control and there is no children in that place with inputTransparent == false, 
            terminal checks other controls for hits.
            </summary>
        </member>
        <member name="P:GLUControl.poppedUp">
            <summary>
            If true, control is in popped up state
            </summary>
        </member>
        <member name="P:GLUControl.tabOrder">
            <summary>
            Tab order
            </summary>
        </member>
        <member name="P:GLUControl.selected">
            <summary>
            Used in editor. If true, control is selected 
            </summary>
        </member>
        <member name="T:IGLUSerializable">
            <summary>
            Common serializable object interface
            </summary>
        </member>
        <member name="M:IGLUSerializable.PrepareSerialization">
            <summary>
            Performs needed actions before serialization. Called by GLUSerializer
            </summary>
        </member>
        <member name="M:IGLUSerializable.PrepareDeserialization">
            <summary>
            Performs needed actions before deserialization. Called by GLUDeserializer
            </summary>
        </member>
        <member name="M:IGLUSerializable.CompleteDeserialization">
            <summary>
            Performs needed actions after deserialization. Called by GLUDeserializer
            </summary>
        </member>
        <member name="M:IGLUSerializable.SerializeToString">
            <summary>
            Serilizes provided object to string
            </summary>
            <returns>String, containing text representation of provided object</returns>
        </member>
        <member name="M:IGLUSerializable.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes provided object to XmlNode
            </summary>
            <param name="doc">Parent Xml document</param>
            <param name="nodeName">Name of newly created node</param>
            <returns>Xml node filled with object's content</returns>
        </member>
        <member name="M:IGLUSerializable.Parse(System.Xml.XmlNode)">
            <summary>
            Parses provided Xml node content, filling object's fields and properties
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="T:IGLUStyleFactory">
            <summary>
            Style factory interface. When object implements it, that means, that it can produce new custom styles
            </summary>
        </member>
        <member name="M:IGLUStyleFactory.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from object, creating new one, if object content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="P:IGLUStyleFactory.style">
            <summary>
            Current object style 
            </summary>
        </member>
        <member name="M:GLULayeredControl.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLULayeredControl.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.Boolean,GLUInternalGraphic[])">
            <summary>
            Advanced layered control constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="layers">Array of graphic primitives (layers)</param>
            <param name="padding">Control's content padding</param>
            <param name="visible">Control's visibility flag</param>
        </member>
        <member name="M:GLULayeredControl.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle,GLURotation)">
            <summary>
            Layered control constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility flag</param>
            <param name="rotation">UV rotation of control textures</param>
            <param name="style">Control style</param>
        </member>
        <member name="M:GLULayeredControl.GetLayerByName(System.String)">
            <summary>
            Returns layer by its name
            </summary>
            <param name="name">Name to look up</param>
            <returns>Layer with provided name, if found one. Otherwize, null is returned</returns>
        </member>
        <member name="M:GLULayeredControl.DrawLayers(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Draws animation layers. Internal use
            </summary>
            <param name="layersDrawOffset">Draw offset</param>
            <param name="layersDrawRotation">Draw rotation</param>
            <param name="layersDrawScale">Scale</param>
        </member>
        <member name="M:GLULayeredControl.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws control with provided offset and scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLULayeredControl.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws control with provided offset, scale and inside provided bounds
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="maxX">Viewport right border</param>
            <param name="maxY">Viewport bottom border</param>
            <param name="minX">Viewport left border</param>
            <param name="minY">Viewport top border</param>
        </member>
        <member name="M:GLULayeredControl.Assign(GLUObject)">
            <summary>
            Assigns values from provided object
            </summary>
            <param name="o">Source object</param>
        </member>
        <member name="M:GLULayeredControl.AddLayer(GLUInternalGraphic)">
            <summary>
            Adds a layer to layers list
            </summary>
            <param name="ig">Layer to add</param>
        </member>
        <member name="M:GLULayeredControl.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLULayeredControl.ChangeControlState(System.Int32)">
            <summary>
            Internal use. Used to change control's state.
            </summary>
            <param name="value">New state</param>
        </member>
        <member name="M:GLULayeredControl.StartAnimations(System.Int32,System.Int32)">
            <summary>
            Runs through layers and perform StartAnimation on each one
            </summary>
            <param name="mask">Event mask</param>
            <param name="state">Event state</param>
        </member>
        <member name="M:GLULayeredControl.UpdateLayers(System.Int32)">
            <summary>
            Internal use. Update layers with new state. Usually that means selecting apropriate layer animation and start it
            </summary>
            <param name="state">New state</param>
        </member>
        <member name="M:GLULayeredControl.EnableLayers(System.Boolean,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Enables layers from provided list
            </summary>
            <param name="show">If true, layes in provided list became visible</param>
            <param name="disableRest">If true, rest of layers (not in enable list) will be enabled, or ignored otherwize</param>
            <param name="hideRest">If true, rest of layers (not in enable list) becomes hidden, or ignored otherwize</param>
            <param name="layersToEnable">Provided list of layers to enable</param>
        </member>
        <member name="M:GLULayeredControl.DisableLayers(System.Boolean,System.Boolean,System.Boolean,System.String[])">
            <summary>
            Disables layers from provided list
            </summary>
            <param name="hide">If true, layes in provided list became invisible</param>
            <param name="enableRest">If true, rest of layers (not in disable list) will be enabled, or ignored otherwize</param>
            <param name="showRest">If true, rest of layers (not in enable list) becomes visible, or ignored otherwize</param>
            <param name="layersToDisable">Provided list of layers to disable</param>
        </member>
        <member name="M:GLULayeredControl.UpdateContent">
            <summary>
            Internal. Updates content
            </summary>
        </member>
        <member name="M:GLULayeredControl.UpdateLayers">
            <summary>
            Updates all layers of control, when control size or padding are changed
            </summary>
        </member>
        <member name="M:GLULayeredControl.UpdatePivot">
            <summary>
            Internal use. Updates control's and its content's pivots.
            </summary>
        </member>
        <member name="M:GLULayeredControl.RefreshLayeredControl">
            <summary>
            Base method for content updating
            </summary>
        </member>
        <member name="M:GLULayeredControl.RefreshControl">
            <summary>
            Common method for meshes generation
            </summary>
        </member>
        <member name="M:GLULayeredControl.PrepareSerialization">
            <summary>
            Prepares serialization
            </summary>
        </member>
        <member name="M:GLULayeredControl.Destroy">
            <summary>
            Destroys layered control
            </summary>
        </member>
        <member name="M:GLULayeredControl.SerializeToString">
            <summary>
            Doesnt implemented in this class. You have to override it in derived classes.
            </summary>
            <returns>Throws an exception</returns>
        </member>
        <member name="M:GLULayeredControl.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLULayeredControl.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLULayeredControl.MoveContent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Internal. Moves and updates content by specified dx and dy
            </summary>
            <param name="dx">Horizontal position delta</param>
            <param name="dy">Vertical position delta</param>
            <param name="w">Parent width</param>
            <param name="h">Parent height</param>
        </member>
        <member name="M:GLULayeredControl.CalculateNonPaddedContentBounds(GLUConstraints,GLUConstraints,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates internal bounds. Used in auto size mechanizm
            </summary>
        </member>
        <member name="M:GLULayeredControl.Initialize">
            <summary>
            Used for the first initialization of the object
            </summary>
        </member>
        <member name="M:GLULayeredControl.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal use
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="P:GLULayeredControl.rotation">
            <summary>
            Layers UV rotation
            </summary>
        </member>
        <member name="P:GLULayeredControl.layers">
            <summary>
            Graphic layers 
            </summary>
        </member>
        <member name="T:IGLUTextControl">
            <summary>
            Common text control interface
            </summary>
        </member>
        <member name="P:IGLUTextControl.text">
            <summary>
            Text property
            </summary>
        </member>
        <member name="P:IGLUTextControl.readOnly">
            <summary>
            Read only property
            </summary>
        </member>
        <member name="F:GLULayeredTextControl._text">
            <summary>
            Control's text. Internal use
            </summary>
        </member>
        <member name="F:GLULayeredTextControl._readOnly">
            <summary>
            Internal read only flag
            </summary>
        </member>
        <member name="F:GLULayeredTextControl._textStyle">
            <summary>
            Text style. Internal use 
            </summary>
        </member>
        <member name="F:GLULayeredTextControl._textAlignment">
            <summary>
            Horizontal text alignment
            </summary>
        </member>
        <member name="F:GLULayeredTextControl._textVerticalAlignment">
            <summary>
            Vertical text alignment
            </summary>
        </member>
        <member name="M:GLULayeredTextControl.SetAutoSize(System.Boolean)">
            <summary>
            Sets autosize
            </summary>
            <param name="value">New autosize value</param>
        </member>
        <member name="M:GLULayeredTextControl.SetText(System.String)">
            <summary>
            Sets control text without triggering any action
            </summary>
            <param name="value">New text value</param>
        </member>
        <member name="M:GLULayeredTextControl.SetTextStyle(GLUTextStyle)">
            <summary>
            Sets control text style without triggering any action
            </summary>
            <param name="value">New text style value</param>
        </member>
        <member name="M:GLULayeredTextControl.SetWidthConstraints(GLUConstraints)">
            <summary>
            Sets up new width constraints and performs all nesessary updates with it
            </summary>
            <param name="value">New width constraints</param>
        </member>
        <member name="M:GLULayeredTextControl.SetHeightConstraints(GLUConstraints)">
            <summary>
            Internal use. Sets height constraints
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLULayeredTextControl.SetTextAlignment(GLUHorizontalAlignment)">
            <summary>
            Sets control text horizontal alignment without triggering any action
            </summary>
            <param name="value">New text alignment value</param>
        </member>
        <member name="M:GLULayeredTextControl.SetTextVerticalAlignment(GLUVerticalAlignment)">
            <summary>
            Sets control text vertical alignment without triggering any action
            </summary>
            <param name="value">New text alignment value</param>
        </member>
        <member name="M:GLULayeredTextControl.UpdateTextLayer">
            <summary>
            Relinks layer with "text" name with textLayer property
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:GLULayeredTextControl.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLULayeredTextControl.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.Boolean,System.String,GLUInternalGraphic[])">
            <summary>
            Advanced layered text control constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="text">Control text</param>
            <param name="layers">Array of graphic primitives</param>
            <param name="padding">Content padding</param>
            <param name="visible">Control visibility flag</param>
        </member>
        <member name="M:GLULayeredTextControl.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,GLUStyle,GLURotation)">
            <summary>
            Layered text control constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="text">Control text</param>
            <param name="rotation">Control textures UV rotation</param>
            <param name="style">Control style</param>
            <param name="visible">Control visibility flag</param>
        </member>
        <member name="M:GLULayeredTextControl.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLULayeredTextControl.RefreshLayeredTextControl">
            <summary>
            Updates layered text control content
            </summary>
        </member>
        <member name="M:GLULayeredTextControl.RefreshLayeredControl">
            <summary>
            Common method for meshes generation
            </summary>
        </member>
        <member name="M:GLULayeredTextControl.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLULayeredTextControl.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLULayeredTextControl.SetValues(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.String)">
            <summary>
            Sets control values without calling GenerateMeshes and without triggering any action
            </summary>
            <param name="parent">Control's parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="padding">Content padding</param>
            <param name="text">Control text</param>
        </member>
        <member name="P:GLULayeredTextControl.text">
            <summary>
            Text of the control. (Control must contains text layer (GLUInternalText) with name "text" to display text)
            </summary>
        </member>
        <member name="P:GLULayeredTextControl.readOnly">
            <summary>
            If set to true, user cannot change text of control
            </summary>
        </member>
        <member name="P:GLULayeredTextControl.textStyle">
            <summary>
            Text style of control's text. (Control must contains text layer (GLUInternalText) with name "text" to display text)
            </summary>
        </member>
        <member name="P:GLULayeredTextControl.textAlignment">
            <summary>
            Horizontal alignment of control text. (Control must contains text layer (GLUInternalText) with name "text" to display text)
            </summary>
        </member>
        <member name="P:GLULayeredTextControl.textVerticalAlignment">
            <summary>
            Vertical alignment of control text. (Control must contains text layer (GLUInternalText) with name "text" to display text)
            </summary>
        </member>
        <member name="P:GLULayeredTextControl.textLayer">
            <summary>
            Text layer. Contains layer with "text" name if exists one, and null otherwize   
            </summary>
        </member>
        <member name="T:IGLUPopupContainer">
            <summary>
            Common class for all popup containers (forms or scroll views)
            </summary>
        </member>
        <member name="P:IGLUPopupContainer.popupControls">
            <summary>
            List of popup controls (combo box list, popup menu). Popup controls are checked first of all, and would be drewn at last
            </summary>
        </member>
        <member name="F:GLUForm.fileExtension">
            <summary>
            Default form XML extension prefix. Example: Assets/Resources/GLU/Forms/NewForm.[fileExtension].xml
            </summary>
        </member>
        <member name="F:GLUForm.popupMenus">
            <summary>
            List of popup menu children. 
            </summary>
        </member>
        <member name="F:GLUForm.titleRect">
            <summary>
            Form's title rect 
            </summary>
        </member>
        <member name="F:GLUForm.internalCloseButton">
            <summary>
            Form's close button
            </summary>
        </member>
        <member name="M:GLUForm.SetScale(UnityEngine.Vector3)">
            <summary>
            Internal. Used to set internal scale
            </summary>
            <param name="value">New scale value</param>
        </member>
        <member name="F:GLUForm.needToCreateSnapshot">
            <summary>
            If set to true, form's thumnail will be created
            </summary>
        </member>
        <member name="F:GLUForm._snapshot">
            <summary>
            Texture, containing rendered form image
            </summary>
        </member>
        <member name="F:GLUForm.OnLoad">
            <summary>
            Load delegate. Called when control is loaded
            </summary>
        </member>
        <member name="F:GLUForm.OnClose">
            <summary>
            Close delegate. Called when control closes 
            </summary>
        </member>
        <member name="F:GLUForm.OnUpdate">
            <summary>
            Control update delegate.
            </summary>
        </member>
        <member name="F:GLUForm.OnSnapshotChanged">
            <summary>
            OnThumnail changed deledgate. Called after thumbnail generation
            </summary>
        </member>
        <member name="M:GLUForm.#ctor">
            <summary>
            Parameterless constructor. Used for deserialization
            </summary>
        </member>
        <member name="M:GLUForm.#ctor(System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,System.Boolean,GLUStyle)">
            <summary>
            Simple constructor
            </summary>
            <param name="name">Form name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Form width</param>
            <param name="height">Form height</param>
            <param name="title">Form title</param>
            <param name="drawCloseButton">If true, default close button will be displayed</param>
            <param name="visible">Visibility flag</param>
            <param name="style">Form style</param>
        </member>
        <member name="M:GLUForm.CreateCloseButton(GLUFormStyle)">
            <summary>
            Internal. Creates built-in close button
            </summary>
        </member>
        <member name="M:GLUForm.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUForm.ShowModal(System.Boolean)">
            <summary>
            Shows form as modal
            </summary>
        </member>
        <member name="M:GLUForm.Hide">
            <summary>
            Hides form
            </summary>
        </member>
        <member name="M:GLUForm.Close">
            <summary>
            Closes form, remove it from forms, modal forms and draw order
            </summary>
        </member>
        <member name="M:GLUForm.UpdateInternals">
            <summary>
            Standard update bounds method
            </summary>
        </member>
        <member name="M:GLUForm.DrawInternalControls(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Internal. Used to draw internal controls (such as close button)
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUForm.DoFormDrag">
            <summary>
            Used to change form position during Drag event
            </summary>
        </member>
        <member name="M:GLUForm.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Standard draw method. Override it to create custom draw form
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="F:GLUForm.dragFormMode">
            <summary>
            Internal form drag flag
            </summary>
        </member>
        <member name="F:GLUForm.startDragCursorPosition">
            <summary>
            Internal start drag cursor position
            </summary>
        </member>
        <member name="F:GLUForm.startDragControlPosition">
            <summary>
            Internal start drag control position
            </summary>
        </member>
        <member name="M:GLUForm.DoStartDrag(UnityEngine.Vector3)">
            <summary>
            Internal. Makes all preparations for dragging 
            </summary>
            <param name="mp">Local cursor position</param>
        </member>
        <member name="M:GLUForm.InputPressed(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal input pressed handler
            </summary>
            <param name="mp">Local cursor position</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUForm.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal start drag handler
            </summary>
            <param name="mp">Local cursor position</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUForm.Drag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal drag handler
            </summary>
            <param name="mp">Local cursor position</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUForm.EndDrag(GLUControl,System.Boolean)">
            <summary>
            Internal end drag handler
            </summary>
            <param name="target">Drop target</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUForm.Contains(UnityEngine.Vector3)">
            <summary>
            Checks, if form contains provided point
            </summary>
            <param name="p">Point coordinates</param>
            <returns>True, if contains</returns>
        </member>
        <member name="M:GLUForm.BringToFront">
            <summary>
            Brings form to front
            </summary>
        </member>
        <member name="M:GLUForm.SetFocus">
            <summary>
            Sets input focus for current form
            </summary>
        </member>
        <member name="M:GLUForm.ControlByName(System.String,System.Boolean)">
            <summary>
            Returns form's child control with provided name
            </summary>
            <param name="name">Name</param>
            <param name="recursive">If true, search iterates through children</param>
            <returns>Control</returns>
        </member>
        <member name="M:GLUForm.SetPosition(GLUNumber,GLUNumber)">
            <summary>
            Sets form position
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
        </member>
        <member name="M:GLUForm.ChildByCoord(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns form's child control containing provided coordinates. Recursive
            </summary>
            <param name="coord">Coordinates</param>
            <returns>Control</returns>
            <param name="enabledOnly">Enabled controls filter</param>
        </member>
        <member name="M:GLUForm.ArrangeInternalControls">
            <summary>
            Rearranges internal controls (close button, mostly). Usually called, when form chanes its layout  
            </summary>
        </member>
        <member name="M:GLUForm.RefreshLayeredTextControl">
            <summary>
            Generates form's meshes
            </summary>
        </member>
        <member name="M:GLUForm.CloseButtonPressed(GLUControl)">
            <summary>
            Close button pressed handler
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:GLUForm.Initialize">
            <summary>
            Used for the first initialization of the object
            </summary>
        </member>
        <member name="M:GLUForm.PrepareSerialization">
            <summary>
            Called before serialization. Prepares serailization 
            </summary>
        </member>
        <member name="M:GLUForm.DrawSnapshotContent">
            <summary>
            Used to draw form's content to snapshot
            </summary>
        </member>
        <member name="M:GLUForm.SaveSnapshot">
            <summary>
            Used to save shapshot to snapshot URL. Usually Application.dataPath + "/GLU/Forms/Thumbs/thumb_" + &lt;form name&gt;
            </summary>
        </member>
        <member name="M:GLUForm.CreateSnapshot(System.Int32,System.Int32)">
            <summary>
            Create thumbnail method
            </summary>
        </member>
        <member name="M:GLUForm.LoadFormFromResources(System.String)">
            <summary>
            Loads form from provided Resource XML
            </summary>
            <param name="formName"></param>
            <returns></returns>
        </member>
        <member name="M:GLUForm.CreateControls">
            <summary>
            Creates controls at runtime. 
            </summary>
        </member>
        <member name="M:GLUForm.ToggleVisualUpdates(System.Boolean)">
            <summary>
            Toggles updates flag. If true, updates are on.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:GLUForm.Destroy">
            <summary>
            Destroys form and all its content. Internal. Use GLUObject.Destroy instead.
            </summary>
        </member>
        <member name="M:GLUForm.CreateForm(System.String,System.Boolean)">
            <summary>
            Creates an instance of object's class and load its values from provided file
            </summary>
            <param name="filename">URL to form's Xml file</param>
            <param name="createOnly">If true, form will only be created, without content loading</param>
            <returns>New form. Form type is taken from Xml file</returns>
        </member>
        <member name="M:GLUForm.NeedRepaint">
            <summary>
            Used to say to parent, that child control needs to be repainted. Generally used, when parent is GLUScrollView to cut out unnesessary children draws, when idle.
            </summary>
        </member>
        <member name="M:GLUForm.LoadContentFromResource(System.String)">
            <summary>
            Loads form content from XML
            </summary>
            <param name="filename">XML to load from</param>
        </member>
        <member name="M:GLUForm.LoadContent(System.Xml.XmlNode)">
            <summary>
            Loads form content from Xml node
            </summary>
            <param name="node">XML node to load from</param>
        </member>
        <member name="M:GLUForm.LoadContent(System.String)">
            <summary>
            Loads form content from XML
            </summary>
            <param name="filename">XML to load from</param>
        </member>
        <member name="M:GLUForm.LoadXML">
            <summary>
            This method is used to load form's content from XML. XML URL is defined in method body in inheritor.
            </summary>
        </member>
        <member name="M:GLUForm.LoadXML(System.String,System.Boolean)">
            <summary>
            Loads form's content from provided XML.
            </summary>
        </member>
        <member name="M:GLUForm.GetAllControls(System.Boolean)">
            <summary>
            Returns list of all controls. Recursive
            </summary>
            <param name="includeInternal">If true, internal controls are included</param>
            <returns>List of controls</returns>
        </member>
        <member name="M:GLUForm.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUForm.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="P:GLUForm.popupControls">
            <summary>
            List of active popup controls (combo box list, popup menu). Popup controls are checked first of all
            </summary>
        </member>
        <member name="P:GLUForm.titleHeight">
            <summary>
            Form's title height. Used to build title rect
            </summary>
        </member>
        <member name="P:GLUForm.closeButtonXOffset">
            <summary>
            Horizontal offset of built-in close button
            </summary>
        </member>
        <member name="P:GLUForm.closeButtonYOffset">
            <summary>
            Vertical offset of built-in close button
            </summary>
        </member>
        <member name="P:GLUForm.loading">
            <summary>
            True, If form is not loaded yet
            </summary>
        </member>
        <member name="P:GLUForm.hasTitleBar">
            <summary>
            If set to true, form title bar is visible 
            </summary>
        </member>
        <member name="P:GLUForm.showCloseButton">
            <summary>
            If set to true, form title bar is visible 
            </summary>
        </member>
        <member name="P:GLUForm.clientHeight">
            <summary>
            Form client area height
            </summary>
        </member>
        <member name="P:GLUForm.scale">
            <summary>
            Form's draw scale
            </summary>
        </member>
        <member name="P:GLUForm.snapshotUrl">
            <summary>
            Form thumbnail URL
            </summary>
        </member>
        <member name="P:GLUForm.snapshot">
            <summary>
            Form snapshot texture
            </summary>
        </member>
        <member name="M:GLUDebugLogForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUDebugLogForm.ResolutionChanged(GLUBaseTerminal)">
            <summary>
            Resolution change delegate
            </summary>
            <param name="sender">Terminal sender</param>
        </member>
        <member name="F:GLUDebugLogForm.logListBox">
            <summary>
            Log entries list
            </summary>
        </member>
        <member name="F:GLUDebugLogForm.logEntryDescriptionEdit">
            <summary>
            Entry description edit
            </summary>
        </member>
        <member name="F:GLUDebugLogForm.clearButton">
            <summary>
            Clear log button
            </summary>
        </member>
        <member name="M:GLUDebugLogForm.CreateControls">
            <summary>
            Creates form's controls
            </summary>
        </member>
        <member name="P:GLUDebugLogForm.instance">
            <summary>
            Form instance
            </summary>
        </member>
        <member name="T:IGLUScrollView">
            <summary>
            Common scrollview interface
            </summary>
        </member>
        <member name="M:IGLUScrollView.AddScrollChild(GLUControl,System.Boolean)">
            <summary>
            Adds scroll child to scrollview
            </summary>
            <param name="child">Child to add</param>
            <param name="internalChild">Internal child flag. If true, child will not be selected in editor</param>
            <returns>Added scrollchild</returns>
        </member>
        <member name="M:IGLUScrollView.RemoveScrollChild(GLUControl)">
            <summary>
            Remove scroll child from child list
            </summary>
            <param name="child">Child to remove</param>
        </member>
        <member name="M:IGLUScrollView.HasScrollChild(GLUControl)">
            <summary>
            Recursively check this control for parenting of the provided child
            </summary>
            <param name="child">Child to check</param>
            <returns>True, if provided child is among scroll children of this control</returns>
        </member>
        <member name="P:IGLUScrollView.viewportScale">
            <summary>
            Uniform viewport scale 
            </summary>
        </member>
        <member name="P:IGLUScrollView.viewportOffset">
            <summary>
            Viewport draw offset
            </summary>
        </member>
        <member name="P:IGLUScrollView.viewport">
            <summary>
            Viewport rectangle
            </summary>
        </member>
        <member name="P:IGLUScrollView.scrollChildren">
            <summary>
            Scroll children list
            </summary>
        </member>
        <member name="P:IGLUScrollView.scrollAreaBounds">
            <summary>
            Scroll area content bounds
            </summary>
        </member>
        <member name="T:GLUTime">
            <summary>
            Time helper
            </summary>
        </member>
        <member name="P:GLUTime.time">
            <summary>
            Time
            </summary>
        </member>
        <member name="T:GLUDiagnostics">
            <summary>
            System diagnostics. Includes fps , etc..
            </summary>
        </member>
        <member name="F:GLUDiagnostics.fps">
            <summary>
            Current fps
            </summary>
        </member>
        <member name="T:GLUTerminalFocusEvent">
            <summary>
            Common terminal focus event
            </summary>
            <param name="sender">Calling terminal</param>
            <param name="terminal">Additional terminal</param>
        </member>
        <member name="T:GLUTerminalEvent">
            <summary>
            Common terminal event
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:GLUTerminalDrawEvent">
            <summary>
            Common terminal draw event
            </summary>
            <param name="sender">Event source</param>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="T:GLUBaseTerminal">
            <summary>
            Base class for all terminals in GLUe
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.terminals">
            <summary>
            List of all terminals in system
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.processingOrder">
            <summary>
            Order of input processing
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.GetTerminal(System.String)">
            <summary>
            Returns terminal with provided name
            </summary>
            <param name="name">provided name</param>
            <returns>Terminal with provided name or null if no found</returns>
        </member>
        <member name="M:GLUBaseTerminal.GetTerminal(UnityEngine.Transform)">
            <summary>
            Returns terminal with provided transform
            </summary>
            <param name="transform">Interactive terminal transform</param>
            <returns>Terminal with provided transform or null if no found</returns>
        </member>
        <member name="M:GLUBaseTerminal.GetTerminal(UnityEngine.MonoBehaviour)">
            <summary>
            Returns terminal with provided monoBehaviour (Interactive terminal)
            </summary>
            <param name="monoBehaviour">provided monoBehaviour</param>
            <returns>Terminal with provided monoBehaviour or null if no found</returns>
        </member>
        <member name="M:GLUBaseTerminal.Activate(System.String)">
            <summary>
            Activates terminal by its name
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:GLUBaseTerminal.Activate(UnityEngine.Transform)">
            <summary>
            Activates terminal by its transform
            </summary>
            <param name="transform">Interactive terminal transform</param>
        </member>
        <member name="M:GLUBaseTerminal.Activate(UnityEngine.MonoBehaviour)">
            <summary>
            Activates terminal by its interactive terminal
            </summary>
            <param name="monoBehaviour">Interactive terminal</param>
        </member>
        <member name="F:GLUBaseTerminal.enableEvents">
            <summary>
            If true, events are not triggered
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.focusDelta">
            <summary>
            Focus delta. Used to determine, if control is dragged, or just clicked
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.OnShowControl">
            <summary>
            Static delegate. Called when any form becomes visible 
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.OnHideControl">
            <summary>
            Static delegate. Called when any form becomes invisible 
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.OnUpdate">
            <summary>
            Static delegate. For custom updates
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.OnInputPress">
            <summary>
            Static delegate. For custom updates
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.OnInputRelease">
            <summary>
            Static delegate. For custom updates
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.OnInputMove">
            <summary>
            Static delegate. For custom updates
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.OnDrawCursor">
            <summary>
            Occures after drawing the cursor
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.OnRender">
            <summary>
            Occures before default draw
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.name">
            <summary>
            Terminal's name
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.needRepaint">
            <summary>
            If true, terminal will be repainted. After repaint, flag is set to false
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.diagnostics">
            <summary>
            System diagnostics
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.dragCursorMesh">
            <summary>
            Default drag cursor mesh
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.normalCursorMesh">
            <summary>
            Default normal cursor mesh
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.input">
            <summary>
            Terminal input (mouse or touchscren and keyboard)
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.modalControl">
            <summary>
            Topmost modal control
            </summary>
        </member>
        <member name="F:GLUBaseTerminal._focusedControl">
            <summary>
            Internal focused control 
            </summary>
        </member>
        <member name="F:GLUBaseTerminal._focusedParentControl">
            <summary>
            Internal focused top-level parent control
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.draggedTerminal">
            <summary>
            Terminal, which contains currently dragged control
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.selection">
            <summary>
            Currently selected object (Editor mode)
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.dragSelectionMode">
            <summary>
            This flag is set when user drags selected text in text controls
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.drawCursor">
            <summary>
            If true, cursor is visible
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.drawHint">
            <summary>
            If true, hint will be displayed
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.enabled">
            <summary>
            If true, treminal is processed
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.drawModalBackground">
            <summary>
            If true, modal background will be drawn
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.UpdateModalBackground">
            <summary>
            Updates modal Bg. Internal
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.keyTime">
            <summary>
            Key down time
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.lastKeyPressed">
            <summary>
            Last pressed key
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.keyRepeatStartInterval">
            <summary>
            Time interval after which key starts to repeat
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.keyRepeatTime">
            <summary>
            Repeat key countdown
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.keyRepeatInterval">
            <summary>
            Time interval after which key starts to repeat
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.offset">
            <summary>
            Internal draw offset
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.cursorMesh">
            <summary>
            Current cursor mesh
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.cursor">
            <summary>
            Current cursor type
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.ProcessControlInput(GLUControl)">
            <summary>
            Processes input events for provided control
            </summary>
            <param name="control">provided control</param>
        </member>
        <member name="F:GLUBaseTerminal.OnChildChange">
            <summary>
            Content change event
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.ChildChanged(GLUObject)">
            <summary>
            Called by changing child
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:GLUBaseTerminal.InternalProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Internal. Used to process control key events
            </summary>
            <param name="key">Key code</param>
        </member>
        <member name="M:GLUBaseTerminal.FocusControl(GLUControl)">
            <summary>
            Called, when control is focused
            </summary>
            <param name="c">Sender control</param>
        </member>
        <member name="F:GLUBaseTerminal._inputOverControl">
            <summary>
            Internal flag indicating, that cursor is over one of controls 
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.FindLastVisible(System.Collections.Generic.List{GLUControl})">
            <summary>
            Returns last visible form
            </summary>
            <param name="list">List to process</param>
            <returns>Last visible form</returns>
        </member>
        <member name="F:GLUBaseTerminal.freezeIfInactive">
            <summary>
            If False, terminal continues drawing and updating even if not in focus
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.Render">
            <summary>
            Renders GLU forms
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.SetResolution(System.Int32,System.Int32)">
            <summary>
            Sets terminal's screen resolution
            </summary>
            <param name="width">Screen width</param>
            <param name="height">Screen height</param>
        </member>
        <member name="M:GLUBaseTerminal.SetControlFocus(GLUControl)">
            <summary>
            Sets focus to control
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:GLUBaseTerminal.SetVisible(GLUControl,System.Boolean)">
            <summary>
            Sets form visibility
            </summary>
            <param name="control">Control o set visibility</param>
            <param name="visible">Visibility flag</param>
        </member>
        <member name="M:GLUBaseTerminal.BringToFront(GLUControl)">
            <summary>
            Brings control to front
            </summary>
            <param name="control">Control to bring</param>
        </member>
        <member name="M:GLUBaseTerminal.CloseControl(GLUControl)">
            <summary>
            Closes control
            </summary>
            <param name="control">Control to close</param>
        </member>
        <member name="M:GLUBaseTerminal.Update(System.Boolean)">
            <summary>
            Process controls and input
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.Update(System.Boolean,UnityEngine.Vector3)">
            <summary>
            Process forms and input. Mesh viewport version 
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.AddControl(GLUControl)">
            <summary>
            Sets up control in terminal
            </summary>
            <param name="c">Control to setup</param>
            <returns>Result of operation</returns>
        </member>
        <member name="M:GLUBaseTerminal.RemoveControl(GLUControl)">
            <summary>
            Removes control from terminal
            </summary>
            <param name="c">Control to remove</param>
            <returns>True, if removed</returns>
        </member>
        <member name="M:GLUBaseTerminal.SetModal(GLUControl,System.Boolean)">
            <summary>
            Shows modal control
            </summary>
            <param name="c">Control to show</param>
            <param name="drawModalBackground">If true, standard modal background will be drawn</param>
        </member>
        <member name="M:GLUBaseTerminal.CheckFocus">
            <summary>
            Checks terminal for getting focus
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUBaseTerminal.CheckDistance">
            <summary>
            Checks terminal for being too far character
            </summary>
            <returns>True if maximum interaction distance is exceeded</returns>
        </member>
        <member name="M:GLUBaseTerminal.SetStayOnTop(GLUControl,System.Boolean)">
            <summary>
            Makes control stay on top
            </summary>
            <param name="c">Control to set</param>
            <param name="value">Stay on top flag</param>
        </member>
        <member name="M:GLUBaseTerminal.SkinChanged">
            <summary>
            Called, when skin has changed
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.Awake">
            <summary>
            Set up internal states and variables
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Terminal name</param>
            <param name="width">Width of screen or targetTexture</param>
            <param name="height">Height of screen or targetTexture</param>
        </member>
        <member name="M:GLUBaseTerminal.Activate">
            <summary>
            Activates terminal, setting an input focus on it
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.Deactivate">
            <summary>
            Deactivates terminal, setting an input focus on it
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.Destroy">
            <summary>
            Destroys terminal removing it from terminal's list
            </summary>
        </member>
        <member name="F:GLUBaseTerminal.destroyed">
            <summary>
            Destroyed flag
            </summary>
        </member>
        <member name="M:GLUBaseTerminal.ToString">
            <summary>
            Returns string representation of terminal
            </summary>
            <returns>String, containing name and type</returns>
        </member>
        <member name="P:GLUBaseTerminal.hoveredControl">
            <summary>
            Current hovered control (which contains cursor)
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.draggedControl">
            <summary>
            Currently dragged control 
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.order">
            <summary>
            Order of input processing
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.styles">
            <summary>
            Terminal's default skin. Set it before controls creation
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.fontMaterial">
            <summary>
            Global font material
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.scrollViewFontMaterial">
            <summary>
            Global font material for scrollview children 
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.outlineMaterial">
            <summary>
            Global outline material
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.imageMaterial">
            <summary>
            Global image material
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.viewportMeshMaterial">
            <summary>
            Global viewport mesh material
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.focusedControl">
            <summary>
            Current focused control
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.focusedParentControl">
            <summary>
            Current focused top-level parent control
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.dragControlMode">
            <summary>
            Drag control mode. In this mode only dragged control process input 
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.dragDelta">
            <summary>
            Drag delta, between start drag position and current cursor position
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.dragControlMoving">
            <summary>
            When true, dragControl is moved by drag
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.modalBackgroundColor">
            <summary>
            If true, modal background will be drawn
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.width">
            <summary>
            Terminal screen width
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.height">
            <summary>
            Terminal screen height
            </summary>
        </member>
        <member name="E:GLUBaseTerminal.OnActivate">
            <summary>
            Occures, when terminal is activating (focused terminal is unchanged yet)
            </summary>
        </member>
        <member name="E:GLUBaseTerminal.OnDeactivate">
            <summary>
            Occures, when terminal is deactivating (focused terminal is unchanged yet)
            </summary>
        </member>
        <member name="P:GLUBaseTerminal.inputOverControl">
            <summary>
            If true, cursor or touch is over one of controls
            </summary>
        </member>
        <member name="T:GLUCoroutine">
            <summary>
            GLU Coroutine class
            </summary>
        </member>
        <member name="F:GLUCoroutine.terminal">
            <summary>
            Terminal container
            </summary>
        </member>
        <member name="F:GLUCoroutine.routine">
            <summary>
            Routine object
            </summary>
        </member>
        <member name="F:GLUCoroutine.currentValue">
            <summary>
            Current routine value
            </summary>
        </member>
        <member name="M:GLUCoroutine.#ctor(System.Collections.IEnumerator)">
            <summary>
            Constructor
            </summary>
            <param name="routine">IEnumerator method parameter</param>
        </member>
        <member name="T:GLUStyleAttribute">
            <summary>
            Style attribute. Used to declare GLUe control style 
            </summary>
        </member>
        <member name="F:GLUStyleAttribute.targets">
            <summary>
            Control classes, which can use this style 
            </summary>
        </member>
        <member name="M:GLUStyleAttribute.#ctor(System.Type[])">
            <summary>
            Constructor
            </summary>
            <param name="targets">Control classes, which can use this style </param>
            <example>
            This example shows how to use GLUStyleAttribute constructor
            <code>
            \code
            public class MyButton: GLULayeredControl
            {
            }
            
            [GLUStyleAttribute(typeof(MyButton))]
            public class MyButtonStyle : GLULayeredControlStyle
            {
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="T:IGLUMenu">
            <summary>
            Common menu interface
            </summary>
        </member>
        <member name="M:IGLUMenu.Show">
            <summary>
            Shows menu
            </summary>
        </member>
        <member name="M:IGLUMenu.Hide">
            <summary>
            Hides menu
            </summary>
        </member>
        <member name="M:IGLUMenu.Contains(UnityEngine.Vector3)">
            <summary>
            Checks point for containment
            </summary>
            <param name="mp">Point coordinates</param>
            <returns>True, if point is contained</returns>
        </member>
        <member name="M:IGLUMenu.WorldToParent(UnityEngine.Vector3)">
            <summary>
            Translates provided coordinates from world space to local parent space
            </summary>
            <param name="coord">Coordinates to transform</param>
            <returns>Translated coordinates</returns>
        </member>
        <member name="P:IGLUMenu.items">
            <summary>
            Menu items
            </summary>
        </member>
        <member name="T:GLUPadding">
            <summary>
            Struct for holding borders and padding values 
            </summary>
        </member>
        <member name="M:GLUPadding.#ctor(GLUNumber,GLUNumber,GLUNumber,GLUNumber)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left border</param>
            <param name="right">Right border</param>
            <param name="top">Top border</param>
            <param name="bottom">Bottom border</param>
        </member>
        <member name="M:GLUPadding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left border</param>
            <param name="right">Right border</param>
            <param name="top">Top border</param>
            <param name="bottom">Bottom border</param>
        </member>
        <member name="M:GLUPadding.#ctor(GLUNumber)">
            <summary>
            Constructor
            </summary>
            <param name="value">Borders value</param>
        </member>
        <member name="M:GLUPadding.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">Borders value</param>
        </member>
        <member name="M:GLUPadding.ToString">
            <summary>
            Converts padding to string
            </summary>
            <returns>String representation of padding</returns>
        </member>
        <member name="M:GLUPadding.Parse(System.String)">
            <summary>
            Parses provided string, filling new GLUPadding instance with parse results
            </summary>
            <param name="rawString">String to parse</param>
        </member>
        <member name="M:GLUPadding.op_Implicit(System.String)~GLUPadding">
            <summary>
            Implicit constructor
            </summary>
            <param name="s">Text to parse</param>
            <returns>Newly created GLUPadding</returns>
        </member>
        <member name="F:GLUPadding.zero">
            <summary>
            Built-in zero padding
            </summary>
        </member>
        <member name="M:GLUPadding.op_Equality(GLUPadding,GLUPadding)">
            <summary>
            == operator override
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUPadding.op_Inequality(GLUPadding,GLUPadding)">
            <summary>
            != operator override
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUPadding.Equals(System.Object)">
            <summary>
            Checks, if provided object is equal to this one
            </summary>
            <param name="obj">Provided object</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUPadding.GetHashCode">
            <summary>
            GetHashCode override
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:GLUPadding.op_ExclusiveOr(GLUPadding,UnityEngine.Vector2)">
            <summary>
            Replaces coordinates multipliers with specified b.x and b.y
            </summary>
            <param name="a">Padding to update</param>
            <param name="b">New multipliers</param>
            <returns>New GLUPadding with replaced multipliers</returns>
        </member>
        <member name="P:GLUPadding.left">
            <summary>
            Left border
            </summary>
        </member>
        <member name="P:GLUPadding.right">
            <summary>
            Right border
            </summary>
        </member>
        <member name="P:GLUPadding.top">
            <summary>
            Top border
            </summary>
        </member>
        <member name="P:GLUPadding.bottom">
            <summary>
            Bottom border
            </summary>
        </member>
        <member name="T:GLUCursorType">
            <summary>
            Cursor type
            </summary>
        </member>
        <member name="F:GLUCursorType.normal">
            <summary>
            Normalcursor
            </summary>
        </member>
        <member name="F:GLUCursorType.pan">
            <summary>
            Pan cross
            </summary>
        </member>
        <member name="F:GLUCursorType.zoom">
            <summary>
            Zoom cursor
            </summary>
        </member>
        <member name="F:GLUCursorType.copy">
            <summary>
            Copy cursor
            </summary>
        </member>
        <member name="F:GLUCursorType.drag">
            <summary>
            Drag cursor
            </summary>
        </member>
        <member name="F:GLUCursorType.custom">
            <summary>
            Custom cursor
            </summary>
        </member>
        <member name="T:GLURotation">
            <summary>
            Rotation
            </summary>
        </member>
        <member name="F:GLURotation.reserved">
            <summary>
            Reserved. Internal
            </summary>
        </member>
        <member name="F:GLURotation.ccw0">
            <summary>
            No rotation
            </summary>
        </member>
        <member name="F:GLURotation.ccw90">
            <summary>
            90 degree counter-clockwize
            </summary>
        </member>
        <member name="F:GLURotation.ccw180">
            <summary>
            180 degree counter-clockwize
            </summary>
        </member>
        <member name="F:GLURotation.ccw270">
            <summary>
            270 degree counter-clockwize
            </summary>
        </member>
        <member name="T:GLUQuad">
            <summary>
            Polygon in 3D space 
            </summary>
        </member>
        <member name="F:GLUQuad.v0">
            <summary>
            First vector
            </summary>
        </member>
        <member name="F:GLUQuad.v1">
            <summary>
            Second vector
            </summary>
        </member>
        <member name="F:GLUQuad.v2">
            <summary>
            Third vector
            </summary>
        </member>
        <member name="F:GLUQuad.v3">
            <summary>
            Fourth vector
            </summary>
        </member>
        <member name="M:GLUQuad.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Constructor
            </summary>
            <param name="v0">First vector</param>
            <param name="v1">Second vector</param>
            <param name="v2">Third vector</param>
            <param name="v3">Fourth vector</param>
        </member>
        <member name="T:GLU">
            <summary>
            GLU core
            </summary>
        </member>
        <member name="F:GLU.signature">
            <summary>
            GLUe version signature
            </summary>
        </member>
        <member name="F:GLU.resourcesPath">
            <summary>
            GLobal resources path variable
            </summary>
        </member>
        <member name="F:GLU.debug">
            <summary>
            Global debug flag. If set to true, debug output will be displayed
            </summary>
        </member>
        <member name="F:GLU.enabled">
            <summary>
            Engine enable flag. If true, engine stops terminals update
            </summary>
        </member>
        <member name="F:GLU.meshGeneration">
            <summary>
            If true, graphic primitive meshes will not be generated
            </summary>
        </member>
        <member name="F:GLU.engine">
            <summary>
            Current GLUEngine object
            </summary>
        </member>
        <member name="F:GLU.disabledControlRGBOffset">
            <summary>
            Color for drawing disabled text
            </summary>
        </member>
        <member name="F:GLU.rad2Degree">
            <summary>
            Radians to degrees conversion coefficient 
            </summary>
        </member>
        <member name="F:GLU._terminal">
            <summary>
            GLUEngine script used to start coroutines and interaction with system
            </summary>
        </member>
        <member name="F:GLU.returnChar">
            <summary>
            Return character
            </summary>
        </member>
        <member name="F:GLU.newLineChar">
            <summary>
            New line character
            </summary>
        </member>
        <member name="F:GLU.mm2Pxl">
            <summary>
            Millimeter to pixel conversion coefficient
            </summary>
        </member>
        <member name="F:GLU.materials">
            <summary>
            Global materials list
            </summary>
        </member>
        <member name="F:GLU.currentBrushMaterial">
            <summary>
            Current brush material for 2D Low-level graphic
            </summary>
        </member>
        <member name="F:GLU.currentPenMaterial">
            <summary>
            Current pen material for 2D Low-level graphic
            </summary>
        </member>
        <member name="F:GLU.cursorWidth">
            <summary>
            Text fields cursor width
            </summary>
        </member>
        <member name="F:GLU.focusedTerminal">
            <summary>
            Currently focused terminal
            </summary>
        </member>
        <member name="F:GLU.hoveredTerminal">
            <summary>
            Currently hovered non-screen terminal
            </summary>
        </member>
        <member name="M:GLU.UpdateScreen">
            <summary>
            Updates screen property
            </summary>
        </member>
        <member name="F:GLU.coroutines">
            <summary>
            Currently running coroutines
            </summary>
        </member>
        <member name="M:GLU.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts coroutine
            </summary>
            <param name="routine">Coroutine</param>
            <returns>Result</returns>
        </member>
        <member name="M:GLU.StopCoroutine(GLUCoroutine)">
            <summary>
            Stops coroutine
            </summary>
            <param name="routine">Coroutine</param>
            <returns>Result</returns>
        </member>
        <member name="M:GLU.GetTypes(System.Type,System.Boolean)">
            <summary>
            Returns all inheritors of provided ancestor type
            </summary>
            <param name="ancestor">Ancestor type</param>
            <param name="includeAncestor">If true, ancestor will be included in inheritors list as well</param>
            <returns></returns>
        </member>
        <member name="M:GLU.UpdateCoroutines(System.Boolean)">
            <summary>
            Internal. Updates currently running coroutines 
            </summary>
            <param name="fixedUpdate">If true, only coroutines with GLUWaitFroFixedUpdate yield will be updated</param>
        </member>
        <member name="M:GLU.Update">
            <summary>
            Updates terminals internal mechanics
            </summary>
        </member>
        <member name="M:GLU.FixedUpdate">
            <summary>
            Internal. Called by engine to process fixed updates (mostly, coroutines with GLUWaitForFixedUpdate yield
            </summary>
        </member>
        <member name="M:GLU.LateUpdate">
            <summary>
            Resets internal variables
            </summary>
        </member>
        <member name="M:GLU.Render">
            <summary>
            Renders terminals content
            </summary>
        </member>
        <member name="F:GLU.spaceSizeCoefficient">
            <summary>
            Space size coefficient. Internal use
            </summary>
        </member>
        <member name="F:GLU.cursorVisible">
            <summary>
            Text cursor blinking flag
            </summary>
        </member>
        <member name="F:GLU.scale">
            <summary>
            GLobal scale coefficient for 2D low-level graphics
            </summary>
        </member>
        <member name="F:GLU.immediateDrawInProgress">
            <summary>
            2D low-level graphics drawing in progress
            </summary>
        </member>
        <member name="F:GLU.scaleWidth">
            <summary>
            When set to true, 2D polyline width is affected by GLU.scale
            </summary>
        </member>
        <member name="M:GLU.GetVectorAngle(UnityEngine.Vector2)">
            <summary>
            Returns vectors angle, clamped by 0..Pi*2
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:GLU.GetType(System.String)">
            <summary>
            Searches all assemblies of project for type with provided name
            </summary>
            <param name="typeName">Name</param>
            <returns>Type</returns>
        </member>
        <member name="M:GLU.Vibrate">
            <summary>
            Vibrates handheld device
            </summary>
        </member>
        <member name="M:GLU.Begin2DPolyLine(System.Single,System.Single)">
            <summary>
            Starts drawing of polyline
            </summary>
            <param name="width">Polyline width</param>
            <param name="scale">Polilyne scale</param>
        </member>
        <member name="M:GLU.Begin2DPolyLine(System.Single,System.Single,System.Single,UnityEngine.Material,UnityEngine.Material,System.Boolean)">
            <summary>
            Starts drawing of polyline
            </summary>
            <param name="width">Polyline width</param>
            <param name="outlineWidth">Outline width</param>
            <param name="scale">Polyline scale</param>
            <param name="brushMaterial">Polyline material</param>
            <param name="penMaterial">Outline material</param>
            <param name="scaleWidth">Scale affects width if true</param>
        </member>
        <member name="M:GLU.BeginImmediateDraw(System.Single,System.Single,System.Single,UnityEngine.Material,UnityEngine.Material,System.Boolean)">
            <summary>
            Starts drawing of lines
            </summary>
            <param name="width">Lines width</param>
            <param name="outlineWidth">Outline width</param>
            <param name="scale">Lines scale</param>
            <param name="brushMaterial">Lines material</param>
            <param name="penMaterial">Outline material</param>
            <param name="scaleWidth">Scale affects width if true</param>
        </member>
        <member name="M:GLU.Vertex2D(System.Single,System.Single)">
            <summary>
            Adds vertex to polyline
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
        </member>
        <member name="M:GLU.Intersects(UnityEngine.Rect,UnityEngine.Rect)">
            <summary>
            Check two rects Rects for intersection  
            </summary>
            <param name="a">First Rect</param>
            <param name="b">Second Rect</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLU.Intersects(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Check two segments for intersection
            </summary>
            <param name="v0">Start vertex of first segment</param>
            <param name="v1">End vertex of first segment</param>
            <param name="v2">Start vertex of second segment</param>
            <param name="v3">End vertex of second segment</param>
            <returns></returns>
        </member>
        <member name="M:GLU.Perpendicular(UnityEngine.Vector2)">
            <summary>
            Returns vector, perpedicular to provided with same magnitude
            </summary>
            <param name="v">provided vector</param>
            <returns>Perpendicular vector</returns>
        </member>
        <member name="M:GLU.DrawPolygon(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws polygon by provided corner points
            </summary>
            <param name="v0">First corner point</param>
            <param name="v1">Second corner point</param>
            <param name="v2">Third corner point</param>
            <param name="v3">Fourth corner point</param>
        </member>
        <member name="M:GLU.DrawPolygon(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Draws polygon by provided corner points with privided UVs
            </summary>
            <param name="v0">First corner point</param>
            <param name="v1">Second corner point</param>
            <param name="v2">Third corner point</param>
            <param name="v3">Fourth corner point</param>
            <param name="uv0">First corner UV</param>
            <param name="uv1">Second corner UV</param>
            <param name="uv2">Third corner UV</param>
            <param name="uv3">Fourth corner UV</param>
        </member>
        <member name="M:GLU.DrawPolygon(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,GLURotation)">
            <summary>
            Draws polygon by provided corner points with privided UVs
            </summary>
            <param name="xMin">Left border</param>
            <param name="yMin">Bottom border</param>
            <param name="xMax">Right border</param>
            <param name="yMax">Top border</param>
            <param name="uMin">Left U</param>
            <param name="vMin">Bottom V</param>
            <param name="uMax">Right U</param>
            <param name="vMax">Top V</param>
            <param name="rotation">UV texure rotation</param>
            <param name="skew">Skew value</param>
        </member>
        <member name="M:GLU.DrawPolygon(UnityEngine.Vector3,System.Single,UnityEngine.Material)">
            <summary>
            Draws sqare polygon by provided center point and size
            </summary>
            <param name="v">Center point</param>
            <param name="mat">Polygon material</param>
            <param name="size">Polygon half dimension</param>
        </member>
        <member name="M:GLU.Generate2DPolyLine(System.Collections.Generic.List{UnityEngine.Vector3},GLUMesh,GLUMesh,System.Single,System.Single)">
            <summary>
            Generates 2D Polyline in provided meshes 
            </summary>
            <param name="vertices">Vertices list</param>
            <param name="mesh">Mesh</param>
            <param name="outlineMesh">Outline mesh</param>
            <param name="linewidth">Line width</param>
            <param name="outlineWidth">Outline width</param>
        </member>
        <member name="M:GLU.EndImmediateDraw">
            <summary>
            Ends and draws primitives
            </summary>
        </member>
        <member name="M:GLU.End2DPolyLine">
            <summary>
            Ends and draws 2D polyline
            </summary>
        </member>
        <member name="F:GLU.textureMat">
            <summary>
            Gloal texture material for DrawTexture method
            </summary>
        </member>
        <member name="M:GLU.DrawTexture(UnityEngine.Rect,UnityEngine.Texture2D,System.Boolean)">
            <summary>
            Immediate draws texture in provided rect
            </summary>
            <param name="rect0">Rect to draw</param>
            <param name="texture">Texture</param>
            <param name="mirror">Flips texture horizontally if true</param>
        </member>
        <member name="M:GLU.DrawTexture(UnityEngine.Rect,UnityEngine.Material)">
            <summary>
            Draws texture of provided material in provided rect
            </summary>
            <param name="rect0">Rect to draw</param>
            <param name="material">Material</param>
        </member>
        <member name="F:GLU.uvZero">
            <summary>
            uvZero. Internal use
            </summary>
        </member>
        <member name="M:GLU.BoxMesh(GLUMesh,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,GLURotation)">
            <summary>
            Generates box with provided coordinates in provided mesh rotated by provided rotation. Y coordinate is inverted
            </summary>
            <param name="m">Mesh</param>
            <param name="xMin">Left</param>
            <param name="yMin">Top</param>
            <param name="xMax">Right</param>
            <param name="yMax">Bottom</param>
            <param name="uMin">U left</param>
            <param name="vMin">V top</param>
            <param name="uMax">U right</param>
            <param name="vMax">V bottom</param>
            <param name="rotation">Rotation</param>
        </member>
        <member name="M:GLU.BoxMesh(GLUMesh,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,GLURotation)">
            <summary>
            Generates box with provided coordinates in provided mesh rotated by provided rotation and skewed by provided skew value. Y coordinate is inverted
            </summary>
            <param name="m">Mesh</param>
            <param name="xMin">Left</param>
            <param name="yMin">Top</param>
            <param name="xMax">Right</param>
            <param name="yMax">Bottom</param>
            <param name="uMin">U left</param>
            <param name="vMin">V top</param>
            <param name="uMax">U right</param>
            <param name="vMax">V bottom</param>
            <param name="skew">Skew parameter</param>
            <param name="rotation">Rotation</param>
        </member>
        <member name="M:GLU.DrawLetter(System.Int32,System.Int32,GLUFont,GLUFontMipmap,System.Char,UnityEngine.FontStyle,System.Boolean,System.Single)">
            <summary>
            Draws letter polygon 
            </summary>
            <param name="cx">Left coordinate</param>
            <param name="cy">Top coordinate</param>
            <param name="f">Font</param>
            <param name="mip">Font mipmap</param>
            <param name="c">Letter</param>
            <param name="style">Font style</param>
            <param name="underline">Underline flag</param>
            <param name="widthIncrement">Width increment</param>
            <returns></returns>
        </member>
        <member name="M:GLU.LetterMesh(GLUMesh,System.Int32,System.Int32,GLUFont,GLUFontMipmap,System.Char,UnityEngine.FontStyle,System.Boolean,System.Single)">
            <summary>
            Generates letter polygon 
            </summary>
            <param name="m">Mesh</param>
            <param name="cx">Left coordinate</param>
            <param name="cy">Top coordinate</param>
            <param name="f">Font</param>
            <param name="mip">Font mipmap</param>
            <param name="c">Letter</param>
            <param name="style">Font style</param>
            <param name="underline">Underline flag</param>
            <param name="widthIncrement">Width increment</param>
            <returns></returns>
        </member>
        <member name="M:GLU.GenerateBorder(GLUMesh,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates box border
            </summary>
            <param name="m">Mesh</param>
            <param name="xMin">Left</param>
            <param name="yMin">Top</param>
            <param name="xMax">Right</param>
            <param name="yMax">Bottom</param>
            <param name="borderWidth">Border width</param>
            <param name="leftBorder">Left border visibility</param>
            <param name="topBorder">Top border visibility</param>
            <param name="rightBorder">Right border visibility</param>
            <param name="bottomBorder">Bottom border visibility</param>
        </member>
        <member name="M:GLU.WordMesh(GLUMesh,System.Int32,System.Int32,System.Int32,GLUTextStyle,System.String,System.Int32,System.Int32)">
            <summary>
            Generates word mesh
            </summary>
            <param name="m">Mesh</param>
            <param name="x">Left</param>
            <param name="y">Top</param>
            <param name="width">Max width</param>
            <param name="ts">Text style</param>
            <param name="s">Text</param>
            <param name="pos">Start position of word in text</param>
            <param name="length">Max word length</param>
            <returns></returns>
        </member>
        <member name="M:GLU.DrawText(System.Int32,System.Int32,System.Int32,System.Int32,GLUFont,UnityEngine.FontStyle,System.Boolean,System.String,System.Int32)">
            <summary>
            Draws text
            </summary>
            <param name="x">Left</param>
            <param name="y">Top</param>
            <param name="width">Max width</param>
            <param name="fontSize">Font size</param>
            <param name="font">Font</param>
            <param name="fontStyle">Font style</param>
            <param name="underline">Underline flag</param>
            <param name="s">Text</param>
            <param name="pos">Start position in text to draw</param>
            <returns>Text width</returns>
        </member>
        <member name="M:GLU.TextMesh(GLUMesh,System.Int32,System.Int32,System.Int32,System.Int32,GLUFont,UnityEngine.FontStyle,System.Boolean,System.String,System.Int32,System.Single)">
            <summary>
            Generates text mesh
            </summary>
            <param name="m">Mesh</param>
            <param name="x">Left</param>
            <param name="y">Top</param>
            <param name="width">Max width</param>
            <param name="fontSize">Font size</param>
            <param name="font">Font</param>
            <param name="fontStyle">Font style</param>
            <param name="underline">Underline flag</param>
            <param name="s">Text</param>
            <param name="spaceDelta">Additional space size (used in justified text)</param>
            <param name="pos">Start position of word in text</param>
            <returns></returns>
        </member>
        <member name="M:GLU.CalculateTextSize(System.Int32,GLUFont,UnityEngine.FontStyle,System.Boolean,System.String,System.Int32)">
            <summary>
            Returns size of provided text drawn with provided font attributes
            </summary>
            <param name="fontSize">Font size</param>
            <param name="font">Font</param>
            <param name="fontStyle">Font style</param>
            <param name="underline">Underline flag</param>
            <param name="s">Text to calculate</param>
            <param name="pos">Start position of text to process</param>
            <returns></returns>
        </member>
        <member name="M:GLU.GenerateBorderedBox(GLUMesh,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,GLURotation)">
            <summary>
            Generates box surrounded by border. Used to draw stretched textures with non-stretcheable borders
            </summary>
            <param name="m">Mesh</param>
            <param name="x">Left</param>
            <param name="y">Top</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="leftBorder">Left border width</param>
            <param name="rightBorder">Right border width</param>
            <param name="topBorder">Top border width</param>
            <param name="bottomBorder">Bottom border width</param>
            <param name="textureWidth">Texture width</param>
            <param name="textureHeight">Texture height</param>
            <param name="rotation">Texture rotation</param>
        </member>
        <member name="M:GLU.DrawBorderedBox(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,GLURotation)">
            <summary>
            Draw box surrounded by border. Used to draw stretched textures with non-stretcheable borders
            </summary>
            <param name="x">Left</param>
            <param name="y">Top</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="leftBorder">Left border width</param>
            <param name="rightBorder">Right border width</param>
            <param name="topBorder">Top border width</param>
            <param name="bottomBorder">Bottom border width</param>
            <param name="textureWidth">Texture width</param>
            <param name="textureHeight">Texture height</param>
            <param name="rotation">Texture rotation</param>
        </member>
        <member name="M:GLU.CalculatePow2Size(System.Single,System.Single)">
            <summary>
            Returns closest power of 2 vector, larger or equal to provided w and h
            </summary>
            <param name="w">width</param>
            <param name="h">Height</param>
            <returns></returns>
        </member>
        <member name="M:GLU.GetAveragePixel(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Texture2D)">
            <summary>
            Returns average pixel color from texture by provided coordinates and radius
            </summary>
            <param name="x">X coordinate of pixel</param>
            <param name="y">Y coordinate of pixel</param>
            <param name="xr">X radius</param>
            <param name="yr">Y radius</param>
            <param name="texture">Texture</param>
            <returns>Average pixel color</returns>
        </member>
        <member name="M:GLU.GetAveragePixel(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color[],System.Int32,System.Int32)">
            <summary>
            Returns average pixel color from texture by provided coordinates and radius
            </summary>
            <param name="x">X coordinate of pixel</param>
            <param name="y">Y coordinate of pixel</param>
            <param name="xr">X radius</param>
            <param name="yr">Y radius</param>
            <param name="texture">Texture colors array</param>
            <param name="textureWidth">Texture width</param>
            <param name="textureHeight">Texture height</param>
            <returns>Average pixel color</returns>
        </member>
        <member name="M:GLU.SmartScaleTexture(UnityEngine.Texture2D,System.Int32,System.Int32)">
            <summary>
            Downscales texture uses matrix calculation of average pixel color
            </summary>
            <param name="source">Source texture</param>
            <param name="targetWidth">Target width</param>
            <param name="targetHeight">Terget height</param>
            <returns>Scaled texture</returns>
        </member>
        <member name="M:GLU.SmartScaleTexture(UnityEngine.Color[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Downscales texture uses matrix calculation of average pixel color
            </summary>
            <param name="source">Source texture colors array</param>
            <param name="sourceWidth">Source texture width</param>
            <param name="sourceHeight">Source texture height</param>
            <param name="targetWidth">Target width</param>
            <param name="targetHeight">Terget height</param>
            <returns>Colors array of scaled texture colors</returns>
        </member>
        <member name="M:GLU.CombineBitmaps(UnityEngine.Color[],UnityEngine.Color[],GLU.CombineType)">
            <summary>
            Combine provided bitmaps by provided combine type
            </summary>
            <param name="a">First bitmap</param>
            <param name="b">Second bitmap</param>
            <param name="combineType">Combine type</param>
            <returns>Combination result</returns>
        </member>
        <member name="M:GLU.SetHandler(System.Object,GLUObject,System.String,System.String)">
            <summary>
            Searches method handlerName in container's (or in container's parent form's) methods and set it to provided field name of provided obj
            </summary>
            <param name="obj">Obj</param>
            <param name="container">Container</param>
            <param name="fieldName">Obj field name</param>
            <param name="handlerName">Handler name</param>
        </member>
        <member name="M:GLU.GetHandler(System.Delegate)">
            <summary>
            Returns name of provided delegate
            </summary>
            <param name="d">Delegate</param>
            <returns>Delegate's name</returns>
        </member>
        <member name="M:GLU.IsOfType(System.Type,System.Type)">
            <summary>
            Checks if thisType is (or is inherited from) comType
            </summary>
            <param name="thisType">Type to check</param>
            <param name="compType">Argument</param>
            <returns>True if thisType is (inherited from comType</returns>
        </member>
        <member name="P:GLU.terminal">
            <summary>
            Current terminal
            </summary>
        </member>
        <member name="P:GLU.viewport">
            <summary>
            Current viewport
            </summary>
        </member>
        <member name="P:GLU.inputIntercepted">
            <summary>
            Input interception flag
            </summary>
        </member>
        <member name="P:GLU.screen">
            <summary>
            Screen terminal
            </summary>
        </member>
        <member name="T:GLU.CombineType">
            <summary>
            Bitmap combine type
            </summary>
        </member>
        <member name="F:GLU.CombineType.blend">
            <summary>
            Result color is Lerp between A and B operands by B.alpha
            </summary>
        </member>
        <member name="F:GLU.CombineType.invertB">
            <summary>
            Result color is Lerp between A and not B operands by B.alpha
            </summary>
        </member>
        <member name="T:GLUSequenceState">
            <summary>
            Helper class for animation. Stores temporary transition sequence if needed
            </summary>
        </member>
        <member name="F:GLUSequenceState.time">
            <summary>
            Current time
            </summary>
        </member>
        <member name="F:GLUSequenceState.transition">
            <summary>
            Temporary transition sequence
            </summary>
        </member>
        <member name="M:GLUSequenceState.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:GLUKey`1">
            <summary>
            Generic key wrapper. Used for initialization of key sequences
            </summary>
            <typeparam name="T">Any type</typeparam>
        </member>
        <member name="F:GLUKey`1.time">
            <summary>
            Key time
            </summary>
        </member>
        <member name="F:GLUKey`1.value">
            <summary>
            Key value
            </summary>
        </member>
        <member name="M:GLUKey`1.#ctor(System.Single,`0)">
            <summary>
            Constructor
            </summary>
            <param name="time">Key time</param>
            <param name="value">Key value</param>
            <example>
            This example shows how to use GLUKey
            <code>
            \code
            GLUVisibilitySequence s = new GLUVisibilitySequence(UnityEngine.WrapMode.Clamp, UnityEngine.WrapMode.Clamp, new GLUKey&lt;bool&gt;(0, true));
            GLULocalRotationSequence lrs = new GLULocalRotationSequence(WrapMode.Clamp, WrapMode.Loop, new GLUKey&lt;Vector3&gt;(0, Vector3.zero), new GLUKey&lt;Vector3&gt;(1, new Vector3(0, 0, 360)));
            \endcode
            </code>
            </example>    
        </member>
        <member name="T:GLUCurveKey">
            <summary>
            GLU curve key
            </summary>
        </member>
        <member name="F:GLUCurveKey.outTangent">
            <summary>
            Key right tangent
            </summary>
        </member>
        <member name="F:GLUCurveKey.inTangent">
            <summary>
            Key left tangent
            </summary>
        </member>
        <member name="M:GLUCurveKey.#ctor(System.Single,System.Single,UnityEngine.Vector2,UnityEngine.Vector2,GLUTangentMode)">
            <summary>
            Key constructor
            </summary>
            <param name="time">Key time</param>
            <param name="value">Key value</param>
            <param name="inTangent">Left tangent</param>
            <param name="outTangent">Right tangent</param>
            <param name="tangentMode">Tangents mode</param>
        </member>
        <member name="M:GLUCurveKey.ToString">
            <summary>
            Converts key to string 
            </summary>
            <returns>String representation of the key</returns>
            <example>
            This example shows how to use GLUCurveKey.ToString method
            <code>
            \code
            public static string CurveToString(GLUCurve curve)
            {
                StringBuilder sb = new StringBuilder();
                sb.Append((int)curve.preWrapMode);
                sb.Append(", ");
                sb.Append((int)curve.postWrapMode);
                for (int i = 0; i &lt; curve.length; i++)
                {
                    sb.Append(", ");
                    sb.Append(curve[i].ToSrting());
                }
                return sb.ToString();
            }
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUCurveKey.#ctor(System.String)">
            <summary>
            Creates an instance of GLUCurveKey and populates it with text parameter's parse result
            </summary>
            <param name="text">Text to parse</param>
            <returns>GLUCurveKey</returns>
            <example>
            This example shows how to use GLUCurveKey constructor
            <code>
            \code
            GLUCurveKey kf = new GLUCurveKey("(0, 1, (0, 0.5), (0, -0.5), 0)");
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUCurveKey.Equals(System.Object)">
            <summary>
            Checks if specified object is equal to this one. Val-by-val
            </summary>
            <param name="obj">Object to check</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUCurveKey.op_Equality(GLUCurveKey,GLUCurveKey)">
            <summary>
            Checks if keys are equal. Val-by-val
            </summary>
            <param name="a">First keyframe</param>
            <param name="b">Second keyframe</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUCurveKey.op_Inequality(GLUCurveKey,GLUCurveKey)">
            <summary>
            Checks if curves are not equal. Val-by-val
            </summary>
            <param name="a">First curve</param>
            <param name="b">Second curv</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUCurveKey.GetHashCode">
            <summary>
            Returns hashcode
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:GLUCurveKey.time">
            <summary>
            Key time
            </summary>
        </member>
        <member name="P:GLUCurveKey.value">
            <summary>
            Key value
            </summary>
        </member>
        <member name="P:GLUCurveKey.timeValue">
            <summary>
            Point in Time-Value space
            </summary>
        </member>
        <member name="P:GLUCurveKey.tangentMode">
            <summary>
            Tangents mode
            </summary>
        </member>
        <member name="T:GLUCalendarStyle">
            <summary>
            Calendar style
            </summary>
        </member>
        <member name="T:GLULayeredControlStyle">
            <summary>
            Style for layered controls
            </summary>
        </member>
        <member name="T:GLUControlStyle">
            <summary>
            Base control style
            </summary>
        </member>
        <member name="T:GLUGraphicObjectStyle">
            <summary>
            Style for graphic object
            </summary>
        </member>
        <member name="T:GLUStyle">
            <summary>
            Base style class
            </summary>
        </member>
        <member name="M:GLUStyle.SomethingChanged(GLUStyle)">
            <summary>
            Called, when style has changed 
            </summary>
            <param name="sender">Changed style</param>
        </member>
        <member name="M:GLUStyle.#ctor">
            <summary>
            Parameterless constructor for deserialization
            </summary>
        </member>
        <member name="M:GLUStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUStyle.CreateObject">
            <summary>
            Creates object with provided style
            </summary>
            <returns>Newly created object</returns>
        </member>
        <member name="M:GLUStyle.ToString">
            <summary>
            Returns full name ( (path/to/tablesheet).styleName )
            </summary>
            <returns>Full name</returns>
        </member>
        <member name="M:GLUStyle.op_Implicit(System.String)~GLUStyle">
            <summary>
            Search stylesheets cache for style sheet with sheet name and try to load one if  earch unsuccessfull
            </summary>
            <param name="text">Text, usually style full name ( (path/to/tablesheet).styleName )</param>
            <returns>Style if found any and null otherwize </returns>
        </member>
        <member name="M:GLUStyle.C(System.Boolean)">
            <summary>
            Internal and debug only. Used to check boolean expression result and post a message if it returns false
            </summary>
            <param name="r">Expression or variable</param>
            <returns>Input parameter</returns>
        </member>
        <member name="M:GLUStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Used in serialization. Tests object of style adequacy
            </summary>
            <param name="obj">Object to test</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to provided style </returns>
        </member>
        <member name="M:GLUStyle.op_Implicit(GLUStyleLink)~GLUStyle">
            <summary>
            Trying to convert provided style link (style name holder) to style
            </summary>
            <param name="styleLink">Style linc</param>
            <returns>Style if conversion is successfull and null otherwize</returns>
        </member>
        <member name="P:GLUStyle.stylesSheet">
            <summary>
            Parent stylesheet. Used in style serialization
            </summary>
        </member>
        <member name="P:GLUStyle.name">
            <summary>
            Style name
            </summary>
        </member>
        <member name="P:GLUStyle.fullName">
            <summary>
            Style fullname, including stylesheet 
            </summary>
        </member>
        <member name="E:GLUStyle.OnChange">
            <summary>
            Something changed
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.x">
            <summary>
            Default horizontal offset
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.y">
            <summary>
            Default vertical offset
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.width">
            <summary>
            Default width
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.height">
            <summary>
            Default height
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.padding">
            <summary>
            Padding
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.anchors">
            <summary>
            Anchors
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.pivotType">
            <summary>
            Pivot inheritance type
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.pivot">
            <summary>
            Pivot value
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.verticalAlignment">
            <summary>
            Vertical alignment of object
            </summary>
        </member>
        <member name="F:GLUGraphicObjectStyle.alignment">
            <summary>
            Horizontal alignment of object
            </summary>
        </member>
        <member name="M:GLUGraphicObjectStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUGraphicObjectStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,GLUPivotType,UnityEngine.Vector3,GLUAnchors,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent sheet</param>
            <param name="name">Style name</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="padding">Control padding</param>
            <param name="pivotType">Pivot calculation type</param>
            <param name="pivot">Custom pivot position</param>
            <param name="anchors">Object anchors</param>
            <param name="alignment">Object horizontal alilgnment</param>
            <param name="verticalAlignment">Object vertical alilgnment</param>
        </member>
        <member name="M:GLUGraphicObjectStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet name</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUGraphicObjectStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Used in serialization. Tests object of style adequacy
            </summary>
            <param name="obj">Object to test</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to provided style </returns>
        </member>
        <member name="P:GLUGraphicObjectStyle.clientWidth">
            <summary>
            Client width
            </summary>
        </member>
        <member name="P:GLUGraphicObjectStyle.clientHeight">
            <summary>
            Client height
            </summary>
        </member>
        <member name="F:GLUControlStyle.disabledColorMultiplier">
            <summary>
            Disable color multiplier
            </summary>
        </member>
        <member name="F:GLUControlStyle.controlName">
            <summary>
            Control name
            </summary>
        </member>
        <member name="F:GLUControlStyle.hint">
            <summary>
            Hint
            </summary>
        </member>
        <member name="F:GLUControlStyle.hintStyle">
            <summary>
            Hint style
            </summary>
        </member>
        <member name="M:GLUControlStyle.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUControlStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,GLUPadding,GLUPivotType,UnityEngine.Vector3,GLUAnchors)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent sheet</param>
            <param name="name">Style name</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="padding">Control padding</param>
            <param name="pivotType">Pivot calculation type</param>
            <param name="pivot">Custom pivot position</param>
            <param name="anchors">Control's anchors</param>
        </member>
        <member name="M:GLUControlStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUControlStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLULayeredControlStyle.GetColorTransition(GLUColor,System.Single)">
            <summary>
            Color transiton sequence creator
            </summary>
            <param name="transitionSpeed">Transition speed</param>
            <param name="color">Color to transit</param>
            <returns>Material color sequence with given fade speed. You should not change keyframes of the returned sequence</returns>
        </member>
        <member name="M:GLULayeredControlStyle.GetVisFadeOut(System.Single)">
            <summary>
            Visibility sequence creator
            </summary>
            <param name="fadeSpeed">Fade speed</param>
            <returns>Material color sequence with given fade speed. You should not change keyframes of the returned sequence</returns>
        </member>
        <member name="F:GLULayeredControlStyle.colorShow">
            <summary>
            Sets material color to opaque 
            </summary>
        </member>
        <member name="F:GLULayeredControlStyle.colorHide">
            <summary>
            Sets material color to transparent 
            </summary>
        </member>
        <member name="F:GLULayeredControlStyle.visHide">
            <summary>
            Hides object
            </summary>
        </member>
        <member name="F:GLULayeredControlStyle.visShow">
            <summary>
            Shows object
            </summary>
        </member>
        <member name="M:GLULayeredControlStyle.GetHoveredSet(System.Single,System.Single,GLUColor)">
            <summary>
            Animation set for "hovered" layer by provided fade speed
            </summary>
            <param name="fadeInSpeed">Visibility fade in speed in seconds</param>
            <param name="fadeOutSpeed">Visibility fadeout speed in seconds</param>
            <param name="color">Target color</param>
            <returns>Animation set for hovered layers</returns>
        </member>
        <member name="F:GLULayeredControlStyle.rotation">
            <summary>
            Rotation of textures
            </summary>
        </member>
        <member name="F:GLULayeredControlStyle.layerStyles">
            <summary>
            Graphic layers 
            </summary>
        </member>
        <member name="M:GLULayeredControlStyle.CreateObject">
            <summary>
            Creates object from this style
            </summary>
            <returns>New object</returns>
        </member>
        <member name="M:GLULayeredControlStyle.AddLayerStylesToSheet(GLUStyleSheet)">
            <summary>
            Adds layer styles to provided sheet
            </summary>
            <param name="ss">Parent style sheet</param>
        </member>
        <member name="M:GLULayeredControlStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLULayeredControlStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLULayeredControlStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,GLUBorders,GLUPadding,GLUAnchors,GLURotation)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="normal">Normal texture URL</param>
            <param name="borders">Unstretcheable UV borders</param>
            <param name="padding">Content padding</param>
            <param name="rotation">Control UV rotation</param>
            <param name="anchors">Control anchors</param>
        </member>
        <member name="M:GLULayeredControlStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,System.String,System.String,GLUBorders,GLUPadding,GLUAnchors,GLUAnimationSet,GLURotation,GLUTextStyle,GLUHorizontalAlignment,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="width">Object width</param>
            <param name="height">Object height</param>
            <param name="normal">Normal layer texture</param>
            <param name="hover">Hovered layer texture</param>
            <param name="pressed">Pressed layer texture</param>
            <param name="borders">Textures borders</param>
            <param name="padding">Object padding</param>
            <param name="rotation">Object textures UV rotation</param>
            <param name="textStyle">Text style. Null, if style does not want text</param>
            <param name="textAlign">Text horizontal align</param>
            <param name="fadeInSpeed">Hovered layer fade in speed</param>
            <param name="fadeOutSpeed">Hovered layer fadeout speed</param>
            <param name="activeSet">Animation set for active layer</param>
            <param name="anchors">Control's anchors</param>
            <example>
            This example shows how to use GLUButtonStyle constructor
            <code>
            \code
            GLULayeredControlStyle bs = new GLULayeredControlStyle(GLUStyleSheet.defaultSheet, "button", 0, 0, "GLU/Controls/Textures/Buttons/button_normal", "GLU/Controls/Textures/Buttons/button_hover", "GLU/Controls/Textures/Buttons/button_pressed", new GLUPadding(5), new GLUPadding(5), new GLUAnchors(true, false, true, false), GLURotation.ccw0, new GLUTextStyle("arial", 12, FontStyle.Bold, new GLUColor(1, 1, 1, 1), false));
            bs.AddLayerStylesToSheet(GLUStyleSheet.defaultSheet);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULayeredControlStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="P:GLULayeredControlStyle.normalSet">
            <summary>
            Animation set for "normal" layer
            </summary>
        </member>
        <member name="P:GLULayeredControlStyle.pressedSet">
            <summary>
            Animation set for pressed layer
            </summary>
        </member>
        <member name="P:GLULayeredControlStyle.focusedSet">
            <summary>
            Animation set for pressed layer
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.textStyle">
            <summary>
            Calendar common text style. Used in day table
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.selectedDayImageStyle">
            <summary>
            Selected day primitive style
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.disabledDayImageStyle">
            <summary>
            Selected day primitive style
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.hoveredDayImageSyle">
            <summary>
            Hovered day primitive style
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.prevButtonStyle">
            <summary>
            Previous month button style
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.nextButtonStyle">
            <summary>
            Next month button style
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.monthLabelStyle">
            <summary>
            Current month label style
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.monthsPagesCount">
            <summary>
            Month pages count in day table
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.cols">
            <summary>
            Columns count in day table
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.dayPadding">
            <summary>
            Day buttons padding
            </summary>
        </member>
        <member name="F:GLUCalendarStyle.cultureName">
            <summary>
            Short culture name
            </summary>
        </member>
        <member name="M:GLUCalendarStyle.CreateObject">
            <summary>
            Creates object with this style
            </summary>
            <returns>Newly created object</returns>
        </member>
        <member name="M:GLUCalendarStyle.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUCalendarStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUCalendarStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLUCalendarStyle.CreateDefault">
            <summary>
            Called, when default style sheet is assembled
            </summary>
            <returns>Button style with default content and default name</returns>
        </member>
        <member name="T:GLUButtonsList">
            <summary>
            Buttons list class
            </summary>
        </member>
        <member name="T:GLUControlsList`1">
            <summary>
            Controls list class
            </summary>
        </member>
        <member name="T:IGLUControlsList">
            <summary>
            Common control list interface
            </summary>
        </member>
        <member name="M:IGLUControlsList.UpdateControl(GLUListItem)">
            <summary>
            Internally called to set up one of list control values according to provided list item 
            </summary>
            <param name="li">Provided list item</param>
        </member>
        <member name="F:GLUControlsList`1.OnAddItem">
            <summary>
            Add item action handler
            </summary>
        </member>
        <member name="F:GLUControlsList`1.OnRemoveItem">
            <summary>
            Remove item action handler
            </summary>
        </member>
        <member name="F:GLUControlsList`1.OnItemsChanged">
            <summary>
            This action is called, when items memeber is changed or added od deleted
            </summary>
        </member>
        <member name="M:GLUControlsList`1.SetVertical(System.Boolean)">
            <summary>
            Changes control layout
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLUControlsList`1.SetItemWidth(System.Int32)">
            <summary>
            Sets item size
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLUControlsList`1.SetItemHeight(System.Int32)">
            <summary>
            Sets item size
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLUControlsList`1.SetItems(GLUList{GLUListItem})">
            <summary>
            Internal. Sets up a new items list. 
            </summary>
            <param name="value">New items list</param>
        </member>
        <member name="F:GLUControlsList`1.lastSelectedItem">
            <summary>
            Last selected/deselected item. If no item  was previously selected, contains null 
            </summary>
        </member>
        <member name="F:GLUControlsList`1.multiSelect">
            <summary>
            Allow to select multiple items
            </summary>
        </member>
        <member name="F:GLUControlsList`1.selectedItems">
            <summary>
            If multiselect == true, holds a list of selected items. If you want to select an item from code, you shoud use SelectItem method
            </summary>
        </member>
        <member name="F:GLUControlsList`1.OnSelectionChanged">
            <summary>
            Occurs when selection is changed
            </summary>
        </member>
        <member name="M:GLUControlsList`1.#ctor">
            <summary>
            Parameterless constructor for deserialization purposes
            </summary>
        </member>
        <member name="M:GLUControlsList`1.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle,GLUListItem[])">
            <summary>
            Simple constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>
            <param name="items">Items array or list</param>
            <param name="style">Control style. If null or omitted, default style will be used</param>
        </member>
        <member name="M:GLUControlsList`1.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUControlsList`1.SetItemHandlers(GLUControl)">
            <summary>
            Internal. Sets up item control actions
            </summary>
            <param name="c">Control to set up</param>
        </member>
        <member name="M:GLUControlsList`1.UpdateItemsHandlers">
            <summary>
            Internal. Sets up all items controls 
            </summary>
        </member>
        <member name="M:GLUControlsList`1.AssignControl(GLUListItem)">
            <summary>
            Internal. Searches for visible control and assigns it to provided item
            </summary>
            <param name="li">Item to assign control</param>
        </member>
        <member name="M:GLUControlsList`1.ChildChanged(GLUObject)">
            <summary>
            Called by child after change
            </summary>
            <param name="child">Changed child</param>
        </member>
        <member name="M:GLUControlsList`1.UpdateControl(GLUListItem)">
            <summary>
            Internal. Updates control of provided list item
            </summary>
            <param name="li">List item</param>
        </member>
        <member name="M:GLUControlsList`1.UpdateControl(System.Int32@,System.Int32@,GLUListItem)">
            <summary>
            Internal. Updates list item's control
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="li">List item</param>
        </member>
        <member name="M:GLUControlsList`1.AddItem(System.String,System.Object)">
            <summary>
            Adds item indirect
            </summary>
            <param name="text">Text of item</param>
            <param name="obj">Object, attached to item</param>
        </member>
        <member name="M:GLUControlsList`1.AddItem(GLUListItem)">
            <summary>
            Adds item directly
            </summary>
            <param name="li">Item to add</param>
        </member>
        <member name="M:GLUControlsList`1.RemoveItem(GLUListItem)">
            <summary>
            Removes item
            </summary>
            <param name="li">Item to remove</param>
        </member>
        <member name="M:GLUControlsList`1.SetAutoSize(System.Boolean)">
            <summary>
            Sets up autosize flag and performs all nesessary internal operations
            </summary>
            <param name="value">New autoSize value</param>
        </member>
        <member name="F:GLUControlsList`1.updateItemsInProgress">
            <summary>
            If true, items are updated
            </summary>
        </member>
        <member name="M:GLUControlsList`1.SetWidth(GLUNumber)">
            <summary>
            Sets up new object width and performs all nesessary operations
            </summary>
            <param name="value">New width</param>
        </member>
        <member name="M:GLUControlsList`1.SetHeight(GLUNumber)">
            <summary>
            Sets up new height and performs all nesessary actions
            </summary>
            <param name="value">New height</param>
        </member>
        <member name="M:GLUControlsList`1.UpdateItems(System.Int32)">
            <summary>
            Internal. Updates items, recreating their controls if needed
            </summary>
        </member>
        <member name="M:GLUControlsList`1.CalculatePaddedContentBounds(GLUConstraints,GLUConstraints,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates absolute object bounds in parent space
            </summary>
            <param name="widthConstraints">Width constraints</param>
            <param name="heightConstraints">Height constraints</param>
            <param name="pw">Specified parent width. If omitted, current parent width will be used</param>
            <param name="ph">Specified parent height. If omitted, current parent height will be used</param>
            <returns>Object bounds</returns>
        </member>
        <member name="M:GLUControlsList`1.UpdateAutosizeLayout">
            <summary>
            Updates internal layout and prepares values for refreshing
            </summary>
        </member>
        <member name="M:GLUControlsList`1.UpdateLayout">
            <summary>
            Updates internal layout and prepares values for refreshing
            </summary>
        </member>
        <member name="M:GLUControlsList`1.RefreshControl">
            <summary>
            Refreshes control content
            </summary>
        </member>
        <member name="M:GLUControlsList`1.ClearSelection">
            <summary>
            Clears list of currently selected items
            </summary>
        </member>
        <member name="M:GLUControlsList`1.ResetItemControl(GLUControl)">
            <summary>
            Resets item control
            </summary>
            <param name="c">Control to reset</param>
        </member>
        <member name="M:GLUControlsList`1.ResetState">
            <summary>
            Resets listbox states
            </summary>
        </member>
        <member name="M:GLUControlsList`1.ClearItems">
            <summary>
            Clears items
            </summary>
        </member>
        <member name="M:GLUControlsList`1.SelectItem(GLUListItem)">
            <summary>
            Selects provided Item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GLUControlsList`1.SelectItem(System.Int32)">
            <summary>
            Selects item by provided index
            </summary>
            <param name="index">Item index in items list</param>
        </member>
        <member name="M:GLUControlsList`1.ProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Processes control key code
            </summary>
            <param name="key">Key code to process</param>
        </member>
        <member name="M:GLUControlsList`1.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUControlsList`1.SerializeToNode(System.Xml.XmlDocument,System.Boolean,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <param name="serializeItems">If false, items will not be serialized</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUControlsList`1.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUControlsList`1.Destroy">
            <summary>
            Destroys controls list     
            </summary>
        </member>
        <member name="P:GLUControlsList`1.items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:GLUControlsList`1.OnItemLeave">
            <summary>
            Triggered when cursor leaves item
            </summary>
        </member>
        <member name="P:GLUControlsList`1.OnItemEnter">
            <summary>
            Triggered when cursor enters the item
            </summary>
        </member>
        <member name="P:GLUControlsList`1.OnItemInputReleased">
            <summary>
            Triggered when cursor enters the control
            </summary>
        </member>
        <member name="P:GLUControlsList`1.OnItemInputPressed">
            <summary>
            Triggered when cursor enters the control
            </summary>
        </member>
        <member name="P:GLUControlsList`1.columnsCount">
            <summary>
            Columns count
            </summary>
        </member>
        <member name="P:GLUControlsList`1.horizontalInterval">
            <summary>
            Items horizontal interval
            </summary>
        </member>
        <member name="P:GLUControlsList`1.verticalInterval">
            <summary>
            Items vertical interval
            </summary>
        </member>
        <member name="P:GLUControlsList`1.vertical">
            <summary>
            If true, control list has vertical layout
            </summary>
        </member>
        <member name="P:GLUControlsList`1.itemWidth">
            <summary>
            Item control size
            </summary>
        </member>
        <member name="P:GLUControlsList`1.itemHeight">
            <summary>
            Item control size
            </summary>
        </member>
        <member name="M:GLUButtonsList.SetItemHandlers(GLUControl)">
            <summary>
            Internal. Sets item control list handlers
            </summary>
            <param name="c">Control to process</param>
        </member>
        <member name="M:GLUButtonsList.#ctor">
            <summary>
            Parameterless constructor for deserialization purposes
            </summary>
        </member>
        <member name="M:GLUButtonsList.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle,GLUListItem[])">
            <summary>
            Simple constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>
            <param name="items">Items array or list</param>
            <param name="style">Control style. If null or omitted, default style will be used</param>
            <example>
            This example shows how to use GLUButtonsList constructor
            <code>
            \code
            GLUButtonsList bl = new GLUButtonsList(this, "itemsControl", new GLUNumber(0), new GLUNumber(0), new GLUNumber(0), new GLUNumber(0), true, "button");
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUButtonsList.UpdateControl(System.Int32@,System.Int32@,GLUListItem)">
            <summary>
            Updates item control with provided list item values 
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="li">Provided list item</param>
        </member>
        <member name="M:GLUButtonsList.ResetItemControl(GLUControl)">
            <summary>
            Resets item control state 
            </summary>
            <param name="sender">Item control</param>
        </member>
        <member name="M:GLUButtonsList.SelectItem(GLUListItem)">
            <summary>
            Selects provided item or adds item to selection list if multiSelect == true
            </summary>
            <param name="item">Item to select</param>
        </member>
        <member name="M:GLUButtonsList.ItemSelected(GLUControl)">
            <summary>
            Called, when item control is selected
            </summary>
            <param name="sender">Item control</param>
        </member>
        <member name="M:GLUButtonsList.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUControlsList from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUControlsList</returns>
        </member>
        <member name="M:GLUButtonsList.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default GLUControlsList. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUControlsList with default content</returns>
        </member>
        <member name="P:GLUButtonsList.OnItemButtonPress">
            <summary>
            Called, when item button pressed
            </summary>
        </member>
        <member name="T:GLUWord">
            <summary>
            Document text word
            </summary>
        </member>
        <member name="F:GLUWord.pos">
            <summary>
            Word position in containing text
            </summary>
        </member>
        <member name="F:GLUWord.text">
            <summary>
            Word
            </summary>
        </member>
        <member name="F:GLUWord.rect">
            <summary>
            Word bounds
            </summary>
        </member>
        <member name="F:GLUWord.spaceCount">
            <summary>
            Space count
            </summary>
        </member>
        <member name="M:GLUWord.#ctor(GLUString,GLURect,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="text">Word</param>
            <param name="rect">Word bounds</param>
            <param name="pos">Word position</param>
        </member>
        <member name="M:GLUWord.Destroy">
            <summary>
            Clears content and destroys word
            </summary>
        </member>
        <member name="M:GLUWord.Destroy(GLUWord)">
            <summary>
            Clears content and destroys provided word
            </summary>
            <param name="wrd">Provided word</param>
        </member>
        <member name="M:GLUWord.Update(GLUTextStyle)">
            <summary>
            Recalculates word bounds
            </summary>
            <param name="startTextStyle">Currently set text style </param>
        </member>
        <member name="M:GLUWord.LTrim(GLUTextStyle)">
            <summary>
            Returns new string with all spaces from the left side removed
            </summary>
            <param name="startTextStyle">Currently set text style</param>
        </member>
        <member name="T:GLUMesh">
            <summary>
            Core GLU class. Mesh 
            </summary>
        </member>
        <member name="F:GLUMesh.currentMaterial">
            <summary>
            Global current material
            </summary>
        </member>
        <member name="F:GLUMesh.vertices">
            <summary>
            List of vertices
            </summary>
        </member>
        <member name="F:GLUMesh.uvs">
            <summary>
            List of uvs
            </summary>
        </member>
        <member name="F:GLUMesh.triangles">
            <summary>
            List of triangles
            </summary>
        </member>
        <member name="F:GLUMesh.normals">
            <summary>
            List of normals
            </summary>
        </member>
        <member name="F:GLUMesh.mesh">
            <summary>
            Unity3d native mesh
            </summary>
        </member>
        <member name="F:GLUMesh.vertexLimit">
            <summary>
            Max nesh vertices
            </summary>
        </member>
        <member name="M:GLUMesh.LoadGLUMeshFromUrl(System.String,System.Single)">
            <summary>
            Loads data from provided URL parses it and create a set of GLUMesh instances filled with parse results
            </summary>
            <param name="url">Provided URL</param>
            <param name="scaleCoefficient">Scale coefficient. Each vertex coordinate is multiplied by it</param>
            <returns>Meshes array. If loaded vertex count is larger, than GLUMesh.vertexLimit returns meshes array containing parts of loaded mesh, divided by GLUMesh.vertexLimit vertex count</returns>
        </member>
        <member name="M:GLUMesh.LoadMeshFromUrl(System.String,System.Single)">
            <summary>
            Loads data from provided URL parses it and create a set of Mesh instances filled with parse results
            </summary>
            <param name="url">Provided URL</param>
            <param name="scaleCoefficient">Scale coefficient. Each vertex coordinate is multiplied by it</param>
            <returns>Meshes array. If loaded vertex count is larger, than GLUMesh.vertexLimit returns meshes array containing parts of loaded mesh, divided by GLUMesh.vertexLimit vertex count</returns>
        </member>
        <member name="M:GLUMesh.#ctor(UnityEngine.Mesh,GLUMaterial)">
            <summary>
            Constructor
            </summary>
            <param name="m">Unity3d native mesh</param>
            <param name="mat">Unity3d native material</param>
        </member>
        <member name="M:GLUMesh.#ctor(GLUMesh)">
            <summary>
            Clone constructor
            </summary>
            <param name="m">Mesh to clone</param>
        </member>
        <member name="M:GLUMesh.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUMesh.AddMesh(GLUMesh)">
            <summary>
            Not implemented yet
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:GLUMesh.AddVertex(UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector3)">
            <summary>
            Adds vertex
            </summary>
            <param name="v">Vertex coordinates</param>
            <param name="uv">UV coordinates</param>
            <param name="normal">Vertex normal</param>
            <returns>Vertex id</returns>
        </member>
        <member name="M:GLUMesh.AddTriangle(System.Int32)">
            <summary>
            Adds triangle
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:GLUMesh.Generate">
            <summary>
            Generates unity3d native mesh
            </summary>
        </member>
        <member name="M:GLUMesh.DrawNow(UnityEngine.Matrix4x4)">
            <summary>
            Immediate draw method
            </summary>
            <param name="m">Draw transformation matrix</param>
        </member>
        <member name="M:GLUMesh.Draw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws mesh with provided offset and non-uniform scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUMesh.Draw(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws mesh with provided offset and non-uniform scale
            </summary>
            <param name="offset">Parent draw offset</param>
            <param name="scale">Parent draw scale</param>
            <param name="localOffset">Draw offset</param>
            <param name="localRotation">Draw rotation</param>
            <param name="localScale">Draw scale</param>
            <param name="pivot">Draw transformation pivot</param>
            <param name="rotation">Draw rotation</param>
        </member>
        <member name="M:GLUMesh.Clear">
            <summary>
            Clears vertices, triangles, UVs and normals
            </summary>
        </member>
        <member name="M:GLUMesh.Destroy(GLUMesh,System.Boolean)">
            <summary>
            Destroys mesh
            </summary>
            <param name="m">Mesh to destroy</param>
            <param name="saveMaterial">If true, do not destroys material</param>
        </member>
        <member name="P:GLUMesh.material">
            <summary>
            Mesh material
            </summary>
        </member>
        <member name="P:GLUMesh.vertexCount">
            <summary>
            Vertex count. Read-only
            </summary>
        </member>
        <member name="P:GLUMesh.trianglesCount">
            <summary>
            Triangles count. Read-only
            </summary>
        </member>
        <member name="P:GLUMesh.Item(System.Int32)">
            <summary>
            List of vertices
            </summary>
        </member>
        <member name="P:GLUMesh.tinted">
            <summary>
            Internal use. True, if color != white (1, 1, 1, 1)
            </summary>
        </member>
        <member name="P:GLUMesh.colorComposer">
            <summary>
            Color tint 
            </summary>
        </member>
        <member name="P:GLUMesh.colorMultiplier">
            <summary>
            Color tint 
            </summary>
        </member>
        <member name="P:GLUMesh.empty">
            <summary>
            Mesh empty flag
            </summary>
        </member>
        <member name="T:GLUCollectionEvent">
            <summary>
            Collection event delegate
            </summary>
            <param name="sender">Event source</param>
        </member>
        <member name="T:GLUCollectionItemEvent">
            <summary>
            Collection item event delegate
            </summary>
            <param name="sender">Event source control</param>
            <param name="item">Event source item</param>
        </member>
        <member name="T:GLUList`1">
            <summary>
            List with feedback
            </summary>
            <typeparam name="T">Generic type parameter</typeparam>
        </member>
        <member name="T:IGLUList">
            <summary>
            GLUe List inteface
            </summary>
        </member>
        <member name="M:IGLUList.AddObject(System.Object)">
            <summary>
            Adds object to list. This cause OnChange and OnAdd events firing
            </summary>
            <param name="element">Element to add</param>
        </member>
        <member name="M:GLUList`1.Add(`0)">
            <summary>
            Adds element
            </summary>
            <param name="element">Element to add</param>
        </member>
        <member name="M:GLUList`1.AddObject(System.Object)">
            <summary>
            Adds element
            </summary>
            <param name="element">Element to add</param>
        </member>
        <member name="M:GLUList`1.Remove(`0)">
            <summary>
            Removes element
            </summary>
            <param name="element">Elemant to remove</param>
        </member>
        <member name="M:GLUList`1.RemoveAt(System.Int32)">
            <summary>
            Removes element at provided position
            </summary>
            <param name="index">Item index</param>
        </member>
        <member name="M:GLUList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds collection
            </summary>
            <param name="elements">Collection to add</param>
        </member>
        <member name="P:GLUList`1.Item(System.Int32)">
            <summary>
            Returns element by index
            </summary>
            <param name="index">Zero-based index</param>
            <returns>Element</returns>
        </member>
        <member name="E:GLUList`1.OnChange">
            <summary>
            List change event
            </summary>
        </member>
        <member name="E:GLUList`1.OnAdd">
            <summary>
            On Add event handler. Triggered after adding of new member
            </summary>
        </member>
        <member name="E:GLUList`1.OnRemove">
            <summary>
            On Remove event handler. Triggered after removing member
            </summary>
        </member>
        <member name="T:GLUWaitForSeconds">
            <summary>
            Wait for second instruction. Instruct coroutine to stop execution for provided interval 
            </summary>
        </member>
        <member name="F:GLUWaitForSeconds.interval">
            <summary>
            Wait interval
            </summary>
        </member>
        <member name="F:GLUWaitForSeconds.endTime">
            <summary>
            Wait completion time
            </summary>
        </member>
        <member name="M:GLUWaitForSeconds.#ctor(System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="seconds">Interval in seconds to wait</param>
        </member>
        <member name="T:GLUXmlLink">
            <summary>
            Attribute, which contains path to XML file. Used to link form class and its XML
            </summary>
        </member>
        <member name="F:GLUXmlLink.name">
            <summary>
            Class name 
            </summary>
        </member>
        <member name="F:GLUXmlLink.loadFromUrl">
            <summary>
            If true, project path will be threated as URL
            </summary>
        </member>
        <member name="M:GLUXmlLink.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">Class name</param>
            <param name="loadFromUrl">If true, project path will be threated as URL</param>
            <example>
            This example shows how to use GLUXmlLink 
            <code>
            \code
            [GLUXmlLink("AForm.xml", "Forms/AForm.xml", false)]
            public class AForm : GLUForm
            \endcode
            </code>
            </example>    
        </member>
        <member name="T:GLUAnimationSet">
            <summary>
            A set of animations.
            </summary>
        </member>
        <member name="M:GLUAnimationSet.CreateIndex(GLUControlState,GLUControlState)">
            <summary>
            Creates animation index by given mask and event
            </summary>
            <param name="eventMask">Event mask</param>
            <param name="eventValue">"OR" logical combination of Event mask and Start flag (optionally). Each event contains of transition (eventMask | GLUControlState.start) and idle part (eventMask)</param>
            <returns>Newly created index</returns>
        </member>
        <member name="F:GLUAnimationSet.debug">
            <summary>
            Debug flag. If set to true, internal debug info will be posted to GLUDebug.Log
            </summary>
        </member>
        <member name="F:GLUAnimationSet.name">
            <summary>
            Name of an animation set
            </summary>
        </member>
        <member name="M:GLUAnimationSet.GetAnimation(System.Int32,System.Int32)">
            <summary>
            Searches animations list by provided eventMask and eventValue  
            </summary>
            <param name="eventMask">Event mask</param>
            <param name="eventValue">"OR" logical combination of Event mask and Start flag (optionally). Each event contains of transition (eventMask | GLUControlState.start) and idle part (eventMask)</param>
            <returns>Found animation </returns>
        </member>
        <member name="M:GLUAnimationSet.AddAnimation(GLUAnimation)">
            <summary>
            Adds animation to set
            </summary>
            <param name="value">Animation to add</param>
            <returns>Added animation</returns>
            <example>
            This example shows how to use GLUAnimation constructor
            <code>
            \code
            GLULocalRotationSequence lrs = new GLULocalRotationSequence();
            lrs.AddKey(0.5f, Vector3.zero);
            GLUMaterialColorSequence mcs = new GLUMaterialColorSequence();
            mcs.AddKey(0.33f, new Vector4(1, 1, 1, 1));
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, lrs, mcs));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUAnimationSet.#ctor">
            <summary>
            Parameterless constructor
            </summary>
            <example>
            This example shows how to use a GLUAnimation constructor
            <code>
            \code
            GLULocalRotationSequence lrs = new GLULocalRotationSequence();
            lrs.AddKey(0.5f, Vector3.zero);
            GLUMaterialColorSequence mcs = new GLUMaterialColorSequence();
            mcs.AddKey(0.33f, new Vector4(1, 1, 1, 1));
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, lrs, mcs));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUAnimationSet.#ctor(GLUAnimation[])">
            <summary>
            Constructor
            </summary>
            <param name="animations">Animations array</param>
            <example>
            This example shows how to use a GLUAnimation constructor
            <code>
            \code
            GLULocalRotationSequence lrs = new GLULocalRotationSequence();
            lrs.AddKey(0.5f, Vector3.zero);
            GLUMaterialColorSequence mcs = new GLUMaterialColorSequence();
            mcs.AddKey(0.33f, new Vector4(1, 1, 1, 1));
            GLUAnimationSet glueHUDSet = new GLUAnimationSet(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, lrs, mcs));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUAnimationSet.PrepareSerialization">
            <summary>
            Prepares set for serialization to XML
            </summary>
        </member>
        <member name="M:GLUAnimationSet.PrepareDeserialization">
            <summary>
            Prepares set for deserialization from XML
            </summary>
        </member>
        <member name="M:GLUAnimationSet.CompleteDeserialization">
            <summary>
            Finishes deserialization
            </summary>
        </member>
        <member name="M:GLUAnimationSet.op_Implicit(System.String)~GLUAnimationSet">
            <summary>
            Trys to find animation set with provided name
            </summary>
            <param name="name">Name</param>
            <returns>Aniation set with provided name and null otherwize</returns>
        </member>
        <member name="M:GLUAnimationSet.Clone">
            <summary>
            Creates a shallow copy of animation
            </summary>
            <returns>Shallow copy of animation</returns>
        </member>
        <member name="M:GLUAnimationSet.Destroy">
            <summary>
            Destroys an animation set
            </summary>
        </member>
        <member name="M:GLUAnimationSet.SerializeToString">
            <summary>
            Not implemeented
            </summary>
            <returns>Throws an exception</returns>
        </member>
        <member name="M:GLUAnimationSet.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Internally called by serializer to fill xml node with set content
            </summary>
            <param name="doc">XML Document, for which a node is created</param>
            <param name="nodeName">Name of the node. If oimtted, class name will be used as node name</param>
            <returns>Node</returns>
        </member>
        <member name="M:GLUAnimationSet.Parse(System.Xml.XmlNode)">
            <summary>
            Internally called by deserializer. Parses provided node and fills content of animation set with parse results 
            </summary>
            <param name="n">Xml node</param>
        </member>
        <member name="M:GLUAnimationSet.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates a GLUAnimationSet instance from provided XML node
            </summary>
            <param name="n">XML node</param>
            <returns>An instance of a GLUAnimationSet class</returns> 
        </member>
        <member name="M:GLUAnimationSet.op_Inequality(GLUAnimationSet,GLUAnimationSet)">
            <summary>
            Override over standard inequality operator. Compares two operands by their content 
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>True, if a != b</returns>
        </member>
        <member name="M:GLUAnimationSet.op_Equality(GLUAnimationSet,GLUAnimationSet)">
            <summary>
            Override over standard equality operator. Compares two operands by their content 
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>True, if a == b</returns>
        </member>
        <member name="M:GLUAnimationSet.Equals(System.Object)">
            <summary>
            Overrides over standard Equals method. Uses the == operator internally
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True, if obj == this </returns>
        </member>
        <member name="M:GLUAnimationSet.GetHashCode">
            <summary>
            Overrides over standard GetHashCode method. 
            </summary>
            <returns>Hash value of provided object</returns>
        </member>
        <member name="T:GLUGLUVisibilitySequenceSerializer">
            <summary>
            GLUVisibilitySequence serializer helper
            </summary>
        </member>
        <member name="T:IGLUCustomSerializer">
            <summary>
            Attribute, which indicates, that following class can be used by GLUSerializer/Deserializer for serialization
            </summary>
        </member>
        <member name="M:IGLUCustomSerializer.Deserialize(System.String)">
            <summary>
            Deserializes provided text
            </summary>
            <param name="text">Provided text</param>
            <returns>Deserialization result</returns>
        </member>
        <member name="M:IGLUCustomSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes provided Xml node
            </summary>
            <param name="node">Provided Xml node</param>
            <returns>Deserialization result</returns>
        </member>
        <member name="M:IGLUCustomSerializer.Serialize(System.Object)">
            <summary>
            Serializes provided object to string
            </summary>
            <param name="obj">Provided object</param>
            <returns>String, containing serialized obj</returns>
        </member>
        <member name="M:IGLUCustomSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Serializes provided object to node
            </summary>
            <param name="obj">Provided obj</param>
            <param name="doc">Parent document</param>
            <returns>Serialization results stored in Xml node</returns>
        </member>
        <member name="M:GLUGLUVisibilitySequenceSerializer.Deserialize(System.String)">
            <summary>
            Parses provided text and creates GLUVisibilitySequence instance 
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLUVisibilitySequence instance</returns>
        </member>
        <member name="M:GLUGLUVisibilitySequenceSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Parses provided Xml node and creates GLUVisibilitySequence instance 
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUVisibilitySequence instance</returns>
        </member>
        <member name="M:GLUGLUVisibilitySequenceSerializer.Serialize(System.Object)">
            <summary>
            Converts provided object to string 
            </summary>
            <param name="obj">Provided object</param>
            <returns>Text representation of the object</returns>
        </member>
        <member name="M:GLUGLUVisibilitySequenceSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node and fills it with provided object's content
            </summary>
            <param name="obj">Provided object</param>
            <param name="doc">Parent Xml document</param>
            <returns>Xml node</returns>
        </member>
        <member name="M:GLUGLUVisibilitySequenceSerializer.GetInstance">
            <summary>
            Returns an instance of GLUGLUVisibilitySequenceSerializer
            </summary>
            <returns>New GLUGLUVisibilitySequenceSerializer object</returns>
        </member>
        <member name="T:GLUGLULocalScaleSequenceSerializer">
            <summary>
            GLULocalOffsetSequence serializer helper
            </summary>
        </member>
        <member name="M:GLUGLULocalScaleSequenceSerializer.Deserialize(System.String)">
            <summary>
            Parses provided text and creates GLULocalScaleSequence instance 
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLULocalScaleSequence instance</returns>
        </member>
        <member name="M:GLUGLULocalScaleSequenceSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Parses provided Xml node and creates GLULocalScaleSequence instance 
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLULocalScaleSequence instance</returns>
        </member>
        <member name="M:GLUGLULocalScaleSequenceSerializer.Serialize(System.Object)">
            <summary>
            Converts provided object to string 
            </summary>
            <param name="obj">Provided object</param>
            <returns>Text representation of the object</returns>
        </member>
        <member name="M:GLUGLULocalScaleSequenceSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node and fills it with provided object's content
            </summary>
            <param name="obj">Provided object</param>
            <param name="doc">Parent Xml document</param>
            <returns>Xml node</returns>
        </member>
        <member name="M:GLUGLULocalScaleSequenceSerializer.GetInstance">
            <summary>
            Returns an instance of GLUGLULocalScaleSequenceSerializer
            </summary>
            <returns>New GLUGLULocalScaleSequenceSerializer object</returns>
        </member>
        <member name="T:GLUColorOperand">
            <summary>
            GLU color multiplier. Has implicit constructor and is serializable
            </summary>
        </member>
        <member name="F:GLUColorOperand.r">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:GLUColorOperand.g">
            <summary>
            Green component
            </summary>
        </member>
        <member name="F:GLUColorOperand.b">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:GLUColorOperand.a">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="M:GLUColorOperand.ToString">
            <summary>
            Converts to string (#RRGGBBAA) 
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:GLUColorOperand.TryParse(System.String,GLUColor@)">
            <summary>
            Trys to parse provided string to GLUColor
            </summary>
            <param name="s">String</param>
            <param name="c">Color</param>
            <returns>Try result</returns>
        </member>
        <member name="M:GLUColorOperand.op_Implicit(System.String)~GLUColorOperand">
            <summary>
            Implicit constructor
            </summary>
            <param name="s">String</param>
            <returns>Color</returns>
        </member>
        <member name="M:GLUColorOperand.TryParseColor(System.String)">
            <summary>
            Parses provided string and sets object's fields with parse results
            </summary>
            <param name="s">String</param>
            <returns>True if succesful and false otherwise</returns>
        </member>
        <member name="M:GLUColorOperand.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="r">Red component</param>
            <param name="g">Green component</param>
            <param name="b">Blue component</param>
            <param name="a">Alpha component</param>
        </member>
        <member name="M:GLUColorOperand.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="g">Gray component</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:GLUColorOperand.Equals(System.Object)">
            <summary>
            Checks if provided object is equal to this
            </summary>
            <param name="obj">Provided object</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUColorOperand.op_Multiply(GLUColorOperand,GLUColor)">
            <summary>
            Multiplies operands by components (a.r*b.r, a.g*a.g...)
            </summary>
            <param name="a">First operand</param>
            <param name="b">second operand</param>
            <returns>Multiplication product</returns>
        </member>
        <member name="M:GLUColorOperand.op_Multiply(GLUColorOperand,UnityEngine.Color)">
            <summary>
            Multiplies operands by components (a.r*b.r, a.g*a.g...)
            </summary>
            <param name="a">First operand</param>
            <param name="b">second operand</param>
            <returns>Multiplication product</returns>
        </member>
        <member name="M:GLUColorOperand.op_Addition(GLUColorOperand,UnityEngine.Color)">
            <summary>
            Summarize operands by components (a.r*b.r, a.g*a.g...)
            </summary>
            <param name="a">First operand</param>
            <param name="b">second operand</param>
            <returns>Summarize product</returns>
        </member>
        <member name="M:GLUColorOperand.op_Multiply(GLUColorOperand,System.Single)">
            <summary>
            Multiplies first operand by second one (a.r*b, a.g*b...)
            </summary>
            <param name="a">First operand</param>
            <param name="b">second operand</param>
            <returns>Multiplication product</returns>
        </member>
        <member name="M:GLUColorOperand.op_Multiply(GLUColorOperand,UnityEngine.Vector2)">
            <summary>
            Multiplies first operand by second one (a.r*b.x, a.g*b.x... a.a*b.y)
            </summary>
            <param name="a">First operand</param>
            <param name="b">second operand</param>
            <returns>Multiplication product</returns>
        </member>
        <member name="M:GLUColorOperand.op_Equality(GLUColorOperand,GLUColorOperand)">
            <summary>
            Equality operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUColorOperand.op_Inequality(GLUColorOperand,GLUColorOperand)">
            <summary>
            Non-equality operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUColorOperand.GetHashCode">
            <summary>
            Generates hash codes
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:GLUControlsListItemsEvent">
            <summary>
            Control list items change delegate
            </summary>
            <param name="sender">Event source</param>
            <param name="item">Item is changed</param>
        </member>
        <member name="T:GLUComboControl">
            <summary>
            Base class for all combo controls
            </summary>
        </member>
        <member name="M:GLUComboControl.ShowDropDownControl">
            <summary>
            Shows dropdown control at correct position and sets focus to it 
            </summary>
        </member>
        <member name="M:GLUComboControl.DropDownUnFocus(GLUControl,GLUControl)">
            <summary>
            Unfocus event handler of dropdown control. Internal
            </summary>
            <param name="sender">Event source</param>
            <param name="focusedControl">Newly focused control</param>
        </member>
        <member name="M:GLUComboControl.ComboButtonPress(GLUControl)">
            <summary>
            Combobutton press event handler
            </summary>
            <param name="sender">source of the event</param>
        </member>
        <member name="F:GLUComboControl._textEdit">
            <summary>
            Internal textEdit field
            </summary>
        </member>
        <member name="F:GLUComboControl._dropDownControl">
            <summary>
            Internal drop-down control field. Should be initialized in derived types
            </summary>
        </member>
        <member name="M:GLUComboControl.CreateDropDownControl(GLUComboControlStyle)">
            <summary>
            Internal drop-down control initializer. Should be overriden in derived types
            </summary>
            <param name="style"></param>
        </member>
        <member name="F:GLUComboControl._showComboButton">
            <summary>
            Internal flag. If true, combo button will be displayed.
            </summary>
        </member>
        <member name="F:GLUComboControl._comboButtonOffset">
            <summary>
            Combo button ofset from text editor
            </summary>
        </member>
        <member name="F:GLUComboControl._text">
            <summary>
            Text property value of text editor
            </summary>
        </member>
        <member name="F:GLUComboControl.OnChange">
            <summary>
            Change delegete. Called when text is changed
            </summary>
        </member>
        <member name="M:GLUComboControl.CreateTextEdit(GLUComboControlStyle)">
            <summary>
            Internal method for creation of text editor
            </summary>
            <param name="style">Text edit style</param>
        </member>
        <member name="M:GLUComboControl.CreateComboButton(GLUComboControlStyle)">
            <summary>
            Internal method for combo button creation
            </summary>
            <param name="style">Combo button style</param>
        </member>
        <member name="M:GLUComboControl.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUComboControl.ApplyStyle">
            <summary>
            Common method which apllies style to controls, changing its properties according new style
            </summary>
        </member>
        <member name="M:GLUComboControl.RefreshControl">
            <summary>
            Common method. Used to update control's internal properties and visual appearance reflecting any change of its public properties
            </summary>
        </member>
        <member name="M:GLUComboControl.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUComboControl.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,GLUStyle)">
            <summary>
            Simple constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>    
            <param name="text">Text of combo box</param>
            <param name="style">Style of combo control</param>
        </member>
        <member name="M:GLUComboControl.Contains(UnityEngine.Vector3)">
            <summary>
            Checks if control contains provided point. Check also includes a dropdown control
            </summary>
            <param name="p">provided point</param>
            <returns>True, if point is contained</returns>
        </member>
        <member name="F:GLUComboControl.dropDownOnFocus">
            <summary>
            If true, drop down control will be displayed after focusing
            </summary>
        </member>
        <member name="M:GLUComboControl.Focus(GLUControl,System.Boolean)">
            <summary>
            Internal system method, which is called, when control gets focus
            </summary>
            <param name="sender">Focusing control</param>
            <param name="internalCall">Flag, which indicates, whether current call is made directly from terminal, or it is child-to-parent call</param>
        </member>
        <member name="M:GLUComboControl.UnFocus(GLUControl,GLUControl,System.Boolean)">
            <summary>
            Internal system method, which is called, when control looses focus
            </summary>
            <param name="sender">Focus looser</param>
            <param name="focused">New focused control</param>
            <param name="internalCall">Flag, which indicates, whether current call is made directly from terminal, or it is child-to-parent call</param>
        </member>
        <member name="M:GLUComboControl.TextEditChanged(GLUControl)">
            <summary>
            Called when textedit changes its text
            </summary>
            <param name="sender">Source control</param>
        </member>
        <member name="M:GLUComboControl.Destroy">
            <summary>
            Standard destroy method. Clears control's contents
            </summary>
        </member>
        <member name="M:GLUComboControl.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Internally called by serializer to fill xml node with controls content
            </summary>
            <param name="doc">XML Document, for which a node is created</param>
            <param name="nodeName">Name of the node. If omitted, class name will be used as node name</param>
            <returns>Node</returns>
        </member>
        <member name="M:GLUComboControl.Parse(System.Xml.XmlNode)">
            <summary>
            Internally called by deserializer. Parses provided node and fills content of control with parse results 
            </summary>
            <param name="n">Xml node</param>
        </member>
        <member name="P:GLUComboControl.comboButton">
            <summary>
            Combo button control
            </summary>
        </member>
        <member name="P:GLUComboControl.readOnly">
            <summary>
            Read only flag. If true, textEdit is read only
            </summary>
        </member>
        <member name="P:GLUComboControl.textEdit">
            <summary>
            Text editor property
            </summary>
        </member>
        <member name="P:GLUComboControl.dropDownControl">
            <summary>
            Drop-down control property. Should be initialized in derived types
            </summary>
        </member>
        <member name="P:GLUComboControl.showComboButton">
            <summary>
            If set to true, combo button is displayed. Otherwize, there will be only text editor.
            </summary>
        </member>
        <member name="P:GLUComboControl.comboButtonOffset">
            <summary>
            Combo button ofset from text editor
            </summary>
        </member>
        <member name="P:GLUComboControl.text">
            <summary>
            Text, displayed in text editor
            </summary>
        </member>
        <member name="T:GLUInternalGraphic">
            <summary>
            Base class for all internal graphic primitives.
            </summary>
        </member>
        <member name="T:IGLURenderable">
            <summary>
            Common renderable object interface
            </summary>
        </member>
        <member name="P:IGLURenderable.material">
            <summary>
            Object material
            </summary>
        </member>
        <member name="P:IGLURenderable.visible">
            <summary>
            Object visibility flag
            </summary>
        </member>
        <member name="F:GLUInternalGraphic.drawBorder">
            <summary>
            Debug flag. If true, border will be drawn around graphic 
            </summary>
        </member>
        <member name="F:GLUInternalGraphic.name">
            <summary>
            Graphic name
            </summary>
        </member>
        <member name="M:GLUInternalGraphic.SetStyle(GLUStyle)">
            <summary>
            Internal method used to set up new style
            </summary>
            <param name="style">Style to set up</param>
        </member>
        <member name="M:GLUInternalGraphic.#ctor">
            <summary>
            Paramterless constructor
            </summary>
        </member>
        <member name="M:GLUInternalGraphic.#ctor(System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,GLUHorizontalAlignment,GLUVerticalAlignment,GLUAnimationSet,GLUMaterial)">
            <summary>
            Constructor
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Graphic's width</param>
            <param name="height">Graphic's height</param>
            <param name="padding">Graphic's content padding</param>
            <param name="alignment">Horizontal alignment in container</param>
            <param name="verticalAlignment">Vertical alignment in container</param>
            <param name="name">Graphic's name</param>
            <param name="animationSet">Graphic's animation set</param>
            <param name="material">Graphic's material</param>
        </member>
        <member name="M:GLUInternalGraphic.#ctor(GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUStyle)">
            <summary>
            Constructor
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Graphic width</param>
            <param name="height">Graphic height</param>
            <param name="style">Object style</param>
        </member>
        <member name="M:GLUInternalGraphic.#ctor(GLUInternalGraphic)">
            <summary>
            Duplicator. Creates a shallow copy of provided graphic
            </summary>
            <param name="source">Provided graphic</param>
        </member>
        <member name="M:GLUInternalGraphic.#ctor(GLUInternalGraphicStyle)">
            <summary>
            Constructor
            </summary>
            <param name="style">Internal graphic style</param>
        </member>
        <member name="M:GLUInternalGraphic.CompleteDeserialization">
            <summary>
            Called by GLUDeserializer after deserialization 
            </summary>
        </member>
        <member name="M:GLUInternalGraphic.SetValues(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding)">
            <summary>
            Sets up values at once and refreshes object. Use it to reduce Refresh calls
            </summary>
            <param name="parent">Graphic parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Graphic width</param>
            <param name="height">Graphic height</param>
            <param name="padding">Graphic padding</param>
        </member>
        <member name="M:GLUInternalGraphic.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUInternalGraphic.SetValues(GLUObject,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,GLUHorizontalAlignment,GLUVerticalAlignment,GLUAnimationSet,GLUStyle)">
            <summary>
            Sets values of an object
            </summary>
            <param name="parent">Parent</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of an object</param>
            <param name="height">Height of an object</param>
            <param name="padding">Object's content padding</param>
            <param name="alignment">Horizontal alignment</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <param name="animationSet">Graphic's animation set</param>
            <param name="style">Graphic's style</param>
        </member>
        <member name="M:GLUInternalGraphic.DrawSelectedMesh(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws editor selected mesh
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUInternalGraphic.Draw(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws label with provided offset and scale stretched non-uniformely
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="pivot">Draw pivot</param>
            <param name="rotation">Draw rotation</param>
        </member>
        <member name="M:GLUInternalGraphic.StartAnimation(System.Int32,System.Int32)">
            <summary>
            Searches for apropriate animation in animationSet using combination of eventMask and eventValue keys. If found one, starts it. 
            Target key is OR combination of eventValue &lt;&lt; 16 and eventMask 
            </summary>
            <param name="eventMask">Event mask</param>
            <param name="eventValue">Event value</param>
        </member>
        <member name="M:GLUInternalGraphic.Destroy">
            <summary>
            Destroys label, setting its content to null
            </summary>
        </member>
        <member name="M:GLUInternalGraphic.SerializeToString">
            <summary>
            Returns an empty string. Internal graphic doesn't allows serialization to string yet.
            </summary>
            <returns>Empty string</returns>
        </member>
        <member name="M:GLUInternalGraphic.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes object to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUInternalGraphic.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling object's content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUInternalGraphic.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUInternalGraphic.Assign(GLUInternalGraphic)">
            <summary>
            Assigns content from provided graphic
            </summary>
            <param name="ig">Provided graphic</param>
        </member>
        <member name="M:GLUInternalGraphic.Clone">
            <summary>
            Creates a shallow copy of primitive
            </summary>
            <returns>Shallow copy of primitive</returns>
        </member>
        <member name="M:GLUInternalGraphic.ToString">
            <summary>
            Returns string representation. Usually &lt;Type name&gt;(&lt;graphic name&gt;)
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="P:GLUInternalGraphic.acceptsChildren">
            <summary>
            If true, can accept children
            </summary>
        </member>
        <member name="P:GLUInternalGraphic.material">
            <summary>
            Material
            </summary>
        </member>
        <member name="P:GLUInternalGraphic.animationSet">
            <summary>
            Animation set
            </summary>
        </member>
        <member name="T:GLUAnchors">
            <summary>
            Anchors. Controls object behaviour, when parent changes its size 
            </summary>
        </member>
        <member name="F:GLUAnchors.left">
            <summary>
            Left anchor flag
            </summary>
        </member>
        <member name="F:GLUAnchors.right">
            <summary>
            Right anchor flag
            </summary>
        </member>
        <member name="F:GLUAnchors.top">
            <summary>
            Top anchor flag
            </summary>
        </member>
        <member name="F:GLUAnchors.bottom">
            <summary>
            Bottom anchor flag
            </summary>
        </member>
        <member name="M:GLUAnchors.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left anchor flag</param>
            <param name="right">Right anchor flag</param>
            <param name="top">Top anchor flag</param>
            <param name="bottom">Bottom anchor flag</param>
        </member>
        <member name="M:GLUAnchors.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text">Serialized anchor</param>
        </member>
        <member name="M:GLUAnchors.ToString">
            <summary>
            Converts to string
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="T:GLUObjectEvent">
            <summary>
            Object event delegate
            </summary>
            <param name="sender">Event source</param>
        </member>
        <member name="T:GLUVisualControlAttribute">
            <summary>
            Attribute, which indicates, that provided class is visual control class 
            </summary>
        </member>
        <member name="F:GLUVisualControlAttribute.tabName">
            <summary>
            Tab name in controls list window
            </summary>
        </member>
        <member name="M:GLUVisualControlAttribute.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="tabName">Tab name in controls list window</param>
            <example>
            This example shows how to use GLUVisualControlAttribute 
            <code>
            \code
            [GLUVisualControl("Buttons")]
            public class GLUButton: GLUButton
            \endcode
            </code>
            </example>
        </member>
        <member name="T:GLUEditableText">
            <summary>
            Base text, not clipped. Should be wrapped into GLUScrollView. Or kind of
            </summary>
        </member>
        <member name="T:IGLUEditableText">
            <summary>
            Common editable text interface 
            </summary>
        </member>
        <member name="P:IGLUEditableText.selectionMeshMaterial">
            <summary>
            Selected mesh material
            </summary>
        </member>
        <member name="F:GLUEditableText.allowSelection">
            <summary>
            If set to true, user can select text by dragging cursor
            </summary>
        </member>
        <member name="F:GLUEditableText.allowDragSelection">
            <summary>
            If set to true, user can drag selection
            </summary>
        </member>
        <member name="F:GLUEditableText.rowIntervalDelta">
            <summary>
            Interval between rows in multiline text. Real pixel interval = charHeight*rowIntervalDelta 
            </summary>
        </member>
        <member name="F:GLUEditableText.wordWrap">
            <summary>   
            Not implemented yet
            </summary>
        </member>
        <member name="F:GLUEditableText.rows">
            <summary>
            Row list if multiline
            </summary>
        </member>
        <member name="F:GLUEditableText.cursorMesh">
            <summary>
            Text cursor
            </summary>
        </member>
        <member name="F:GLUEditableText.cursorPosition">
            <summary>
            Cursor position in text
            </summary>
        </member>
        <member name="F:GLUEditableText.cursorCoords">
            <summary>
            Cursor coordinates in local system
            </summary>
        </member>
        <member name="F:GLUEditableText.startChar">
            <summary>
            Start char of selection
            </summary>
        </member>
        <member name="F:GLUEditableText.endChar">
            <summary>
            End char of selection
            </summary>
        </member>
        <member name="F:GLUEditableText.selectionMesh">
            <summary>
            Selection mesh
            </summary>
        </member>
        <member name="F:GLUEditableText.textMesh">
            <summary>
            Text mesh
            </summary>
        </member>
        <member name="F:GLUEditableText.selectionText">
            <summary>
            Selected text
            </summary>
        </member>
        <member name="F:GLUEditableText.cursorChar">
            <summary>
            Character under cursor
            </summary>
        </member>
        <member name="F:GLUEditableText.selectedRows">
            <summary>
            Rows, affecten by selection
            </summary>
        </member>
        <member name="F:GLUEditableText.OnChange">
            <summary>
            Change text delegate
            </summary>
        </member>
        <member name="M:GLUEditableText.SetText(System.String)">
            <summary>
            Internal. Sets text property and updates visuals
            </summary>
            <param name="value">New text value</param>
        </member>
        <member name="M:GLUEditableText.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,System.Boolean,System.String,System.Boolean,System.Boolean,GLUStyle)">
            <summary>
            Constructor with full set of props
            </summary>
            <param name="parent">Control parent</param>
            <param name="name">Control name</param>
            <param name="multiline">If true, control text is multiline</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="text">Control text</param>
            <param name="readOnly">If true, user cannot change control's content</param>
            <param name="style">Control style</param>
            <param name="visible">Visibility flag</param>
        </member>
        <member name="M:GLUEditableText.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUEditableText.ApplyStyle">
            <summary>
            Internal method. Used to make this control adequate to its style
            </summary>
        </member>
        <member name="M:GLUEditableText.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal use
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUEditableText.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUEditableText.Focus(GLUControl,System.Boolean)">
            <summary>
            Internal focus. Use with caution
            </summary>
            <param name="sender">Control to focus</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUEditableText.SetTextStyle(GLUTextStyle)">
            <summary>
            Sets text style property
            </summary>
            <param name="value">New text style</param>
        </member>
        <member name="M:GLUEditableText.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw method. Provides coordinates of visible frame. If control child doesn't intersects with visible frame, there is no need to draw it/ 
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="maxX">maxX coordinate of visible frame</param>
            <param name="maxY">maxY coordinate of visible frame</param>
            <param name="minX">minX coordinate of visible frame</param>
            <param name="minY">minY coordinate of visible frame</param>
        </member>
        <member name="M:GLUEditableText.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draw method.
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUEditableText.RefreshLayeredTextControl">
            <summary>
            Overrides base method. Generates text mesh
            </summary>
        </member>
        <member name="M:GLUEditableText.GetCharacterByTextPosition(System.Int32)">
            <summary>
            Return internal character by its position in text
            </summary>
            <param name="position">Character position in text</param>
            <returns>Character</returns>
        </member>
        <member name="M:GLUEditableText.ProcessChar(System.Char)">
            <summary>
            Internal char processing routine
            </summary>
            <param name="character">Char to process</param>
        </member>
        <member name="M:GLUEditableText.UpdateCursorPosition">
            <summary>
            Updates cursor position after selection or text changes
            </summary>
        </member>
        <member name="M:GLUEditableText.ProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Internal Process control key (Alt, Ctrl, Arrows, ets.) 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:GLUEditableText.InputReleased(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal input released
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUEditableText.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal start drag
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUEditableText.Drag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal drag
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUEditableText.EndDrag(GLUControl,System.Boolean)">
            <summary>
            Internal end drag
            </summary>
            <param name="target">Drop target</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUEditableText.GetRowByCoordinates(UnityEngine.Vector3)">
            <summary>
            Return row by coordinates
            </summary>
            <param name="mp">Local coordinates</param>
            <returns>Nearest row</returns>
        </member>
        <member name="M:GLUEditableText.ClearSelection">
            <summary>
            Clears selection
            </summary>
        </member>
        <member name="M:GLUEditableText.SetSelection(GLUTextCharacter,GLUTextCharacter)">
            <summary>
            Sets selection 
            </summary>
            <param name="startCharacter"></param>
            <param name="endCharacter"></param>
        </member>
        <member name="M:GLUEditableText.GetCharacterByCoordinates(UnityEngine.Vector3)">
            <summary>
            Return character, which bounds contains provided local coordinates
            </summary>
            <param name="mp">Coordinates in local space</param>
            <returns>Nearest character</returns>
        </member>
        <member name="M:GLUEditableText.Destroy">
            <summary>
            Destroys editable text
            </summary>
        </member>
        <member name="M:GLUEditableText.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUEditableText.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUEditableText.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default GLUEditableText. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUEditableText with default content</returns>
        </member>
        <member name="P:GLUEditableText.textAlignment">
            <summary>
            Horizontal text alignment
            </summary>
        </member>
        <member name="P:GLUEditableText.textVerticalAlignment">
            <summary>
            Vertical text alignment
            </summary>
        </member>
        <member name="P:GLUEditableText.selectionMeshMaterial">
            <summary>
            Text selection material
            </summary>
        </member>
        <member name="P:GLUEditableText.multiLine">
            <summary>
            Determines if text is multiline
            </summary>
        </member>
        <member name="P:GLUEditableText.readOnly">
            <summary>
            If set to true, user cannot change text of control
            </summary>
        </member>
        <member name="T:GLUListBoxStyle">
            <summary>
            List box style
            </summary>
        </member>
        <member name="T:GLUScrollViewStyle">
            <summary>
            Scroll view style
            </summary>
        </member>
        <member name="F:GLUScrollViewStyle.horScrollBarStyle">
            <summary>
            Horizontal scrollbar style link
            </summary>
        </member>
        <member name="F:GLUScrollViewStyle.vertScrollBarStyle">
            <summary>
            Vertical scrollbar style link
            </summary>
        </member>
        <member name="F:GLUScrollViewStyle.useSharedRenderTexture">
            <summary>
            If true, common render texture will be used
            </summary>
        </member>
        <member name="F:GLUScrollViewStyle.showHorScrollBar">
            <summary>
            If true, horizontal scrollbar will be displayed
            </summary>
        </member>
        <member name="F:GLUScrollViewStyle.showVertScrollBar">
            <summary>
            If true, vertical scrollbar will be displayed
            </summary>
        </member>
        <member name="F:GLUScrollViewStyle.vertScrollBarOffset">
            <summary>
            Vertical scrollbar offset
            </summary>
        </member>
        <member name="F:GLUScrollViewStyle.horScrollBarOffset">
            <summary>
            Horizontal scrollbar offset
            </summary>
        </member>
        <member name="M:GLUScrollViewStyle.#ctor">
            <summary>
            Parameterless constructor for deserialization
            </summary>
        </member>
        <member name="M:GLUScrollViewStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,System.String,System.String,GLUBorders,GLUPadding,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,GLURotation,System.Int32,System.Int32)">
            <summary>
            scroll view style constructor
            </summary>
            <param name="sheet">Parent sheets table</param>
            <param name="name">Style name</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="normal">Normal layer texture</param>
            <param name="hover">Hovered layer texture</param>
            <param name="active">Focused layer texture</param>
            <param name="borders">Texture unstretcheable borders</param>
            <param name="padding">Control's content padding</param>
            <param name="showHorScrollBar">If true, horizontal scrollbar will be displayed</param>
            <param name="showVertScrollBar">If true, vertical scrollbar will be displayed</param>
            <param name="useSharedRenderTexture">If true, common render texture will be used</param>
            <param name="horScrollBarStyle">Horizontal scrollbar style</param>
            <param name="vertScrollBarStyle">Vertical scrollbar style</param>
            <param name="rotation">UV rotation</param>
            <param name="hScrollBarOffset">Horizontal scrollbar offset</param>
            <param name="vScrollBarOffset">Vertical scrollbar offset</param>
            <example>
            This example shows how to use a GLUScrollViewStyle constructor
            <code>
            \code
            GLUScrollViewStyle csvs = new GLUScrollViewStyle(GLUStyleSheet.defaultSheet, "scrollView", 0, 0, @"GLU/Controls/Textures/ScrollView/normalBg", /*@"GLU/Controls/Textures/ScrollView/normalBg"*/ "", @"GLU/Controls/Textures/ScrollView/focusedBg", new GLUPadding(6), new GLUPadding(4));
            csvs.AddLayerStylesToSheet(GLUStyleSheet.defaultSheet);
            return csvs;
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUScrollViewStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Internally called by serialized to check if object is adequate to provided style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited check will be called</param>
            <returns>True, if obj is adequate to provided style</returns>
        </member>
        <member name="M:GLUScrollViewStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created scrollview style</returns>
        </member>
        <member name="P:GLUScrollViewStyle.normalSet">
            <summary>
            Normal layer animation set
            </summary>
        </member>
        <member name="P:GLUScrollViewStyle.focusedSet">
            <summary>
            Focused layer animation set
            </summary>
        </member>
        <member name="F:GLUListBoxStyle.itemsControlStyle">
            <summary>
            Items control style
            </summary>
        </member>
        <member name="M:GLUListBoxStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Internally called by serialized to check if object is adequate to provided style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited check will be called</param>
            <returns>True, if obj is adequate to provided style</returns>
        </member>
        <member name="M:GLUListBoxStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUListBoxStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,System.String,System.String,GLUBorders,GLUPadding,GLUButtonStyle,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,GLURotation,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent sheets table</param>
            <param name="name">Style name</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="normal">Normal layer texture</param>
            <param name="hover">Hovered layer texture</param>
            <param name="active">Focused layer texture</param>
            <param name="borders">Texture unstretcheable borders</param>
            <param name="padding">Control's content padding</param>
            <param name="showHorScrollBar">If true, horizontal scrollbar will be displayed</param>
            <param name="showVertScrollBar">If true, vertical scrollbar will be displayed</param>
            <param name="useSharedRenderTexture">If true, common render texture will be used</param>
            <param name="horScrollBarStyle">Horizontal scrollbar style</param>
            <param name="vertScrollBarStyle">Vertical scrollbar style</param>
            <param name="rotation">UV rotation</param>
            <param name="hScrollBarOffset">Horizontal scrollbar offset</param>
            <param name="vScrollBarOffset">Vertical scrollbar offset</param>
            <param name="itemsControlStyle">Items control style</param>
        </member>
        <member name="M:GLUListBoxStyle.CreateDefault">
            <summary>
            Creates default style for GLUListBox
            </summary>
            <returns>Newly created style</returns>
        </member>
        <member name="T:GLUCheckBoxStyle">
            <summary>
            Check box style
            </summary>
        </member>
        <member name="T:GLUButtonStyle">
            <summary>
            Button style
            </summary>
        </member>
        <member name="F:GLUButtonStyle.toggle">
            <summary>
            If set to true, button will keep its state after input released 
            </summary>
        </member>
        <member name="F:GLUButtonStyle.pressed">
            <summary>
            Pressed flag. If true, button will be pressed 
            </summary>
        </member>
        <member name="M:GLUButtonStyle.CreateObject">
            <summary>
            Creates button with this style
            </summary>
            <returns>New button</returns>
        </member>
        <member name="M:GLUButtonStyle.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUButtonStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUButtonStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,System.String,System.String,GLUBorders,GLUPadding,GLURotation,GLUTextStyle,GLUHorizontalAlignment,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="width">Object width</param>
            <param name="height">Object height</param>
            <param name="normal">Normal layer texture</param>
            <param name="hover">Hovered layer texture</param>
            <param name="pressed">Pressed layer texture</param>
            <param name="borders">Textures borders</param>
            <param name="padding">Object padding</param>
            <param name="rotation">Object textures UV rotation</param>
            <param name="textStyle">Text style. Null, if style does not want text</param>
            <param name="textAlign">Text horizontal align</param>
            <param name="fadeInSpeed">Hovered layer fade in speed</param>
            <param name="fadeOutSpeed">Hovered layer fadeout speed</param>
            <example>
            This example shows how to use GLUButtonStyle constructor
            <code>
            \code
            GLUButtonStyle bs = new GLUButtonStyle(GLUStyleSheet.defaultSheet, "button", 0, 0, "GLU/Controls/Textures/Buttons/button_normal", "GLU/Controls/Textures/Buttons/button_hover", "GLU/Controls/Textures/Buttons/button_pressed", new GLUPadding(5), new GLUPadding(5), GLURotation.ccw0, new GLUTextStyle("arial", 12, FontStyle.Bold, new GLUColor(1, 1, 1, 1), false));
            bs.AddLayerStylesToSheet(GLUStyleSheet.defaultSheet);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUButtonStyle.GetLayerStyle(System.String)">
            <summary>
            Searches layer styles for style with provided object name and returns it, if found  
            </summary>
            <param name="objectName">Object name </param>
            <returns>Stye, if found any and null otherwize</returns>
        </member>
        <member name="M:GLUButtonStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLUButtonStyle.CreateDefault">
            <summary>
            Called, when default style sheet is assembled
            </summary>
            <returns>Button style with default content and default name</returns>
        </member>
        <member name="P:GLUButtonStyle.textStyle">
            <summary>
            Text style 
            </summary>
        </member>
        <member name="M:GLUCheckBoxStyle.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUCheckBoxStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,System.String,System.String,GLUBorders,GLUPadding,GLURotation,GLUTextStyle,GLUHorizontalAlignment,System.Single)">
            <summary>
            Constructor
            </summary>
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="width">Object width</param>
            <param name="height">Object height</param>
            <param name="normal">Normal layer texture</param>
            <param name="hover">Hovered layer texture</param>
            <param name="pressed">Pressed layer texture</param>
            <param name="borders">Textures borders</param>
            <param name="padding">Object padding</param>
            <param name="rotation">Object textures UV rotation</param>
            <param name="textStyle">Text style. Null, if style does not want text</param>
            <param name="textAlign">Text horizontal align</param>
            <param name="fadeSpeed">Fade speed</param>
        </member>
        <member name="M:GLUCheckBoxStyle.CreateDefault">
            <summary>
            Called, when default style sheet is assembled
            </summary>
            <returns>Button style with default content and default name</returns>
        </member>
        <member name="T:GLUPictureAlignment">
            <summary>
            Picture alignment
            </summary>
        </member>
        <member name="F:GLUPictureAlignment.left">
            <summary>
            Picture appears on the left side of text
            </summary>
        </member>
        <member name="F:GLUPictureAlignment.above">
            <summary>
            Picture appears above text
            </summary>
        </member>
        <member name="F:GLUPictureAlignment.right">
            <summary>
            Picture appears on the right side of text
            </summary>
        </member>
        <member name="F:GLUPictureAlignment.below">
            <summary>
            Picture appears below text
            </summary>
        </member>
        <member name="F:GLUPictureAlignment.backward">
            <summary>
            Picture appears on the back
            </summary>
        </member>
        <member name="T:GLUInternalLabel">
            <summary>
            Legacy class for text with background
            </summary>
        </member>
        <member name="F:GLUInternalLabel.backgroundMesh">
            <summary>
            Background mesh - usually polygon with background texture 
            </summary>
        </member>
        <member name="F:GLUInternalLabel.glyphMesh">
            <summary>
            Glyph mesh - usually polygon with glyph texture 
            </summary>
        </member>
        <member name="F:GLUInternalLabel.foregroundMesh">
            <summary>
            Foreground mesh - usually set of polygons with letter textures
            </summary>
        </member>
        <member name="F:GLUInternalLabel.visibleTextLength">
            <summary>
            Visbile text length, which fits into width of label. Not implemented yet
            </summary>
        </member>
        <member name="M:GLUInternalLabel.#ctor(GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.String,GLUTextStyle,GLUTexture,GLUBorders,GLURotation,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Label width</param>
            <param name="height">Label height</param>
            <param name="padding">Label content padding</param>
            <param name="text">Text</param>
            <param name="textStyle">Text style</param>
            <param name="bgTexture">Label background texture</param>
            <param name="backgroundBorders">Label background borders</param>
            <param name="rotation">Label backrgound rotation</param>
            <param name="textAlign">Text horizontal alignment</param>
            <param name="textVerticalAlign">Vertical text alignment</param>
        </member>
        <member name="M:GLUInternalLabel.#ctor(GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.String,GLUTextStyle,GLUTexture,GLUBorders,GLURotation,GLUTexture,System.Int32,System.Int32,GLURect,GLUPictureAlignment,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Label width</param>
            <param name="height">Label height</param>
            <param name="padding">Label content padding</param>
            <param name="text">Text</param>
            <param name="textStyle">Text style</param>
            <param name="bgTexture">Label background texture</param>
            <param name="backgroundBorders">Label background borders</param>
            <param name="rotation">Label backrgound rotation</param>
            <param name="textAlign">Text horizontal alignment</param>
            <param name="textVerticalAlign">Vertical text alignment</param>
            <param name="glyphTexture">Internal label glyph</param>
            <param name="glyphAlignment">Glyph position relative to text (left, right, above, below ..) </param>
            <param name="glyphRect">Glyph display rect in local space</param>
            <param name="textOffsetX">Text horizontal offset</param>
            <param name="textOffsetY">Text vertical offset</param>
        </member>
        <member name="M:GLUInternalLabel.SetValues(GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.String,GLUTextStyle,GLUTexture,GLUBorders,GLURotation,GLUTexture,System.Int32,System.Int32,GLURect,GLUPictureAlignment,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Batch set of all properties
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Label width</param>
            <param name="height">Label height</param>
            <param name="padding">Content padding</param>
            <param name="text">Label text</param>
            <param name="textStyle">Label text style</param>
            <param name="bgTexture">Background texture</param>
            <param name="backgroundBorders">Unstretheable UV borders</param>
            <param name="rotation">Texture UV rotation</param>
            <param name="glyphTexture">Glyph texture</param>
            <param name="textOffsetX">Text horizontal offset</param>
            <param name="textOffsetY">Text vertical offset</param>
            <param name="glyphRect">Glyph rect</param>
            <param name="glyphAlignment">Glyph alignment (left, above, right, below, backward)</param>
            <param name="textAlign">Text horizontal alignmet</param>
            <param name="textVerticalAlign">Text vertical alignment</param>
        </member>
        <member name="M:GLUInternalLabel.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUInternalLabel.Draw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws label with provided offset and scale stretched non-uniformely
            </summary>
            <param name="offset">Offset</param>
            <param name="scale">Scale</param>
        </member>
        <member name="M:GLUInternalLabel.RefreshObject">
            <summary>
            Generates meshes
            </summary>
        </member>
        <member name="M:GLUInternalLabel.GenerateRows(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{GLUInternalLabel.Row})">
            <summary>
            Generates text rows
            </summary>
            <param name="x">Horizontal start pos</param>
            <param name="y">Vertical start pos</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="rows">Rows to generate</param>
        </member>
        <member name="M:GLUInternalLabel.Destroy">
            <summary>
            Destroys label, setting its content to null
            </summary>
        </member>
        <member name="M:GLUInternalLabel.Show">
            <summary>
            Shows object
            </summary>
        </member>
        <member name="M:GLUInternalLabel.Hide">
            <summary>
            Hides object
            </summary>
        </member>
        <member name="P:GLUInternalLabel.verticalAlignment">
            <summary>
            Vertical alignment of text
            </summary>
        </member>
        <member name="P:GLUInternalLabel.contentAlignment">
            <summary>
            Horizontal alignment of text
            </summary>
        </member>
        <member name="P:GLUInternalLabel.textStyle">
            <summary>
            Current text style
            </summary>
        </member>
        <member name="P:GLUInternalLabel.rotation">
            <summary>
            Rotation angle of background texture
            </summary>
        </member>
        <member name="P:GLUInternalLabel.text">
            <summary>
            Text of label
            </summary>
        </member>
        <member name="P:GLUInternalLabel.backgroundBorders">
            <summary>
            Background borders. If you want non-stretching borders in you background texture, set them there.
            </summary>
        </member>
        <member name="P:GLUInternalLabel.backgroundTexture">
            <summary>
            Background texture
            </summary>
        </member>
        <member name="P:GLUInternalLabel.glyphTexture">
            <summary>
            Glyph texture
            </summary>
        </member>
        <member name="P:GLUInternalLabel.glyphAlignment">
            <summary>
            Glyph alignment in relation to text
            </summary>
        </member>
        <member name="P:GLUInternalLabel.textOffsetX">
            <summary>
            Horizontal text offset
            </summary>
        </member>
        <member name="P:GLUInternalLabel.textOffsetY">
            <summary>
            Vertical text offset
            </summary>
        </member>
        <member name="P:GLUInternalLabel.glyphRect">
            <summary>
            Glyph rect. Width and height are absolute, x and y are relative 
            </summary>
        </member>
        <member name="T:GLUFontStyle">
            <summary>
            Internal font style
            </summary>
        </member>
        <member name="F:GLUFontStyle.Normal">
            <summary>
            Normal font
            </summary>
        </member>
        <member name="F:GLUFontStyle.NormalUnderline">
            <summary>
            Normal underline
            </summary>
        </member>
        <member name="F:GLUFontStyle.Bold">
            <summary>
            Bold font
            </summary>
        </member>
        <member name="F:GLUFontStyle.BoldUnderline">
            <summary>
            Bold underline
            </summary>
        </member>
        <member name="T:GLUUVRect">
            <summary>
            UV rect
            </summary>
        </member>
        <member name="F:GLUUVRect.uMin">
            <summary>
            Min U coordinate
            </summary>
        </member>
        <member name="F:GLUUVRect.uMax">
            <summary>
            Max U coordinate
            </summary>
        </member>
        <member name="F:GLUUVRect.vMin">
            <summary>
            Min V coordinate
            </summary>
        </member>
        <member name="F:GLUUVRect.vMax">
            <summary>
            Max V coordinate
            </summary>
        </member>
        <member name="M:GLUUVRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="uMin">Min U coordinate</param>
            <param name="uMax">Max U coordinate</param>
            <param name="vMin">Min V coordinate</param>
            <param name="vMax">Max V coordinate</param>
        </member>
        <member name="M:GLUUVRect.ToString">
            <summary>
            Converts this rect to string. (uMin=0, vMin=0, uMax=1, vMax==1), for example
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="P:GLUUVRect.zero">
            <summary>
            Predefined zero rect
            </summary>
        </member>
        <member name="T:GLUFontUVRect">
            <summary>
            Font UV rect
            </summary>
        </member>
        <member name="F:GLUFontUVRect.uMin">
            <summary>
            Min U coordinate
            </summary>
        </member>
        <member name="F:GLUFontUVRect.uMax">
            <summary>
            Max U coordinate
            </summary>
        </member>
        <member name="F:GLUFontUVRect.vMin">
            <summary>
            Min V coordinate
            </summary>
        </member>
        <member name="F:GLUFontUVRect.vMax">
            <summary>
            Max V coordinate
            </summary>
        </member>
        <member name="F:GLUFontUVRect.rWidth">
            <summary>
            Real symbol width (non-overlapping)
            </summary>
        </member>
        <member name="F:GLUFontUVRect.rHeight">
            <summary>
            Real symbol height (non-overlapping)
            </summary>
        </member>
        <member name="M:GLUFontUVRect.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="uMin">Min U coordinate</param>
            <param name="uMax">Max U coordinate</param>
            <param name="vMin">Min V coordinate</param>
            <param name="vMax">Max V coordinate</param>
            <param name="realWidth">Real letter width (non-overlapping)</param>
            <param name="realHeight">Real symbol height (non-overlapping)</param>
        </member>
        <member name="M:GLUFontUVRect.ToString">
            <summary>
            Converts uv rect to string
            </summary>
            <returns>String representation</returns>
        </member>
        <member name="M:GLUFontUVRect.ReadFromStream(System.IO.BinaryReader)">
            <summary>
            Reads an UV rect form provided stream reader
            </summary>
            <param name="reader">Stream reader</param>
            <returns>New GLUFontUVRect instance</returns>
        </member>
        <member name="M:GLUFontUVRect.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes this instance of GLUFontUVRect to provided stream writer
            </summary>
            <param name="writer">Stream writer</param>
        </member>
        <member name="P:GLUFontUVRect.zero">
            <summary>
            Predefined zero uv rect
            </summary>
        </member>
        <member name="T:GLULetterInfo">
            <summary>
            Letter info
            </summary>
        </member>
        <member name="F:GLULetterInfo.normalRect">
            <summary>
            Normal UV rect
            </summary>
        </member>
        <member name="F:GLULetterInfo.boldRect">
            <summary>
            Bold UV rect
            </summary>
        </member>
        <member name="F:GLULetterInfo.normalUnderlineRect">
            <summary>
            Normal underline UV rect
            </summary>
        </member>
        <member name="F:GLULetterInfo.boldUnderlineRect">
            <summary>
            Bold underline UV rect
            </summary>
        </member>
        <member name="F:GLULetterInfo.letter">
            <summary>
            Letter
            </summary>
        </member>
        <member name="M:GLULetterInfo.#ctor(System.Char,GLUFontUVRect,GLUFontUVRect,GLUFontUVRect,GLUFontUVRect)">
            <summary>
            Creates letter info
            </summary>
            <param name="letter">Letter</param>
            <param name="normalRect">Normal UV rect</param>
            <param name="boldRect"> Bold UV rect</param>
            <param name="normalUnderlineRect">Normal underline UV rect</param>
            <param name="boldUnderlineRect">Bold underline UV rect</param>
        </member>
        <member name="M:GLULetterInfo.#ctor">
            <summary>
            Parameterless constructor. 
            </summary>
        </member>
        <member name="M:GLULetterInfo.ToString">
            <summary>
            Converts letter info to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLULetterInfo.GetUVRect(UnityEngine.FontStyle,System.Boolean)">
            <summary>
            Returns UV rect by provided style and underline flag
            </summary>
            <param name="style"></param>
            <param name="underline"></param>
            <returns></returns>
        </member>
        <member name="M:GLULetterInfo.GetUVRect(GLUFontStyle)">
            <summary>
            Internal use
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:GLULetterInfo.SetUVRect(GLUFontStyle,GLUFontUVRect)">
            <summary>
            Sets UV rect with provided style and underline flag
            </summary>
            <param name="style"></param>
            <param name="value"></param>
        </member>
        <member name="M:GLULetterInfo.WriteToStream(System.IO.BinaryWriter)">
            <summary>
            Writes letter info to binary stream
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:GLULetterInfo.ReadFromStream(System.IO.BinaryReader)">
            <summary>
            Reads letter info from binary stream
            </summary>
            <param name="reader">Stream to read</param>
        </member>
        <member name="T:GLUFontMipmap">
            <summary>
            Font mipmap, or texture of font size
            </summary>
        </member>
        <member name="F:GLUFontMipmap.font">
            <summary>
            Link to parent font
            </summary>
        </member>
        <member name="F:GLUFontMipmap.charHeight">
            <summary>
            Height of symbol in pixels
            </summary>
        </member>
        <member name="F:GLUFontMipmap.fontSize">
            <summary>
            Height of symbol in font units
            </summary>
        </member>
        <member name="F:GLUFontMipmap.normalMaterial">
            <summary>
            Material with normal font style texture
            </summary>
        </member>
        <member name="F:GLUFontMipmap.normalUnderlineMaterial">
            <summary>
            Material with normal underline font style texture
            </summary>
        </member>
        <member name="F:GLUFontMipmap.boldMaterial">
            <summary>
            Material with bold font style texture
            </summary>
        </member>
        <member name="F:GLUFontMipmap.boldUnderlineMaterial">
            <summary>
            Material with bold underline texture
            </summary>
        </member>
        <member name="F:GLUFontMipmap.lettersByName">
            <summary>
            Letter by its char dictionary
            </summary>
        </member>
        <member name="F:GLUFontMipmap.lettersById">
            <summary>
            Letters array for deserialization
            </summary>
        </member>
        <member name="M:GLUFontMipmap.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUFontMipmap.#ctor(GLUFont,System.Int32)">
            <summary>
            Creates mipmap
            </summary>
            <param name="font">Parent font</param>
            <param name="fontSize">Size of mipmap characters</param>
        </member>
        <member name="M:GLUFontMipmap.InitArray">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="M:GLUFontMipmap.InitDictionary">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="M:GLUFontMipmap.GetMaterial(UnityEngine.FontStyle,System.Boolean)">
            <summary>
            Gets font material with provided style and underline flag
            </summary>
            <param name="fontStyle">Font style</param>
            <param name="underline">Underline</param>
            <returns>Font mipmap</returns>
        </member>
        <member name="M:GLUFontMipmap.GetTexture(UnityEngine.FontStyle,System.Boolean)">
            <summary>
            Gets font texture with provided style and underline flag
            </summary>
            <param name="fontStyle">Font style</param>
            <param name="underline">Underline</param>
            <returns></returns>
        </member>
        <member name="M:GLUFontMipmap.GetMaterial(UnityEngine.FontStyle,System.Boolean,System.Boolean,UnityEngine.Material)">
            <summary>
            Internal use. Use GetMaterial(FontStyle fontStyle, bool underline)
            </summary>
            <param name="fontStyle">Font style</param>
            <param name="underline">Underline flag</param>
            <param name="loadTexture">If true, texture will be loaded</param>
            <param name="material">Source material</param>
            <returns>Font mipmap material</returns>
        </member>
        <member name="M:GLUFontMipmap.GetTexture(UnityEngine.FontStyle,System.Boolean,System.Boolean)">
            <summary>
            Internal use. Use GetMaterial(FontStyle fontStyle, bool underline)
            </summary>
            <param name="fontStyle">Font style</param>
            <param name="underline">Underilne flag</param>
            <param name="loadTexture">If true, texture will be loaded</param>
            <returns>Font mipmap texture</returns>
        </member>
        <member name="M:GLUFontMipmap.ReadFromStream(System.IO.BinaryReader)">
            <summary>
            Reads mipmap from stream
            </summary>
            <param name="reader">Stream to read</param>
        </member>
        <member name="T:GLUFont">
            <summary>
            Font class
            </summary>
        </member>
        <member name="F:GLUFont.fonts">
            <summary>
            List of all fonts by name. When font is loaded, it is added to "fonts" dictionary
            </summary>
        </member>
        <member name="F:GLUFont.name">
            <summary>
            Name of font
            </summary>
        </member>
        <member name="F:GLUFont.generationInProgress">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="F:GLUFont.letterBottomOffset">
            <summary>
            Real Letter bottom offset from bottom of letter rect
            </summary>
        </member>
        <member name="F:GLUFont.mipmaps">
            <summary>
            Mipmaps by font size
            </summary>
        </member>
        <member name="F:GLUFont.mipmapsById">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="M:GLUFont.#ctor">
            <summary>
            Parameterless constructor. For deserialization
            </summary>
        </member>
        <member name="M:GLUFont.#ctor(System.String)">
            <summary>
            Creates font with provided name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:GLUFont.ToString">
            <summary>
            Converts font to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUFont.InitArray">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="M:GLUFont.Reload">
            <summary>
            Reloads font from its file
            </summary>
        </member>
        <member name="M:GLUFont.GetFont(System.String)">
            <summary>
            Gets font of provided name (Xml file name in Resources/GLU/Fonts/)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:GLUFont.GetMaterial(System.Int32,UnityEngine.FontStyle,System.Boolean)">
            <summary>
            Gets material with provided size, style and underline. Osolete. Use GLUTexStyle.GetMaterial() instead
            </summary>
            <param name="fontSize">Font size</param>
            <param name="style">Font style</param>
            <param name="underline">Underline</param>
            <returns></returns>
        </member>
        <member name="M:GLUFont.GetTexture(System.Int32,UnityEngine.FontStyle,System.Boolean)">
            <summary>
            Gets font texture with provided font size, style and underline. Osolete. Use GLUTexStyle.GetMaterial() instead
            </summary>
            <param name="fontSize">Font size</param>
            <param name="style">Font style</param>
            <param name="underline">Underline</param>
            <returns></returns>
        </member>
        <member name="M:GLUFont.LetterByName(System.Int32,System.Char)">
            <summary>
            Gets letter info with provided size, and char. Osolete. Use GLUTexStyle.LetterByName(char) instead
            </summary>
            <param name="fontSize">Font size</param>
            <param name="letter">Letter</param>
            <returns></returns>
        </member>
        <member name="M:GLUFont.op_Implicit(System.String)~GLUFont">
            <summary>
            Implicit constructor of font. If provided font aready loaded, returns previously loaded instance
            </summary>
            <param name="str">Name of font</param>
            <returns></returns>
        </member>
        <member name="M:GLUFont.ReadFromStream(System.IO.BinaryReader)">
            <summary>
            Reads font from stream
            </summary>
            <param name="reader">Stream to read</param>
        </member>
        <member name="T:GLUDebug">
            <summary>
            GLUe debug wrapper
            </summary>
        </member>
        <member name="M:GLUDebug.Log(System.Object)">
            <summary>
            Wraps Debug.Log method
            </summary>
            <param name="message">Message to display</param>
        </member>
        <member name="M:GLUDebug.LogWarning(System.Object)">
            <summary>
            Wraps Debug.LogWarning method
            </summary>
            <param name="message">Message to display</param>
        </member>
        <member name="M:GLUDebug.LogError(System.Object)">
            <summary>
            Wraps Debug.LogError method
            </summary>
            <param name="message">Message to display</param>
        </member>
        <member name="T:GLULocalOffsetSequence">
            <summary>
            Local offset sequence. Controls localOffset property of an IGLUTransformable object. 
            </summary>
        </member>
        <member name="T:GLUVector3Sequence">
            <summary>
            Vector3 key sequence
            </summary>
        </member>
        <member name="T:GLUKeySequence">
            <summary>
            Base class for all key sequences in GLUe 
            </summary>
        </member>
        <member name="F:GLUKeySequence.transitionSpeed">
            <summary>
            Speed of animated parameter evaluation
            </summary>
        </member>
        <member name="F:GLUKeySequence.transitionTime">
            <summary>
            Internal transitionTime variable
            </summary>
        </member>
        <member name="F:GLUKeySequence.debug">
            <summary>
            Debug flag. If true, debug info will be displayed
            </summary>
        </member>
        <member name="M:GLUKeySequence.UpdatePostWrapMode(UnityEngine.WrapMode)">
            <summary>
            Internal. Updates post wrap mode
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLUKeySequence.UpdatePreWrapMode(UnityEngine.WrapMode)">
            <summary>
            Internal. Updates pre wrap mode
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="F:GLUKeySequence.type">
            <summary>
            Internal sequence type used to get transition sequence (if needed) from target object
            </summary>
        </member>
        <member name="M:GLUKeySequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single)">
            <summary>
            Key sequence constructor
            </summary>
            <param name="preWrapMode">Wrap mode before start frame</param>
            <param name="postWrapMode">Wrap mode after end frame</param>
            <param name="transitionSpeed">Transition speed in seconds</param>
        </member>
        <member name="M:GLUKeySequence.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUKeySequence.Apply(System.Single,IGLUAnimateable)">
            <summary>
            Applies animation to a target
            </summary>
            <param name="time">Time to get value from sequence</param>
            <param name="target">Target to apply animation</param>
        </member>
        <member name="M:GLUKeySequence.UpdateTransitionSequence(IGLUAnimateable)">
            <summary>
            Internal. Updates transition sequence in target's transition states
            </summary>
            <param name="target">Target object</param>
        </member>
        <member name="M:GLUKeySequence.Start(IGLUAnimateable)">
            <summary>
            Starts animation
            </summary>
            <param name="target">Object to animate</param>
        </member>
        <member name="M:GLUKeySequence.GetMaxTime">
            <summary>
            Returns sequence's last frame time
            </summary>
            <returns>Last frame time</returns>
        </member>
        <member name="M:GLUKeySequence.Assign(GLUKeySequence)">
            <summary>
            Assign values from source sequence to provided sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUKeySequence.Clone">
            <summary>
            Creates complete copy of sequence
            </summary>
            <returns>Sequence copy</returns>
        </member>
        <member name="M:GLUKeySequence.PrepareSerialization">
            <summary>
            Prepares serialization. Called by GLUSerializer
            </summary>
        </member>
        <member name="M:GLUKeySequence.PrepareDeserialization">
            <summary>
            Prepares deserialization. Called by GLUDeserializer
            </summary>
        </member>
        <member name="M:GLUKeySequence.CompleteDeserialization">
            <summary>
            Called by GLUDeserializer after deserialization 
            </summary>
        </member>
        <member name="M:GLUKeySequence.SerializeToString">
            <summary>
            Throws an exception. Key sequence cannot be serialized to string
            </summary>
            <returns>Throws an exception</returns>
        </member>
        <member name="M:GLUKeySequence.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes key sequence to node. 
            </summary>
            <param name="doc">Parent doc</param>
            <param name="nodeName">Node name</param>
            <returns>New Xml node filled with sequence content</returns>
        </member>
        <member name="M:GLUKeySequence.Clear">
            <summary>
            Clears sequence's curves 
            </summary>
        </member>
        <member name="M:GLUKeySequence.Parse(System.Xml.XmlNode)">
            <summary>
            Parses sequence from Xml node
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUKeySequence.Deserialize(System.Xml.XmlNode)">
            <summary>
            Create key sequence from provided node
            </summary>
            <param name="n">Node</param>
            <returns>Sequence filled with node content</returns>
        </member>
        <member name="M:GLUKeySequence.Equals(System.Object)">
            <summary>
            Checks if provided object is equal to this
            </summary>
            <param name="obj">Object to check</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUKeySequence.op_Inequality(GLUKeySequence,GLUKeySequence)">
            <summary>
            Inequality operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>True if a is not equal to b</returns>
        </member>
        <member name="M:GLUKeySequence.op_Equality(GLUKeySequence,GLUKeySequence)">
            <summary>
            Equality operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUKeySequence.Equals(GLUKeySequence,GLUKeySequence)">
            <summary>
            Checks if two sequences are equal. (Member by member)
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUKeySequence.GetHashCode">
            <summary>
            Get hashcode of the object
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="P:GLUKeySequence.postWrapMode">
            <summary>
            Sequence wrap mode before start frame
            </summary>
        </member>
        <member name="P:GLUKeySequence.preWrapMode">
            <summary>
            Sequence wrap mode after end frame
            </summary>
        </member>
        <member name="F:GLUVector3Sequence.xCurve">
            <summary>
            X component curve
            </summary>
        </member>
        <member name="F:GLUVector3Sequence.yCurve">
            <summary>
            Y component curve
            </summary>
        </member>
        <member name="F:GLUVector3Sequence.zCurve">
            <summary>
            Z component curve
            </summary>
        </member>
        <member name="M:GLUVector3Sequence.UpdatePreWrapMode(UnityEngine.WrapMode)">
            <summary>
            Internal. Sets up new pre wrap mode and make all nesessary updates
            </summary>
            <param name="value">New pre wrap mode</param>
        </member>
        <member name="M:GLUVector3Sequence.UpdatePostWrapMode(UnityEngine.WrapMode)">
            <summary>
            Internal. Sets up new post wrap mode and make all nesessary updates
            </summary>
            <param name="value">New post wrap mode</param>
        </member>
        <member name="M:GLUVector3Sequence.AddKey(System.Single,UnityEngine.Vector3)">
            <summary>
            Adds key to sequence
            </summary>
            <param name="time">Key time</param>
            <param name="value">Key value</param>
            <example> 
            This example shows how to use an AddKey method
            <code>
            \code
            GLULocalOffsetSequence los = new GLULocalOffsetSequence(WrapMode.Clamp, WrapMode.Clamp);
            los.AddKey(0, new Vector3(0, 0, 0));
            los.AddKey(1, new Vector3(1, 1, 0));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUVector3Sequence.SetKey(System.Int32,System.Single,UnityEngine.Vector3)">
            <summary>
            Sets keyvalue at provided index 
            </summary>
            <param name="index">Key index</param>
            <param name="time">Key time</param>
            <param name="value">Key value</param>
            <example> 
            This example shows how to use an SetKey method
            <code>
            \code
            GLULocalOffsetSequence los = new GLULocalOffsetSequence(WrapMode.Clamp, WrapMode.Clamp);
            los.AddKey(0, new Vector3(0, 0, 0));
            los.AddKey(1, new Vector3(1, 1, 0));
            los.SetKey(1, 0.5f, new Vector3(2, 2, 2));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUVector3Sequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single,GLUKey{UnityEngine.Vector3}[])">
            <summary>
            Constructor
            </summary>
            <param name="preWrapMode">Wrap mode before start frame</param>
            <param name="postWrapMode">Wrap mode after end frame</param>
            <param name="keys">Array of keys</param>
            <param name="transitionSpeed">Transition speed</param>
        </member>
        <member name="M:GLUVector3Sequence.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUVector3Sequence.GetValue(UnityEngine.Vector3,System.Single)">
            <summary>
            Get value from sequence
            </summary>
            <param name="time">Time to get value</param>
            <param name="targetValue">Default value</param>
            <returns>Vector3 value</returns>
        </member>
        <member name="M:GLUVector3Sequence.GetTargetValue(IGLUAnimateable)">
            <summary>
            Returns target value. Should be overriden in inheritor
            </summary>
            <param name="target">Target object to get value</param>
            <returns>Vector3 value of object</returns>
        </member>
        <member name="M:GLUVector3Sequence.UpdateTransitionSequence(IGLUAnimateable)">
            <summary>
            Starts animation, resetting internal sequence values and creating temporary transitions if needed
            </summary>
            <param name="target">Animation target</param>
        </member>
        <member name="M:GLUVector3Sequence.GetMaxTime">
            <summary>
            Returns max frame time
            </summary>
            <returns>Max frame time</returns>
        </member>
        <member name="M:GLUVector3Sequence.Clear">
            <summary>
            Clears internal curves
            </summary>
        </member>
        <member name="M:GLUVector3Sequence.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Creates Xml node and fills it with string representations of sequences's properties
            </summary>
            <param name="doc">Document, containing new node </param>
            <param name="nodeName">Node name</param>
            <returns>Node</returns>
            <example>
            This example shows how to use GLUVector3Sequence.SerializeToNode method
            <code>
            \code
            public XmlNode AnimationToNode(GLUAnimation a, XmlDocument doc)
            {
                XmlNode n = doc.CreateNode(XmlNodeType.Element, "animation", "");
                foreach (GLUKeySequence seq in a)
                n.AppendChild(seq.SerializeToNode(doc));
                return n;
            }
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUVector3Sequence.Parse(System.Xml.XmlNode)">
            <summary>
            Parses provided Xml node, filling this instance's fields and properties
            </summary>
            <param name="n">Node to parse</param>
            <example>
            This example shows how to use GLUVector3Sequence.Parse method
            <code>
            \code
            public new static GLUKeySequence Deserialize(XmlNode n)
            {
                GLUVector3Sequence ks = new GLUVector3Sequence();
                ks.Parse(n);
                return ks;
            }
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUVector3Sequence.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUVector3Sequence instance filling it with parsed node content
            </summary>
            <param name="n">Node to parse</param>
            <returns>Instance of GLUVector3Sequence</returns>
        </member>
        <member name="M:GLUVector3Sequence.Equals(System.Object)">
            <summary>
            Same as == operator
            </summary>
            <param name="obj">Obj to compare with</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUVector3Sequence.GetHashCode">
            <summary>
            Returns hashcode of the sequence
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:GLUVector3Sequence.Assign(GLUKeySequence)">
            <summary>
            Assign values from the source sequence to provided sequence
            </summary>
        </member>
        <member name="M:GLULocalOffsetSequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single,GLUKey{UnityEngine.Vector3}[])">
            <summary>
            Constructor
            </summary>
            <param name="preWrapMode">Animation curve wrap mode before first frame</param>
            <param name="postWrapMode">Animation curve wrap mode after last frame</param>
            <param name="keys">Keys list</param>
            <param name="transitionSpeed">Transition speed in seconds</param>
            <example>
            This example shows how to use GLULocalOffsetSequence constructor
            <code>
            \code
            GLULocalOffsetSequence los = new GLULocalOffsetSequence(WrapMode.Clamp, WrapMode.Clamp);
            los.AddKey(0.5f, Vector3.zero);
            los.AddKey(1f, Vector3.one);
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, los));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULocalOffsetSequence.#ctor">
            <summary>
            Parameterless constructor
            </summary>
            <example>
            This example shows how to use GLULocalOffsetSequence constructor
            <code>
            \code
            GLULocalOffsetSequence los = new GLULocalOffsetSequence();
            los.AddKey(0.5f, Vector3.zero);
            los.AddKey(1f, Vector3.one);
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, los));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULocalOffsetSequence.GetTargetValue(IGLUAnimateable)">
            <summary>
            Gets localOffset value from target object
            </summary>
            <param name="target">Target object</param>
            <returns>localOffset value</returns>
        </member>
        <member name="M:GLULocalOffsetSequence.Apply(System.Single,IGLUAnimateable)">
            <summary>
            Applies sequence to the target object. Target must also be an IGLUTransformable
            </summary>
            <param name="time">Sequence time</param>
            <param name="target">Target object</param>
        </member>
        <member name="M:GLULocalOffsetSequence.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new instance of GLULocalOffsetSequence, filling it with node's parse results
            </summary>
            <param name="n">Node to parse</param>
            <returns>An instance of GLULocalOffsetSequence</returns>
        </member>
        <member name="M:GLULocalOffsetSequence.Clone">
            <summary>
            Creates a complete copy of the sequence
            </summary>
            <returns>Sequence copy</returns>
        </member>
        <member name="T:GLUTextRow">
            <summary>
            Internal text row
            </summary>
        </member>
        <member name="F:GLUTextRow.selectionBorder">
            <summary>
            Border of selection
            </summary>
        </member>
        <member name="F:GLUTextRow.defaultSelectionTextureURL">
            <summary>
            Selection texture
            </summary>
        </member>
        <member name="F:GLUTextRow.defaultSelectionBoxBorders">
            <summary>
            Selection texture borders
            </summary>
        </member>
        <member name="F:GLUTextRow.characters">
            <summary>
            List of row's characters
            </summary>
        </member>
        <member name="F:GLUTextRow.bounds">
            <summary>
            Bounds of the row
            </summary>
        </member>
        <member name="F:GLUTextRow.index">
            <summary>
            Row index. Row with index 0 is the first row of text
            </summary>
        </member>
        <member name="F:GLUTextRow.startPos">
            <summary>
            Start pos of row string in the gloal string
            </summary>
        </member>
        <member name="M:GLUTextRow.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="index">Index of row in rowlist</param>
            <param name="startPos">Start position of row in control's text</param>
        </member>
        <member name="M:GLUTextRow.SetSelection(GLUMesh,GLUTextCharacter,GLUTextCharacter,IGLUEditableText)">
            <summary>
            Sets selection in current row
            </summary>
            <param name="m">Selection mesh</param>
            <param name="startCharacter">Start slection border</param>
            <param name="endCharacter">End selection border</param>
            <param name="parent">Parent container</param>
        </member>
        <member name="M:GLUTextRow.GetCharacterByCoordinates(UnityEngine.Vector3)">
            <summary>
            Returns character, closest to the provided point 
            </summary>
            <param name="mp">Local coordinates</param>
            <returns>Text character</returns>
        </member>
        <member name="M:GLUTextRow.Generate(GLUMesh,GLUTextStyle,System.Int32)">
            <summary>
            Generates text row. Internal use
            </summary>
            <param name="m">Mesh</param>
            <param name="textStyle">Text style</param>
            <param name="horOffset">Alignment offset</param>
        </member>
        <member name="M:GLUTextRow.Destroy">
            <summary>
            Clears and destroys text row
            </summary>
        </member>
        <member name="M:GLUTextRow.Destroy(GLUTextRow)">
            <summary>
            Destroys text row
            </summary>
            <param name="tr"></param>
        </member>
        <member name="T:GLUInternalImageStyle">
            <summary>
            Style for internal image primitive
            </summary>
        </member>
        <member name="T:GLUInternalGraphicStyle">
            <summary>
            Base class for all graphic primitives
            </summary>
        </member>
        <member name="F:GLUInternalGraphicStyle.objectName">
            <summary>
            Layer name
            </summary>
        </member>
        <member name="F:GLUInternalGraphicStyle.visible">
            <summary>
            Visibility 
            </summary>
        </member>
        <member name="F:GLUInternalGraphicStyle.material">
            <summary>
            Material
            </summary>
        </member>
        <member name="F:GLUInternalGraphicStyle.animationSet">
            <summary>
            Set of animations
            </summary>
        </member>
        <member name="M:GLUInternalGraphicStyle.#ctor">
            <summary>
            Comstructor
            </summary>
        </member>
        <member name="M:GLUInternalGraphicStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Sheet container</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUInternalGraphicStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,GLUPivotType,UnityEngine.Vector3,GLUAnchors,System.String,System.Boolean,GLUMaterial,GLUHorizontalAlignment,GLUVerticalAlignment,GLUAnimationSet)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent sheet</param>
            <param name="name">Style name</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="padding">Control padding</param>
            <param name="pivotType">Pivot calculation type</param>
            <param name="pivot">Custom pivot position</param>
            <param name="alignment">Object horizontal alilgnment</param>
            <param name="verticalAlignment">Object vertical alilgnment</param>
            <param name="objectName">Object name</param>
            <param name="visible">Object visibility</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="anchors">Graphic anchors</param>
            <param name="material">Object material</param>
            <param name="animationSet">Animation set</param>
        </member>
        <member name="M:GLUInternalGraphicStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Used in serialization. Tests object for style adequacy
            </summary>
            <param name="obj">Object to test</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to provided style </returns>
        </member>
        <member name="F:GLUInternalImageStyle.borders">
            <summary>
            UV stretcheable borders
            </summary>
        </member>
        <member name="F:GLUInternalImageStyle.rotation">
            <summary>
            UV rotation
            </summary>
        </member>
        <member name="M:GLUInternalImageStyle.CreateObject">
            <summary>
            Creates an instance of GLUInternalImage
            </summary>
            <returns>New internal image primitive</returns>
        </member>
        <member name="M:GLUInternalImageStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUInternalImageStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUInternalImageStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.String,GLUBorders,GLUPadding,System.String,System.Boolean,GLUAnchors,GLUHorizontalAlignment,GLUVerticalAlignment,GLUAnimationSet)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="x">Primitive x</param>
            <param name="y">Primitive y</param>
            <param name="width">Primitive width</param>
            <param name="height">Primitive height</param>
            <param name="texture">Texture URL</param>
            <param name="borders">Unstretcheable borders</param>
            <param name="padding">Content padding</param>
            <param name="objectName">Primitive name</param>
            <param name="visible">Visibility flag</param>
            <param name="alignment">Horizontal alignment</param>
            <param name="anchors">Control anchors</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <param name="animationSet">Animation set</param>
            <example>
            This example shows how to use GLUInternalImageStyle constructor
            <code>
            \code
            GLUInternalImageStyle iis = new GLUInternalImageStyle(GLUStyleSheet.defaultSheet, "comboListBox_normal", new GLUNumber(0), new GLUNumber(0), new GLUNumber(0), new GLUNumber(0), "GLU/Controls/Textures/ComboBox/listBox_normal", new GLUBorders(4), new GLUPadding(0), "normal", true, new GLUAnchors(true, false, true, false), GLUHorizontalAlignment.client, GLUVerticalAlignment.client, 
                new GLUAnimationSet(
                    new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.hovered | GLUControlState.start), GLUButtonStyle.GetColorFadeIn(3), GLUButtonStyle.visShow),
                    new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.start), GLUButtonStyle.GetColorFadeOut(3), GLUButtonStyle.GetVisFadeOut(2)),
                    new GLUAnimation(0, GLUButtonStyle.visHide, GLUButtonStyle.colorHide))); 
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUInternalImageStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Used in serialization. Tests object for style adequacy
            </summary>
            <param name="obj">Object to test</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to provided style </returns>
        </member>
        <member name="M:GLUInternalImageStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created internal image style</returns>
        </member>
        <member name="T:GLUChar">
            <summary>
            GLU character. Char with text style
            </summary>
        </member>
        <member name="F:GLUChar.character">
            <summary>
            Character
            </summary>
        </member>
        <member name="F:GLUChar.style">
            <summary>
            Text style
            </summary>
        </member>
        <member name="M:GLUChar.ToString">
            <summary>
            Returns string[1] = "character"
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUChar.#ctor(System.Char,GLUTextStyle)">
            <summary>
            Constructor
            </summary>
            <param name="c">Char</param>
            <param name="ta">Text style</param>
        </member>
        <member name="M:GLUChar.Equals(System.Object)">
            <summary>
            Returns comparsion result of GLUChar and object. If obj is GLUChar, Equals returns false
            </summary>
            <param name="obj">Object of comparsion</param>
            <returns>Result of comparsion</returns>
        </member>
        <member name="M:GLUChar.GetHashCode">
            <summary>
            Returns hash code for provided char
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:GLUString">
            <summary>
            GLU String
            </summary>
        </member>
        <member name="F:GLUString.rawString">
            <summary>
            Raw (non-parsed) string 
            </summary>
        </member>
        <member name="F:GLUString.Tag">
            <summary>
            Attached object
            </summary>
        </member>
        <member name="M:GLUString.SubString(System.Int32,System.Int32)">
            <summary>
            Returns substring
            </summary>
            <param name="start">Start index</param>
            <param name="count">Count</param>
            <returns>New string, containing substring</returns>
        </member>
        <member name="M:GLUString.TextOnly">
            <summary>
            Returns string without style attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUString.ToString">
            <summary>
            Serializes glu string to string with style atributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUString.GetHashCode">
            <summary>
            Returns string's hashcode
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:GLUString.Equals(System.Object)">
            <summary>
            Check if argument string is equal to this
            </summary>
            <param name="obj">provided string</param>
            <returns>Equality result</returns>
        </member>
        <member name="M:GLUString.op_Equality(GLUString,GLUString)">
            <summary>
            Check if provided operands are equal
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Equality result</returns>
        </member>
        <member name="M:GLUString.op_Inequality(GLUString,GLUString)">
            <summary>
            Check if provided operands are not equal
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Non-equality result</returns>
        </member>
        <member name="M:GLUString.op_Addition(GLUString,GLUString)">
            <summary>
            Addition operator
            </summary>
            <param name="s0">First operand</param>
            <param name="s1">Second operand</param>
            <returns>Result of concatenation of operands</returns>
        </member>
        <member name="M:GLUString.op_Implicit(System.String)~GLUString">
            <summary>
            Implicit constructor. Parses provided string and returns GLU string
            </summary>
            <param name="str">String</param>
            <returns>New GLU string</returns>
        </member>
        <member name="M:GLUString.op_Addition(GLUString,System.Char)">
            <summary>
            Addition. Add character to string
            </summary>
            <param name="s0">String</param>
            <param name="c">Char</param>
            <returns>Same string appended with provided char</returns>
        </member>
        <member name="M:GLUString.op_Addition(System.String,GLUString)">
            <summary>
            Addition. Adds string to GLU String
            </summary>
            <param name="s">String</param>
            <param name="s0">GLU string</param>
            <returns>New GLU string, containing concatentated operands</returns>
        </member>
        <member name="M:GLUString.op_Addition(GLUString,GLUChar)">
            <summary>
            Addition. Adds GLU char to GLU string
            </summary>
            <param name="s0">GLU string</param>
            <param name="c">GLU char</param>
            <returns>Same string, appended with provided char</returns>
        </member>
        <member name="M:GLUString.Empty">
            <summary>
            Checks if string is empty
            </summary>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUString.GetWord(System.Int32@,System.String,System.String,System.String)">
            <summary>
            Returns word framed in endChars, started from provided postion 
            </summary>
            <param name="i">provided position</param>
            <param name="text">Text</param>
            <param name="separators">End chars list</param>
            <param name="terminateChars">Terminate chars list. Terminates search unconditionally</param>
            <returns>Word</returns>
        </member>
        <member name="M:GLUString.GetWord(System.Int32@,System.Int32@,System.String,System.String)">
            <summary>
            Returns word framed in endChars, started from provided postion 
            </summary>
            <param name="i">Provided position</param>
            <param name="lN">Line number</param>
            <param name="text">Text</param>
            <param name="separators">End chars list</param>
            <returns>Word</returns>
        </member>
        <member name="M:GLUString.GetWord(System.Int32@,System.Int32@,System.String,System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Returns word framed in endChars, started from provided postion 
            </summary>
            <param name="i">provided position</param>
            <param name="text">Text</param>
            <param name="separators">End chars list</param>
            <param name="startGroupChar">Char that starts group</param>
            <param name="endGroupChar">Char that closes group</param>
            <param name="lineNumber">Current line number</param>
            <param name="includeRightBorder">Includes right border</param>
            <returns>Word</returns>
        </member>
        <member name="M:GLUString.GetWord(System.Int32@,System.String,System.String,System.Char,System.Char,System.String)">
            <summary>
            Returns word framed in endChars, started from provided postion 
            </summary>
            <param name="i">provided position</param>
            <param name="text">Text</param>
            <param name="separators">End chars list</param>
            <param name="terminateChars">Terminate chars list. Terminates search unconditionally</param>
            <param name="startGroupChar">Char that starts group</param>
            <param name="endGroupChar">Char that closes group</param>
            <returns>Word</returns>
        </member>
        <member name="M:GLUString.GetWord(System.Int32@,System.String,System.String,System.String,System.String)">
            <summary>
            Returns word framed in endChars, started from provided postion 
            </summary>
            <param name="i">provided position</param>
            <param name="text">Text</param>
            <param name="startChars">Chars, which will be ignore before getting word</param>
            <param name="endChars">End chars list</param>
            <param name="terminateChars">Terminate chars list. Terminates search unconditionally</param>
            <returns>Word</returns>
        </member>
        <member name="M:GLUString.ReplaceGroups(System.String,System.Char,System.Char,System.String)">
            <summary>
            Searches provided text for groups of symbols enclosed in startChar..endChar symbols and replaces them with replaceText
            </summary>
            <param name="text">Provided text</param>
            <param name="startChar">Start of group</param>
            <param name="endChar">End of group</param>
            <param name="replaceText">Group replacement</param>
            <returns>Text, where all groups enclosed in startChar..endChar replaced by replaceText</returns>
        </member>
        <member name="M:GLUString.GetKeyValues(System.String)">
            <summary>
            Parses provided text and returns Dictionary&lt;string, string&gt; object. Text must be in such format: [key]=[value], ... [key]=[value] 
            </summary>
            <param name="text">Text to parse</param>
            <returns>Dictionary</returns>
        </member>
        <member name="M:GLUString.Append(GLUChar)">
            <summary>
            Appends char to GLU string
            </summary>
            <param name="c">Char to append</param>
        </member>
        <member name="M:GLUString.Append(GLUString)">
            <summary>
            Appends GLU string to this GLU string
            </summary>
            <param name="s">String to append</param>
        </member>
        <member name="M:GLUString.Trim">
            <summary>
            Trims GLU string
            </summary>
            <returns>New trimmed GLU string</returns>
        </member>
        <member name="M:GLUString.Parse(System.String)">
            <summary>
            Parses serialized GLU string
            </summary>
            <param name="s">Serialized string</param>
            <returns>New GLU string</returns>
        </member>
        <member name="M:GLUString.ParseString(System.String)">
            <summary>
            Parses provided string and populates self with it elements 
            </summary>
            <param name="s">String</param>
        </member>
        <member name="M:GLUString.Destroy">
            <summary>
            Set string's content to null
            </summary>
        </member>
        <member name="M:GLUString.Destroy(GLUString)">
            <summary>
            Destorys string
            </summary>
            <param name="str">String  to destroy. Can be null</param>
        </member>
        <member name="P:GLUString.Item(System.Int32)">
            <summary>
            Index accessor
            </summary>
            <param name="index">Element index</param>
            <returns>Element</returns>
        </member>
        <member name="P:GLUString.Length">
            <summary>
            GLU string length
            </summary>
        </member>
        <member name="T:GLULocalScaleSequence">
            <summary>
            Local scale sequence. Controls localScale property of graphic object.
            </summary>
        </member>
        <member name="M:GLULocalScaleSequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single,GLUKey{UnityEngine.Vector3}[])">
            <summary>
            Constructor
            </summary>
            <param name="preWrapMode">Animation curve wrap mode before first frame</param>
            <param name="postWrapMode">Animation curve wrap mode after last frame</param>
            <param name="keys">Array of keyframes</param>
            <param name="transitionSpeed">Transition speed</param>
            <example>
            This example shows how to use GLULocalOffsetSequence constructor
            <code>
            \code
            GLULocalScaleSequence lss = new GLULocalScaleSequence(WrapMode.Clamp, WrapMode.Clamp);
            lss.AddKey(0.5f, Vector3.one);
            lss.AddKey(1f, new Vector3(1.4f, 1.4f, 1.4f);
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, lss));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULocalScaleSequence.#ctor">
            <summary>
            Parameterless constructor
            </summary>
            <example>
            This example shows how to use GLULocalOffsetSequence constructor
            <code>
            \code
            GLULocalScaleSequence lss = new GLULocalScaleSequence();
            lss.AddKey(0.5f, Vector3.one);
            lss.AddKey(1f, new Vector3(1.4f, 1.4f, 1.4f);
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, lss));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULocalScaleSequence.GetTargetValue(IGLUAnimateable)">
            <summary>
            Returns target's localScale value
            </summary>
            <param name="target">Target object (must also be IGLUTransformable)</param>
            <returns>localScale value</returns>
        </member>
        <member name="M:GLULocalScaleSequence.Apply(System.Single,IGLUAnimateable)">
            <summary>
            Applies sequence to the target object. Target must also be an IGLUTransformable
            </summary>
            <param name="time">Sequence time</param>
            <param name="target">Target object</param>
        </member>
        <member name="M:GLULocalScaleSequence.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new instance of GLULocalScaleSequence, filling it with node's parse results
            </summary>
            <param name="n">Node to parse</param>
            <returns>An instance of GLULocalScaleSequence</returns>
        </member>
        <member name="M:GLULocalScaleSequence.Clone">
            <summary>
            Creates a complete copy of the sequence
            </summary>
            <returns>Sequence copy</returns>
        </member>
        <member name="T:GLUMinMaxPair">
            <summary>
            Min max pair
            </summary>
        </member>
        <member name="F:GLUMinMaxPair.min">
            <summary>
            Lower border 
            </summary>
        </member>
        <member name="F:GLUMinMaxPair.max">
            <summary>
            Upper border
            </summary>
        </member>
        <member name="M:GLUMinMaxPair.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="min">Lower border</param>
            <param name="max">Upper border</param>
        </member>
        <member name="T:GLUAnimationConflictDecisionType">
            <summary>
            Conflict decision type for animations. Used to resolve animations start conflict, when newly started animation meets currently running one with the same priority
            </summary>
        </member>
        <member name="F:GLUAnimationConflictDecisionType.reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:GLUAnimationConflictDecisionType.replace">
            <summary>
            Currently running animation is replaced by new
            </summary>
        </member>
        <member name="F:GLUAnimationConflictDecisionType.waitUntilFinished">
            <summary>
            New animation waits until current one finished
            </summary>
        </member>
        <member name="F:GLUAnimationConflictDecisionType.runParallel">
            <summary>
            New animation run parallelly with current one
            </summary>
        </member>
        <member name="T:GLUAnimation">
            <summary>
            Animation sequence. Contains key sequences
            </summary>
        </member>
        <member name="F:GLUAnimation.defaultIndex">
            <summary>
            Default index value. Internal
            </summary>
        </member>
        <member name="F:GLUAnimation.debug">
            <summary>
            Debug flag. If set to true, debug messages will be posted in Debug log.
            </summary>
        </member>
        <member name="F:GLUAnimation.index">
            <summary>
            Index of animation in animation set
            </summary>
        </member>
        <member name="F:GLUAnimation.priority">
            <summary>
            Animation priority. 
            If animation with lower priority is currently playing, it will be immediately replaced by this animation.
            If animation with higher priority is currently playing, this one will be stored in queque.
            If priorities are equal, conflict is decided according to conflictDecisionType value
            </summary>
        </member>
        <member name="F:GLUAnimation.conflictDecisionType">
            <summary>
            Rule for start conflict decision. 
            </summary>
        </member>
        <member name="F:GLUAnimation.frameTime">
            <summary>
            Interval between applying. In seconds.
            </summary>
        </member>
        <member name="F:GLUAnimation.loop">
            <summary>
            If set to true, anmation is threated as continues
            </summary>
        </member>
        <member name="M:GLUAnimation.Clone">
            <summary>
            Creates a complete copy of the animation
            </summary>
            <returns>Animation copy</returns>
        </member>
        <member name="M:GLUAnimation.Apply(System.Single,IGLUAnimateable)">
            <summary>
            Applies animation to target
            </summary>
            <param name="time">Time parameter</param>
            <param name="target">Object to animate</param>
            <example> 
            This example shows how to use an Apply method
            <code>
            \code
            private IEnumerator Animate(GLUAnimation a)
            {
               float st = GLUTime.time;
               float t;
               GLUWaitForSeconds wfs = new GLUWaitForSeconds(animation.frameTime);
               while (animation != null)
               {
                   t = GLUTime.time - st;
                   if (animation.Finished(t))
                       yield break;
                   else
                   {
                       animation.Apply(t, this);
                       yield return wfs;
                   }
               }
            } 
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUAnimation.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUAnimation.#ctor(System.Int32,System.Boolean,System.Int32,GLUAnimationConflictDecisionType,GLUKeySequence[])">
            <summary>
            Constructor
            </summary>
            <param name="index">Index of an animation. Just key, which is used to get an animation from an animation set</param>
            <param name="seqs">A list of animation sequences</param>
            <param name="loop">Loop flag. If set to true, animation is threated as repeating</param>
            <param name="priority">Animation priority in conflicts. When choosing, which one animation should start first, one with higher priority wins</param>
            <param name="conflictDecisionType">When animation with same priorities collides, conflictDecisionType allows to set up one of conflict decision rules</param>
            <example>
            This example shows how to use GLUAnimation constructor
            <code>
            \code
            GLUVisibilitySequence visHide = new GLUVisibilitySequence(WrapMode.ClampForever, WrapMode.ClampForever, new GLUKey&lt;bool&gt;(0, false)); 
            GLUAnimation hover = new GLUAnimation((int)GLUInternalButtonEvent.hoveredPress, false, visHide);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUAnimation.#ctor(System.Int32,GLUKeySequence[])">
            <summary>
            Constructor
            </summary>
            <param name="index">Index of an animation. Just key, which is used to get an animation from an animation set</param>
            <param name="seqs">A list of animation sequences</param>
            <example>
            This example shows how to use GLUAnimation constructor
            <code>
            \code
            GLUVisibilitySequence visHide = new GLUVisibilitySequence(WrapMode.ClampForever, WrapMode.ClampForever, new GLUKey&lt;bool&gt;(0, false)); 
            GLUAnimation hover = new GLUAnimation((int)GLUInternalButtonEvent.hoveredPress, false, visHide);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUAnimation.AddSequence(GLUKeySequence)">
            <summary>
            Adds an animation sequence to sequence list
            </summary>
            <param name="ks">Sequence to add</param>
            <example>
            This example shows how to use an AddSequence method
            <code>
            \code
            GLUAnimation a = new GLUAnimation(0);
            GLULocalRotationSequence rs = new GLULocalRotationSequence(WrapMode.ClampForever, WrapMode.ClampForever, new GLUKey&lt;Vector3&gt;(0.33f, new Vector3(0, 0, 90)));
            a.AddSequence(rs);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUAnimation.Start(IGLUAnimateable)">
            <summary>
            Starts animation on provided target
            </summary>
            <param name="target">Animataeble target</param>
            <returns>Animation time bounds</returns>
        </member>
        <member name="M:GLUAnimation.ToString">
            <summary>
            Overrides standard ToString method
            </summary>
            <returns>Brief info about animation</returns>
        </member>
        <member name="M:GLUAnimation.UpdateTimeBounds(GLUMinMaxPair)">
            <summary>
            Updates animation's max time 
            </summary>
            <param name="time">Time to check</param>
        </member>
        <member name="M:GLUAnimation.CompleteDeserialization">
            <summary>
            Internally called after deserialization
            </summary>
        </member>
        <member name="M:GLUAnimation.PrepareSerialization">
            <summary>
            Prepares animation for serialization. Internally called during serialization
            </summary>
        </member>
        <member name="M:GLUAnimation.PrepareDeserialization">
            <summary>
            Prepares animation for deserialization. Internally called during deserialization
            </summary>
        </member>
        <member name="M:GLUAnimation.SerializeToString">
            <summary>
            Raises an exception "GLUAnimation cannot be serialized to string"
            </summary>
            <returns>Nothing</returns>
        </member>
        <member name="M:GLUAnimation.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Creates a XML node and fills it with animation's content 
            </summary>
            <param name="doc">XML document - container of node</param>
            <param name="nodeName">XML node name</param>
            <returns>XML representation of an animation</returns>
        </member>
        <member name="M:GLUAnimation.Parse(System.Xml.XmlNode)">
            <summary>
            Parses the provided XML node and fills the fields of provided instance
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUAnimation.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates instance of a GLUAnimation class, filling it with provided node's content
            </summary>
            <param name="n">Node to parse</param>
            <returns>An instance of GLUAnimation class</returns>
        </member>
        <member name="M:GLUAnimation.op_Inequality(GLUAnimation,GLUAnimation)">
            <summary>
            Overrides the != operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUAnimation.op_Equality(GLUAnimation,GLUAnimation)">
            <summary>
            Overrides the == operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUAnimation.Equals(System.Object)">
            <summary>
            Overrides the Equals() method
            </summary>
            <param name="obj">Object to compare</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUAnimation.GetHashCode">
            <summary>
            Overrides GetHashCode() method
            </summary>
            <returns>Hashcode of object</returns>
        </member>
        <member name="T:GLULabelStyle">
            <summary>
            Label style 
            </summary>
        </member>
        <member name="M:GLULabelStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLULabelStyle.#ctor(GLUStyleSheet,System.String,GLUPadding,GLUTextStyle,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="padding">Control padding</param>
            <param name="textAlignment">Text horizontal alignment</param>
            <param name="textVerticalAlignment">Text vertical alignment</param>
            <param name="textStyle">Text style</param>
        </member>
        <member name="M:GLULabelStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created label style</returns>
        </member>
        <member name="T:GLUComboControlStyle">
            <summary>
            Combo control style. Base style class for combo boxes, combo calendars, etc
            </summary>
        </member>
        <member name="F:GLUComboControlStyle.textEditStyle">
            <summary>
            text edit style
            </summary>
        </member>
        <member name="F:GLUComboControlStyle.comboButtonStyle">
            <summary>
            Combo button style
            </summary>
        </member>
        <member name="F:GLUComboControlStyle.showComboButton">
            <summary>
            If true, combo button is displayed
            </summary>
        </member>
        <member name="F:GLUComboControlStyle.comboButtonOffset">
            <summary>
            Combo button offset
            </summary>
        </member>
        <member name="M:GLUComboControlStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUComboControlStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUComboControlStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLUComboControlStyle.CreateDefault">
            <summary>
            Called, when default style sheet is assembled
            </summary>
            <returns>Button style with default content and default name</returns>
        </member>
        <member name="T:IGLUPopupMenu">
            <summary>
            Common interface for all popup menus
            </summary>
        </member>
        <member name="M:IGLUPopupMenu.Show(GLUObject,UnityEngine.Vector3)">
            <summary>
            Shows popup menu
            </summary>
            <param name="sender">Popup menu caller</param>
            <param name="mp">Start position of the popup</param>
        </member>
        <member name="M:IGLUPopupMenu.ShowInternal(GLUObject,UnityEngine.Vector3)">
            <summary>
            Shows nested popup menu
            </summary>
            <param name="sender">Popup menu caller</param>
            <param name="mp">Start position of the popup</param>
        </member>
        <member name="T:GLUListBox">
            <summary>
            List box class
            </summary>
        </member>
        <member name="T:GLUScrollView">
            <summary>
            Base class for all clipping controls like TexdtEdits, ListBoxes, etc.
            </summary>
        </member>
        <member name="F:GLUScrollView._scrollAreaBounds">
            <summary>
            Internal bounds of all viewport content
            </summary>
        </member>
        <member name="F:GLUScrollView.viewportBounds">
            <summary>
            Viewport bounds. Used for checking if input is over viewport. Internal use
            </summary>
        </member>
        <member name="F:GLUScrollView._viewport">
            <summary>
            Viewport rect. Used to draw scrolled controls. Internal use
            </summary>
        </member>
        <member name="F:GLUScrollView._showHorScrollBar">
            <summary>
            Internal. If set to true, default horizontal scrollbar is displayed
            </summary>
        </member>
        <member name="F:GLUScrollView._showVertScrollBar">
            <summary>
            Internal. If set to true, default vertical scrollbar is displayed
            </summary>
        </member>
        <member name="F:GLUScrollView.showBackground">
            <summary>
            If set to true, background will be displayed
            </summary>
        </member>
        <member name="F:GLUScrollView._viewportOffset">
            <summary>
            Scrolled controls are drawed with this offset
            </summary>
        </member>
        <member name="M:GLUScrollView.CorrectHorViewportOffset">
            <summary>
            Used to correct viewport offset when it is changed (Usually, to apply constraints) 
            </summary>
        </member>
        <member name="M:GLUScrollView.CorrectVertViewportOffset">
            <summary>
            Used to correct viewport offset when it is changed (Usually, to apply constraints) 
            </summary>
        </member>
        <member name="F:GLUScrollView._scrollChildren">
            <summary>
            List of scroll children
            </summary>
        </member>
        <member name="F:GLUScrollView.viewportMesh">
            <summary>
            Mesh of viewport
            </summary>
        </member>
        <member name="F:GLUScrollView._viewportScale">
            <summary>
            Internal viewport's uniform scale field
            </summary>
        </member>
        <member name="F:GLUScrollView.scrollChildrenOrderList">
            <summary>
            ScrollChildren tab order list
            </summary>
        </member>
        <member name="F:GLUScrollView.OnViewportSizeChanged">
            <summary>
            Occurs, when viewport size is changed
            </summary>
        </member>
        <member name="F:GLUScrollView.OnDrawViewport">
            <summary>
            Custom draw viewport event. Put handler here, if you want custom-draw scroll content. Non-uniform scale
            </summary>
        </member>
        <member name="M:GLUScrollView.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle)">
            <summary>
            ScrollView constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>    
            <param name="style">Style of the control</param>
            <example>
            This example shows how to use a GLUScrollView constructor
            <code>
            \code
            public void CreateControls()
            {
                GLU.terminal = GLU.screen;
                GLUForm f = new GLUForm("TestForm", new GLUNumber(0), new GLUNumber(0), new GLUNumber(512), new GLUNumber(512), true, "Test Form");
                f.AddChild(new GLUScrollView(f, "scrollView", new GLUNumber(0), new GLUNumber(0), new GLUNumber(128), new GLUNumber(128), true, "scrollView"));
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUScrollView.GetRenderTexture(System.Int32,System.Int32)">
            <summary>
            Returns render texture with dimensions equal or larger, then provided
            </summary>
            <param name="width">provided width</param>
            <param name="height">provided height</param>
            <returns>Render texture</returns>
        </member>
        <member name="M:GLUScrollView.CreateHorScrollBar(GLUScrollViewStyle)">
            <summary>
            Creates horizontal scrollbar. Internal use
            </summary>
            <param name="style">Parent scrollview style </param>
        </member>
        <member name="M:GLUScrollView.CreateVertScrollBar(GLUScrollViewStyle)">
            <summary>
            Creates vertical scrollbar. Internal use
            </summary>
            <param name="style">Parent scrollview style </param>
        </member>
        <member name="M:GLUScrollView.ApplyStyle">
            <summary>
            Internal. Used to change control content according to new style. Usually called at the beginning of RefreshGraphicObject()
            </summary>
        </member>
        <member name="M:GLUScrollView.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUScrollView.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUScrollView.UpdateViewPortMaterial">
            <summary>
            Internal. Checks viewport material
            </summary>
        </member>
        <member name="M:GLUScrollView.UpdateRenderTexture(System.Int32,System.Int32)">
            <summary>
            Creates (if needed) or updates render texture. Internal use
            </summary>
        </member>
        <member name="M:GLUScrollView.UpdateLayout">
            <summary>
            Updates internal layout and prepares values for refreshing
            </summary>
        </member>
        <member name="M:GLUScrollView.UpdateViewport">
            <summary>
            Inits viewport. Internal use
            </summary>
        </member>
        <member name="M:GLUScrollView.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUScrollView.UpdateScrollBars">
            <summary>
            Updates scrollbars visual states
            </summary>
        </member>
        <member name="M:GLUScrollView.RefreshScrollView">
            <summary>
            Scrollview content generation method
            </summary>
        </member>
        <member name="M:GLUScrollView.UpdateInternalControls">
            <summary>
            Updates internal scrollbars
            </summary>
        </member>
        <member name="M:GLUScrollView.RefreshLayeredControl">
            <summary>
            Generates meshes
            </summary>
        </member>
        <member name="M:GLUScrollView.RecalculateScrollArea">
            <summary>
            Recalculates scroll area
            </summary>
        </member>
        <member name="M:GLUScrollView.UpdateScrollArea(GLUControl)">
            <summary>
            Updates scrolla area with new child bounds
            </summary>
            <param name="newChild">New child bounds</param>
        </member>
        <member name="M:GLUScrollView.AddScrollChild(GLUControl)">
            <summary>
            Adds a scroll child to a scrollchildren list. Scroll children are rendered in scrollbale and sizeable viewport
            </summary>
            <param name="child">Child control</param>
        </member>
        <member name="M:GLUScrollView.AddScrollChild(GLUControl,System.Boolean)">
            <summary>
            Adds a scroll child to a scrollchildren list. Scroll children are rendered in scrollbale and sizeable viewport
            </summary>
            <param name="child">Child control</param>
            <param name="internalChild">If true, child is not selectable in form editor</param>
        </member>
        <member name="M:GLUScrollView.UpdateInternals">
            <summary>
            Updates control's bounds, offsets and draw offsets
            </summary>
        </member>
        <member name="M:GLUScrollView.PrepareIntersectValues">
            <summary>
            Prepares intersection values of viewport for checking whether display a scrollchild
            </summary>
        </member>
        <member name="F:GLUScrollView.vbXMin">
            <summary>
            Used to calculate scroll children's intersection
            </summary>
        </member>
        <member name="F:GLUScrollView.vbXMax">
            <summary>
            Used to calculate scroll children's intersection
            </summary>
        </member>
        <member name="F:GLUScrollView.vbYMin">
            <summary>
            Used to calculate scroll children's intersection
            </summary>
        </member>
        <member name="F:GLUScrollView.vbYMax">
            <summary>
            Used to calculate scroll children's intersection
            </summary>
        </member>
        <member name="F:GLUScrollView.needViewPortRepaint">
            <summary>
            If true, viewport content should be redrawn
            </summary>
        </member>
        <member name="F:GLUScrollView.scrollChildrenOffset">
            <summary>
            Scrollchildren offset variable. Used to draw scroll children in viewport
            </summary>
        </member>
        <member name="M:GLUScrollView.DefaultDrawViewport(UnityEngine.Vector3)">
            <summary>
            Draws default presentation of viewport content. Internal use
            </summary>
            <param name="scale">Scale</param>
        </member>
        <member name="M:GLUScrollView.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws scrollview with provided offset and scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUScrollView.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws scrollview with provided offset and scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="maxX">Viewport right border</param>
            <param name="maxY">Viewport bottom border</param>
            <param name="minX">Viewport left border</param>
            <param name="minY">Viewport top border</param>
        </member>
        <member name="M:GLUScrollView.ChildByCoord(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Overrides base.ChildByCoord(coord) method. Searches among scroll children by provided coordinate
            </summary>
            <param name="coord">Coordinates</param>
            <param name="enabledOnly">Enabled controls filter</param>
            <returns>Scrollchild, containing provided coordinates, if found one, and null otherwize </returns>
        </member>
        <member name="M:GLUScrollView.ScrollBy(System.Single,System.Single)">
            <summary>
            Scrolls by x and y. Values are clamped, if out of bounds 
            </summary>
            <param name="x">X scroll delta in pixels</param>
            <param name="y">Y scroll delta in pixels</param>
        </member>
        <member name="M:GLUScrollView.SetScroll(System.Single,System.Single)">
            <summary>
            Sets absolute horizontal and vertical scroll positions. Values are clamped, if out of bounds 
            </summary>
            <param name="x">Horizontal scroll absolute value in pixels</param>
            <param name="y">Vertical scroll absolute value in pixels</param>
        </member>
        <member name="M:GLUScrollView.SetVertScroll(System.Single)">
            <summary>
            Sets vertical scroll offset position in pixels. Values are clamped, if out of bounds 
            </summary>
            <param name="y">Vertical scroll absolute value in pixels</param>
        </member>
        <member name="M:GLUScrollView.SetHorScroll(System.Single)">
            <summary>
            Sets horizontal scroll offset position in pixels. Values are clamped, if out of bounds 
            </summary>
            <param name="x">Horizontal scroll absolute value in pixels</param>
        </member>
        <member name="M:GLUScrollView.HasChild(GLUControl)">
            <summary>
            Overrides base.HasChild. Checks if child control is contained among the scrollChildren and children lists
            </summary>
            <param name="child">Child to check</param>
            <returns>True, if child is contained </returns>
        </member>
        <member name="M:GLUScrollView.HasScrollChild(GLUControl)">
            <summary>
            Checks if child control is contained among the scrollChildren list
            </summary>
            <param name="child">Child to check</param>
            <returns>True, if child is contained </returns>
        </member>
        <member name="M:GLUScrollView.RemoveScrollChild(GLUControl)">
            <summary>
            Removes scrollchild
            </summary>
            <param name="child">Child to remove</param>
        </member>
        <member name="M:GLUScrollView.ToggleVisualUpdates(System.Boolean)">
            <summary>
            Toggles visual updates
            </summary>
            <param name="visible">Sets the disableVisualUpdates flag for itself, chidren and scrollchildren</param>
        </member>
        <member name="M:GLUScrollView.PrepareSerialization">
            <summary>
            This method is called internally before serialization
            </summary>
        </member>
        <member name="M:GLUScrollView.PrepareDeserialization">
            <summary>
            This method is called internally before deserialization
            </summary>
        </member>
        <member name="M:GLUScrollView.Initialize">
            <summary>
            Used for the first initialization of the object
            </summary>
        </member>
        <member name="M:GLUScrollView.SetParent(GLUObject)">
            <summary>
            Sets parent of scroll view and of all its children
            </summary>
            <param name="parent">New parent</param>
        </member>
        <member name="M:GLUScrollView.UnFocus(GLUControl,GLUControl,System.Boolean)">
            <summary>
            Common unfocus handler
            </summary>
            <param name="sender">Sender contro</param>
            <param name="focused">Focused control</param>
            <param name="internalCall">Internal call</param>
        </member>
        <member name="M:GLUScrollView.StartDragScrollMode">
            <summary>
            Internal. Set up start drag mode. 
            </summary>
        </member>
        <member name="M:GLUScrollView.Drag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal use. Drag handler
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">If true, the call is made from child to parent control. Otherwize, it is direct call from terminal controller</param>
        </member>
        <member name="M:GLUScrollView.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal use. Start drag handler
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">If true, the call is made from child to parent control. Otherwize, it is direct call from terminal controller</param>
        </member>
        <member name="M:GLUScrollView.EndDrag(GLUControl,System.Boolean)">
            <summary>
            Internal use. End drag handler
            </summary>
            <param name="target">Drop target</param>
            <param name="internalCall">If true, the call is made from child to parent control. Otherwize, it is direct call from terminal controller</param>
        </member>
        <member name="M:GLUScrollView.NeedRepaint(GLUObject)">
            <summary>
            Call this to say to parent, that you need to repaint. Generally used, when parent is GLUScrollView to cut out unnesessary children draws, when idle.
            </summary>
        </member>
        <member name="M:GLUScrollView.NeedRepaint">
            <summary>
            Call this to say to parent, that you need to repaint. Generally used, when parent is GLUScrollView, to cut out unnesessary children draws, when idle.
            </summary>
        </member>
        <member name="M:GLUScrollView.Setup">
            <summary>
            Sets handlers after deserialization
            </summary>
        </member>
        <member name="M:GLUScrollView.ClearScrollChildren">
            <summary>
            Clears scroll children
            </summary>
        </member>
        <member name="M:GLUScrollView.Destroy">
            <summary>
            Destroys object
            </summary>
        </member>
        <member name="M:GLUScrollView.Reorder">
            <summary>
            Sorts children and scrollchildren controls list by tabOrder
            </summary>
        </member>
        <member name="M:GLUScrollView.ChildChanged(GLUObject)">
            <summary>
            Called by child, when it changes its position or alignment
            </summary>
            <param name="child">Changed child</param>
        </member>
        <member name="M:GLUScrollView.WheelRotated(UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Wheel rotation internal handler
            </summary>
            <param name="mp">Input position</param>
            <param name="wheelDelta">Wheel delta</param>
            <param name="internalCall">If true, the call is made from child to parent control. Otherwize, it is direct call from terminal controller</param>
        </member>
        <member name="M:GLUScrollView.FocusNextChild(GLUControl)">
            <summary>
            Focuses next scrollChild
            </summary>
            <param name="focused">Currently focused control</param>
        </member>
        <member name="M:GLUScrollView.ChildFocused(GLUControl)">
            <summary>
            Tells parent, that child has benn focused
            </summary>
            <param name="child">Internal method, which is called on parent each time, the child control gets focus</param>
        </member>
        <member name="M:GLUScrollView.GetChildrenOfType``1">
            <summary>
            Gets children of provided type. Recursive. Generic
            </summary>
            <typeparam name="T">provided type</typeparam>
            <returns>A list of children</returns>
        </member>
        <member name="M:GLUScrollView.GetChildrenOfType(System.Type)">
            <summary>
            Gets children of provided type. Recursive.Non-generic
            </summary>
            <param name="type">System.type parameter</param>
            <returns>A list of children</returns>
        </member>
        <member name="M:GLUScrollView.GetChildByName(System.String,System.Boolean)">
            <summary>
            Returns child with provided name. Non-recursive or recursive
            </summary>
            <param name="name">Name of control to search</param>
            <param name="recursive">If true, searches all children and their childen , etc..</param>
            <returns>Child with provided name, if found any</returns>
        </member>
        <member name="M:GLUScrollView.GetChildByID(System.String,System.Boolean)">
            <summary>
            Returns child with provided ID. Non-recursive or recursive
            </summary>
            <param name="id">id of child to search</param>
            <param name="recursive">If true, searches all children and their childen , etc..</param>
            <returns>Child with provided ID, if found any</returns>
        </member>
        <member name="M:GLUScrollView.GetObjectByID(System.String,System.Boolean)">
            <summary>
            Returns child with provided ID. Non-recursive or recursive
            </summary>
            <param name="id">id of child to search</param>
            <param name="recursive">If true, searches all children and their childen , etc..</param>
            <returns>Child with provided ID, if found any</returns>
        </member>
        <member name="M:GLUScrollView.GetScrollChildByName(System.String)">
            <summary>
            Returns scroll child with provided name. Non-recursive
            </summary>
            <param name="name">Name to search</param>
            <returns>Child with provided name, if found any</returns>
        </member>
        <member name="M:GLUScrollView.GetAllChildren(System.Boolean)">
            <summary>
            Returns a list of all contained controls. Recursive
            </summary>
            <param name="includeInternal">If true, internal controls are also included</param>
            <returns>List of controls</returns>
        </member>
        <member name="F:GLUScrollView.serializeScrollChildren">
            <summary>
            If true, scroll children will be included in serialization node
            </summary>
        </member>
        <member name="M:GLUScrollView.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Called by serializer to create Xml node and populates it with control's content  
            </summary>
            <param name="doc">Xml document, container of node</param>
            <param name="nodeName">Node name</param>
            <returns>New xml node, filled with control's content</returns>
        </member>
        <member name="M:GLUScrollView.Parse(System.Xml.XmlNode)">
            <summary>
            Parses the provided XML node and fills the fields of provided instance
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUScrollView.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default scrollview. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUScrollView with default content</returns>
        </member>
        <member name="P:GLUScrollView.scrollAreaBounds">
            <summary>
            Bounds of all viewport content
            </summary>
        </member>
        <member name="P:GLUScrollView.viewport">
            <summary>
            Viewport, where scroll childs are drawn
            </summary>
        </member>
        <member name="P:GLUScrollView.showHorScrollBar">
            <summary>
            If set to true, default horizontal scrollbar is displayed
            </summary>
        </member>
        <member name="P:GLUScrollView.showVertScrollBar">
            <summary>
            If set to true, default vertical scrollbar is displayed
            </summary>
        </member>
        <member name="P:GLUScrollView.viewportOffset">
            <summary>
            Offset of viewport frame. Scrolled controls are drawed with this offset
            </summary>
        </member>
        <member name="P:GLUScrollView.horScrollbarOffset">
            <summary>
            Horizontal offset of scroll bar from viewport mesh
            </summary>
        </member>
        <member name="P:GLUScrollView.vertScrollbarOffset">
            <summary>
            Vertical offset of scroll bar from viewport mesh
            </summary>
        </member>
        <member name="P:GLUScrollView.scrollChildren">
            <summary>
            List of scroll children
            </summary>
        </member>
        <member name="P:GLUScrollView.useSharedRenderTexture">
            <summary>
            If true, common shared render texture will be used for viewport drawing. This is useful for creating controls, which has only one instance of whole class visible at the moment(for example, items list of the combobox)
            </summary>
        </member>
        <member name="P:GLUScrollView.renderTexture">
            <summary>
            Texture of viewport
            </summary>
        </member>
        <member name="P:GLUScrollView.popupControls">
            <summary>
            List of popup controls (combo box list, popup menu). Popup controls are checked first of all, and would be drewn at last
            </summary>
        </member>
        <member name="P:GLUScrollView.horScrollBar">
            <summary>
            Horizontal scrollbar child control
            </summary>
        </member>
        <member name="P:GLUScrollView.vertScrollBar">
            <summary>
            Vertical scrollar child control
            </summary>
        </member>
        <member name="P:GLUScrollView.viewportScale">
            <summary>
            Viewport's uniform scale
            </summary>
        </member>
        <member name="F:GLUListBox._itemsControl">
            <summary>
             Internal items control
            </summary>
        </member>
        <member name="M:GLUListBox.SetupItemsControl(GLUButtonsList)">
            <summary>
            Internal. Sets up provided items control
            </summary>
            <param name="value">New Items control</param>
        </member>
        <member name="M:GLUListBox.CorrectHorViewportOffset">
            <summary>
            Used to correct viewport offset when it is changed (Usually, to apply constraints) 
            </summary>
        </member>
        <member name="M:GLUListBox.SetupItems(GLUList{GLUListItem})">
            <summary>
            Internal. Sets up a new items list. 
            </summary>
            <param name="value">New items list</param>
        </member>
        <member name="F:GLUListBox.OnSelectionChanged">
            <summary>
            Selection action. Triggered after selection changes.
            </summary>
        </member>
        <member name="M:GLUListBox.#ctor">
            <summary>
            Parameterless constructor for deserialization purposes
            </summary>
        </member>
        <member name="M:GLUListBox.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.Boolean,System.Boolean,GLUStyle,GLUListItem[])">
            <summary>
            Simple constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>
            <param name="multiSelect">If true, allows several items to be selected at the same time</param>
            <param name="items">Items array or list</param>
            <param name="style">Control style. If null or omitted, default style will be used</param>
            <param name="useSharedRenderTexture">If true, common render texture will be used. It helps to reduce memory usage, when drawing popup controls (i. e. items list of combobox)</param>
            <example>
            This example shows how to use GLUListBox constructor
            <code>
            \code
            GLUListItem[] il = new GLUListItem[3] { new GLUListItem("Item 0", 0), new GLUListItem("Item 1", 1), new GLUListItem("Item 2", 2)};
            GLUListBox fileBox = new GLUListBox(this, "fileBox", new GLUNumber(10), new GLUNumber(10), new GLUNumber(256), new GLUNumber(256), true, false, false, null, il);
            AddChild(fileBox);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUListBox.ItemControlRefreshed(GLUControl)">
            <summary>
            Occures, when control needs refresh
            </summary>
            <param name="sender">Control to refresh</param>
        </member>
        <member name="M:GLUListBox.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUListBox.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUListBox.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUListBox.AddItem(System.String,System.Object)">
            <summary>
            Adds item indirect
            </summary>
            <param name="text">Text of item</param>
            <param name="obj">Object, attached to item</param>
        </member>
        <member name="M:GLUListBox.AddItem(GLUListItem)">
            <summary>
            Adds item directly
            </summary>
            <param name="li">Item to add</param>
        </member>
        <member name="M:GLUListBox.RemoveItem(GLUListItem)">
            <summary>
            Removes item
            </summary>
            <param name="li">Item to remove</param>
        </member>
        <member name="M:GLUListBox.ChildChanged(GLUObject)">
            <summary>
            Called by child, when it changes its position or alignment
            </summary>
            <param name="child">Changed child</param>
        </member>
        <member name="M:GLUListBox.UpdateScrollBars">
            <summary>
            Internal. Updates scrollbars visual state
            </summary>
        </member>
        <member name="M:GLUListBox.ChildFocused(GLUControl)">
            <summary>
            Internal. Tells control, that its child has got a focus
            </summary>
            <param name="child">Focused child</param>
        </member>
        <member name="M:GLUListBox.InternalGenerateMeshes">
            <summary>
            Internal generate meshes. Used, when once-invisible-and-now-visible control needs mesh generation. 
            </summary>
        </member>
        <member name="M:GLUListBox.RefreshScrollView">
            <summary>
            Generates items and reinits the control
            </summary>
        </member>
        <member name="M:GLUListBox.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws listbox with provided offset and scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUListBox.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws listbox with provided offset and scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="maxX">Viewport right border</param>
            <param name="maxY">Viewport bottom border</param>
            <param name="minX">Viewport left border</param>
            <param name="minY">Viewport top border</param>
        </member>
        <member name="M:GLUListBox.ClearSelection">
            <summary>
            Clears list of currently selected items
            </summary>
        </member>
        <member name="M:GLUListBox.ResetState">
            <summary>
            Resets listbox states
            </summary>
        </member>
        <member name="M:GLUListBox.ClearItems">
            <summary>
            Clears items
            </summary>
        </member>
        <member name="M:GLUListBox.SelectItem(GLUListItem)">
            <summary>
            Selects provided Item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:GLUListBox.SelectItem(System.Int32)">
            <summary>
            Selects item by provided index
            </summary>
            <param name="index">Item index in items list</param>
        </member>
        <member name="M:GLUListBox.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUListBox.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUListBox.Destroy">
            <summary>
            Destroys listbox
            </summary>
        </member>
        <member name="M:GLUListBox.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUListBox from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUListBox</returns>
        </member>
        <member name="M:GLUListBox.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default GLUListBox. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUListBox with default content</returns>
        </member>
        <member name="P:GLUListBox.itemsControl">
            <summary>
            Items control. A prototype of any child menuitem 
            </summary>
        </member>
        <member name="P:GLUListBox.OnAddItem">
            <summary>
            Add item action handler
            </summary>
        </member>
        <member name="P:GLUListBox.OnRemoveItem">
            <summary>
            Remove item action handler
            </summary>
        </member>
        <member name="P:GLUListBox.OnItemsChanged">
            <summary>
            This action is called, when items memeber is changed or added od deleted
            </summary>
        </member>
        <member name="P:GLUListBox.items">
            <summary>
            List of menu items
            </summary>
        </member>
        <member name="P:GLUListBox.lastSelectedItem">
            <summary>
            Last selected/deselected item. If no item  was previously selected, contains null 
            </summary>
        </member>
        <member name="P:GLUListBox.multiSelect">
            <summary>
            Allow to select multiple items
            </summary>
        </member>
        <member name="P:GLUListBox.selectedItems">
            <summary>
            If multiselect == true, holds a list of selected items. If you want to select an item from code, you shoud use SelectItem method
            </summary>
        </member>
        <member name="P:GLUListBox.scrollChildren">
            <summary>
            Controls, which are rendered in viewport
            </summary>
        </member>
        <member name="T:GLUGLUButtonSerializer">
            <summary>
            Custom serializer for GLUButton class
            </summary>
        </member>
        <member name="M:GLUGLUButtonSerializer.Deserialize(System.String)">
            <summary>
            Creates new GLUButton instance filling it with string parsing results
            </summary>
            <param name="text">String to parse</param>
            <returns>Since GLUButton cannot be deserialized form string, throws an exception</returns>
        </member>
        <member name="M:GLUGLUButtonSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUButton instance filling it with node parsing results
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUButton instance</returns>
        </member>
        <member name="M:GLUGLUButtonSerializer.Serialize(System.Object)">
            <summary>
            Converts object and all its fields to text
            </summary>
            <param name="obj">Object to convert</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="M:GLUGLUButtonSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node, filling it with object's content
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="doc">Parent Xml document</param>
            <returns>New Xml node</returns>
        </member>
        <member name="M:GLUGLUButtonSerializer.GetInstance">
            <summary>
            Common method for custom serializers creation
            </summary>
            <returns>An instance of serializer</returns>
        </member>
        <member name="T:IGLUScrollBar">
            <summary>
            Comon scrollbar interface
            </summary>
        </member>
        <member name="T:GLUVScrollBarStyle">
            <summary>
            Vertical scrollbar style 
            </summary>
        </member>
        <member name="T:GLUScrollBarStyle">
            <summary>
            Scroll bar style. Scroll bar contains four buttons: increase/decrease, track, thumbnail
            </summary>
        </member>
        <member name="F:GLUScrollBarStyle.decreaseButtonStyle">
            <summary>
            Decrease button style
            </summary>
        </member>
        <member name="F:GLUScrollBarStyle.increaseButtonStyle">
            <summary>
            Increase button style
            </summary>
        </member>
        <member name="F:GLUScrollBarStyle.trackStyle">
            <summary>
            Track button style
            </summary>
        </member>
        <member name="F:GLUScrollBarStyle.thumbnailStyle">
            <summary>
            Thumbnail button style
            </summary>
        </member>
        <member name="F:GLUScrollBarStyle.idButtonStep">
            <summary>
            Increase/decrease relative step
            </summary>
        </member>
        <member name="F:GLUScrollBarStyle.showButtons">
            <summary>
            If true, increase/decrease buttons will be displayed
            </summary>
        </member>
        <member name="M:GLUScrollBarStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUScrollBarStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLUVScrollBarStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUVScrollBarStyle.CreateObject">
            <summary>
            Creates default vertical scrollbar with this style
            </summary>
            <returns>New GLUVscrollBar instance</returns>
        </member>
        <member name="M:GLUVScrollBarStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created vertical scrollbar style</returns>
        </member>
        <member name="T:GLUHintStyle">
            <summary>
            Style for GLUHint
            </summary>
        </member>
        <member name="F:GLUHintStyle.backgroundLayer">
            <summary>
            Background layer style
            </summary>
        </member>
        <member name="F:GLUHintStyle.textLayer">
            <summary>
            Text layer style
            </summary>
        </member>
        <member name="M:GLUHintStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUHintStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUHintStyle.CreateDefault">
            <summary>
            Creates default hint style for GLUInternalText primitive
            </summary>
            <returns>Newly created style</returns>
        </member>
        <member name="T:GLUCalendar">
            <summary>
            Calendar control
            </summary>
        </member>
        <member name="F:GLUCalendar.dayButtonStyle">
            <summary>
            Day button style
            </summary>
        </member>
        <member name="F:GLUCalendar.currentDayButtonStyle">
            <summary>
            Day button style
            </summary>
        </member>
        <member name="M:GLUCalendar.CreateSelectedDayImage(GLUCalendarStyle)">
            <summary>
            Internal method. Creates hovered day image primitive to draw it around hovered day in a daytable
            </summary>
            <param name="style">Calendar style</param>
        </member>
        <member name="M:GLUCalendar.CreateDisabledDayImage(GLUCalendarStyle)">
            <summary>
            Internal method. Creates hovered day image primitive to draw it around hovered day in a daytable
            </summary>
            <param name="style">Calendar style</param>
        </member>
        <member name="M:GLUCalendar.CreateHoveredDayImage(GLUCalendarStyle)">
            <summary>
            Internal method. Creates hovered day image primitive to draw it around hovered day in a daytable
            </summary>
            <param name="style">Calendar style</param>
        </member>
        <member name="M:GLUCalendar.CreatePrevButton(GLUCalendarStyle)">
            <summary>
            Internal. Used to create prev button control
            </summary>
            <param name="style">Current calendar style</param>
        </member>
        <member name="M:GLUCalendar.CreateNextButton(GLUCalendarStyle)">
            <summary>
            Internal. Used to create next button control
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:GLUCalendar.CreateMonthLabel(GLUCalendarStyle)">
            <summary>
            Internal use. Creates month Label.
            </summary>
            <param name="style">Calendar style</param>
        </member>
        <member name="F:GLUCalendar._cols">
            <summary>
            Columns count in day table
            </summary>
        </member>
        <member name="F:GLUCalendar.buttonPadding">
            <summary>
            Buttons padding in day table
            </summary>
        </member>
        <member name="M:GLUCalendar.SetDate(System.Nullable{System.DateTime})">
            <summary>
            Sets date and updates visuals
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLUCalendar.SetStartDate(System.Nullable{System.DateTime})">
            <summary>
            Sets date and updates visuals
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:GLUCalendar.SetEndDate(System.Nullable{System.DateTime})">
            <summary>
            Sets date and updates visuals
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="F:GLUCalendar.OnChange">
            <summary>
            Change delegate. For example, month change
            </summary>
        </member>
        <member name="F:GLUCalendar.OnChangeValue">
            <summary>
            "Date" field change delegate
            </summary>
        </member>
        <member name="M:GLUCalendar.#ctor">
            <summary>
            Parameterless constructor. Used in deserializer
            </summary>
        </member>
        <member name="M:GLUCalendar.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,System.Boolean,System.Nullable{System.DateTime},System.Globalization.CultureInfo,GLUStyle)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="visible">Control's visibility</param>
            <param name="date">Date</param>
            <param name="style">Control style</param>
            <param name="culture">Calendar's culture</param>
            <example>
            This example shows how to use GLUCalendar constructor
            <code>
            \code
            calendar = new GLUCalendar(this, "calendar", new GLUNumber(0), new GLUNumber(0), false, DateTime.Now, CultureInfo.CurrentCulture, "calendar");
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUCalendar.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUCalendar.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUCalendar.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUCalendar.InputMove(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal. Input move handler 
            </summary>
            <param name="mp">Cursor position</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUCalendar.InputPressed(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal. Input press handler 
            </summary>
            <param name="mp">Cursor position</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUCalendar.SetFocus">
            <summary>
            Sets control as focused
            </summary>
        </member>
        <member name="M:GLUCalendar.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Start
            </summary>
            <param name="mp"></param>
            <param name="internalCall"></param>
        </member>
        <member name="M:GLUCalendar.RefreshControl">
            <summary>
            Generates meshes
            </summary>
        </member>
        <member name="M:GLUCalendar.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws control with provided offset and scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUCalendar.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws control with provided offset and scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="maxX">Viewport right border</param>
            <param name="maxY">Viewport bottom border</param>
            <param name="minX">Viewport left border</param>
            <param name="minY">Viewport top border</param>
        </member>
        <member name="M:GLUCalendar.Destroy">
            <summary>
            Destroys control
            </summary>
        </member>
        <member name="M:GLUCalendar.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUCalendar.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUCalendar.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUCalendar  from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="M:GLUCalendar.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default calendar. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUCalendar with default content</returns>
        </member>
        <member name="P:GLUCalendar.selectedDayImage">
            <summary>
            Selected day primitive
            </summary>
        </member>
        <member name="P:GLUCalendar.hoveredDayImage">
            <summary>
            Hovered day primitive
            </summary>
        </member>
        <member name="P:GLUCalendar.disabledDayImage">
            <summary>
            Hovered day primitive
            </summary>
        </member>
        <member name="P:GLUCalendar.prevButton">
            <summary>
            Decreases current month
            </summary>
        </member>
        <member name="P:GLUCalendar.nextButton">
            <summary>
            Increases current month
            </summary>
        </member>
        <member name="P:GLUCalendar.monthLabel">
            <summary>
            Current month and year
            </summary>
        </member>
        <member name="P:GLUCalendar.monthsPagesCount">
            <summary>
            Month pages count.  
            </summary>
        </member>
        <member name="P:GLUCalendar.cols">
            <summary>
            Columns count in day table
            </summary>
        </member>
        <member name="P:GLUCalendar.textStyle">
            <summary>
            Day table text style
            </summary>
        </member>
        <member name="P:GLUCalendar.date">
            <summary>
            Current date
            </summary>
        </member>
        <member name="P:GLUCalendar.startDate">
            <summary>
            Low border of enabled dates
            </summary>
        </member>
        <member name="P:GLUCalendar.endDate">
            <summary>
            High border of enabled dates
            </summary>
        </member>
        <member name="P:GLUCalendar.culture">
            <summary>
            Current culture
            </summary>
        </member>
        <member name="P:GLUCalendar.cultureName">
            <summary>
            Current culture name. Used for deserialization
            </summary>
        </member>
        <member name="T:GLUMenuItem">
            <summary>
            Menu item
            </summary>
        </member>
        <member name="T:GLUListItem">
            <summary>
            Item of List box, combobox 
            </summary>
        </member>
        <member name="M:GLUListItem.SetText(System.String)">
            <summary>
            Internal. Sets up new text value
            </summary>
            <param name="value">New valule</param>
        </member>
        <member name="M:GLUListItem.SetObj(System.Object)">
            <summary>
            Sets up an obj field
            </summary>
            <param name="value">New obj value</param>
        </member>
        <member name="F:GLUListItem._glyphTexture">
            <summary>
            Internal. Item glyph
            </summary>
        </member>
        <member name="M:GLUListItem.SetGlyphTexture(GLUTexture)">
            <summary>
            Sets glyph texture value
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="F:GLUListItem.control">
            <summary>
            Item representation in parent control. Internal
            </summary>
        </member>
        <member name="F:GLUListItem.index">
            <summary>
            Item index in list box
            </summary>
        </member>
        <member name="M:GLUListItem.#ctor(System.String,System.Object,GLUControl,System.Int32,GLUTexture)">
            <summary>
            Constructor with full set of arguments
            </summary>
            <param name="text">Item text</param>
            <param name="obj">Attached object</param>
            <param name="control">Item's control in list box</param>
            <param name="index">Item's index in list box</param>
            <param name="glyphTexture">Item's glyph</param>
            <example>
            This example shows how to use GLUListItem constructor
            <code>
            \code
            GLUListItem li = new GLUListItem("Folder", null, null, -1, @"GLU/Controls/Textures/FileBrowser/folder");
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUListItem.#ctor(System.String,System.Object,GLUTexture)">
            <summary>
            Constructor
            </summary>
            <param name="text">Item text</param>
            <param name="obj">Attached object</param>
            <param name="glyphTexture">Item's glyph</param>
        </member>
        <member name="M:GLUListItem.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUListItem.UpdateControl(GLUControl)">
            <summary>
            Associates and updates provided control with this item. 
            </summary>
            <param name="c">Provided control</param>
        </member>
        <member name="M:GLUListItem.Destroy(GLUListItem)">
            <summary>
            Destroys list item 
            </summary>
            <param name="li">Item to destroy</param>
        </member>
        <member name="M:GLUListItem.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Called by serializer to create Xml node and populates it with control's content  
            </summary>
            <param name="doc">Xml document, container of node</param>
            <param name="nodeName">Node name</param>
            <returns>New xml node, filled with control's content</returns>
        </member>
        <member name="M:GLUListItem.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUListItem.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUListItem from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="P:GLUListItem.text">
            <summary>
            Text, displayed in listox
            </summary>
        </member>
        <member name="P:GLUListItem.obj">
            <summary>
            Object, attached to item
            </summary>
        </member>
        <member name="P:GLUListItem.glyphTexture">
            <summary>
            Item glyph
            </summary>
        </member>
        <member name="F:GLUMenuItem.name">
            <summary>
            Menu item name
            </summary>
        </member>
        <member name="F:GLUMenuItem.submenu">
            <summary>
            Submenu control, if item contains subitems
            </summary>
        </member>
        <member name="M:GLUMenuItem.SetItems(GLUList{GLUListItem})">
            <summary>
            Internal. Sets up new items
            </summary>
            <param name="value">New items</param>
        </member>
        <member name="M:GLUMenuItem.#ctor(System.String,System.Object,GLUControlEvent,System.Boolean,GLUMenuItem[])">
            <summary>
            Menu item constructor
            </summary>
            <param name="text">Item text</param>
            <param name="obj">Attached object</param>
            <param name="handler">Handler delegate</param>
            <param name="check">Check flag</param>
            <param name="items">Submenu items</param>
            <example>
            This example shows how to use GLUMenuItem constructor
            <code>
            \code
            GLUPopupMenu popup = AddChild(new GLUPopupMenu(this, "Popup", new GLUNumber(0), new GLUNumber(0), null,
                new GLUMenuItem("Item 1", 0, ItemSelected, 0),
                new GLUMenuItem("Item 2", 1, ItemSelected, false, new GLUMenuItem("Subitem 1", 0, ItemSelected), new GLUMenuItem("Subitem 2", 1, ItemSelected), new GLUMenuItem("Subitem 3", 2, null)),
                new GLUMenuItem("Item 3", 2, ItemSelected),
                new GLUMenuItem("-", -1, null),
                new GLUMenuItem("Item 4", 3, ItemSelected),
                new GLUMenuItem("Item 5", 4, ItemSelected)), false) as GLUPopupMenu;
            .
            .
            .
            private void ItemSelected(GLUControl sender)
            {
                GLUMenuItem mi = (sender.tag as GLUMenuItem);
                mi.isChecked = !mi.isChecked;
                GLUDebug.Log("ItemSelected " + mi);
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUMenuItem.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUMenuItem.Destroy">
            <summary>
            Destroys menu item
            </summary>
        </member>
        <member name="M:GLUMenuItem.UpdateControl(GLUControl)">
            <summary>
            Associates and updates provided control with this item. 
            </summary>
            <param name="c">Provided control</param>
        </member>
        <member name="M:GLUMenuItem.GetObjectByID(System.String,System.Boolean)">
            <summary>
            Internal. Search member holder(item) with provided id among this item and subitems
            </summary>
            <param name="id">provided id</param>
            <param name="recursive">If true, subitems are also included in search</param>
            <returns>Item with provided id</returns>
        </member>
        <member name="M:GLUMenuItem.SetMemberValue(System.String,System.Object,System.Reflection.MemberInfo)">
            <summary>
            Sets member value
            </summary>
            <param name="memberName">Member name</param>
            <param name="value">Member value</param>
            <param name="mi">Optional member info parameter</param>
        </member>
        <member name="M:GLUMenuItem.Destroy(GLUMenuItem)">
            <summary>
            Destroys menu item
            </summary>
            <param name="mi">Item to destroy</param>
        </member>
        <member name="M:GLUMenuItem.ToString">
            <summary>
            Returns string representation 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUMenuItem.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes object to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with object's content</returns>
        </member>
        <member name="M:GLUMenuItem.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling object content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUMenuItem.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUMenuItem from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUMenuItem</returns>
        </member>
        <member name="P:GLUMenuItem.id">
            <summary>
            Menu item id. Usually, string form of GUID.
            </summary>
        </member>
        <member name="P:GLUMenuItem.isChecked">
            <summary>
            Checked flag
            </summary>
        </member>
        <member name="P:GLUMenuItem.handler">
            <summary>
            Handler delegate
            </summary>
        </member>
        <member name="P:GLUMenuItem.items">
            <summary>
            Submenu items
            </summary>
        </member>
        <member name="T:GLUTerminal">
            <summary>
            In-game terminal. Can be screen or mesh-projected.
            </summary>
        </member>
        <member name="F:GLUTerminal.controls">
            <summary>
            List of All forms
            </summary>
        </member>
        <member name="F:GLUTerminal.drawOrder">
            <summary>
            List of all visible forms, sorted by draw order. Last member will be drawn at the top
            </summary>
        </member>
        <member name="F:GLUTerminal.modalControls">
            <summary>
            List of all modal forms in system. Last member is topmost modal form
            </summary>
        </member>
        <member name="F:GLUTerminal.backgroundMesh">
            <summary>
            Terminal background mesh. Is drawn before any controls
            </summary>
        </member>
        <member name="F:GLUTerminal.targetTexture">
            <summary>
            Render texture, the form is rendered onto
            </summary>
        </member>
        <member name="M:GLUTerminal.ControlByCoord(UnityEngine.Vector3)">
            <summary>
            Returns form containing provided coordinates 
            </summary>
            <param name="coord">provided coordinates</param>
            <returns>Form</returns>
        </member>
        <member name="M:GLUTerminal.Activate">
            <summary>
            Activates terminal
            </summary>
        </member>
        <member name="M:GLUTerminal.AnyControlByCoord(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns control containing provided coordinates 
            </summary>
            <param name="coord">provided coordinates</param>
            <param name="enabledOnly">If true, returns only enabled ones</param>
            <returns>Control</returns>
        </member>
        <member name="M:GLUTerminal.InternalProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Processes control key and dispatches events to all focused controls
            </summary>
            <param name="key">Key to process</param>
        </member>
        <member name="M:GLUTerminal.StayOnTopControlByCoord(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Returns one of stay on top control's childs by provided coordinates
            </summary>
            <param name="coord">provided coordinates</param>
            <param name="enabledOnly">If false, ignores disabled controls</param>
            <returns>Control, if found one</returns>
        </member>
        <member name="M:GLUTerminal.SetStayOnTop(GLUControl,System.Boolean)">
            <summary>
            Updates terminal internals, so control actually stays on top 
            </summary>
            <param name="c">Control</param>
            <param name="value">Stay on top value</param>
        </member>
        <member name="M:GLUTerminal.ControlByName(System.String)">
            <summary>
            Returns form with provided name
            </summary>
            <param name="name">Name</param>
            <returns>Form</returns>
        </member>
        <member name="M:GLUTerminal.SetVisible(GLUControl,System.Boolean)">
            <summary>
            Makes control visible in this terminal
            </summary>
            <param name="c">Control to set</param>
            <param name="visible">Control visibility</param>
        </member>
        <member name="M:GLUTerminal.ProcessControlInput(GLUControl)">
            <summary>
            Process control's input
            </summary>
            <param name="c">Control to process</param>
        </member>
        <member name="M:GLUTerminal.ProcessControls">
            <summary>
            Main method for updating forms
            </summary>
            <returns>Input interceptionFlag</returns>
        </member>
        <member name="M:GLUTerminal.UpdateModalBackground">
            <summary>
            Updates modal Bg. Internal
            </summary>
        </member>
        <member name="M:GLUTerminal.DrawControls">
            <summary>
            Main method for drawing forms
            </summary>
        </member>
        <member name="M:GLUTerminal.Render">
            <summary>
            Renders GLU forms
            </summary>
        </member>
        <member name="M:GLUTerminal.SetResolution(System.Int32,System.Int32)">
            <summary>
            Sets terminal's screen resolution
            </summary>
            <param name="width">Screen width</param>
            <param name="height">Screen height</param>
        </member>
        <member name="M:GLUTerminal.SetModal(GLUControl,System.Boolean)">
            <summary>
            Shows provided control as modal one
            </summary>
            <param name="c">Control to set modality</param>
            <param name="drawModalBackground">If true, modal background will be drawn</param>
        </member>
        <member name="M:GLUTerminal.CloseControl(GLUControl)">
            <summary>
            Closes control
            </summary>
            <param name="c">Control to close</param>
        </member>
        <member name="M:GLUTerminal.BringToFront(GLUControl)">
            <summary>
            Brings provided control to the top of all controls
            </summary>
            <param name="c">Control to bring</param>
        </member>
        <member name="M:GLUTerminal.FocusControl(GLUControl)">
            <summary>
            Internal. Sets up new focused control and performs all internal updates with it
            Do not use it directly. Use c.SetFocus() instead.
            </summary>
            <param name="c">New focused control</param>
        </member>
        <member name="M:GLUTerminal.SetControlFocus(GLUControl)">
            <summary>
            Sets control's focus. Internal use
            </summary>
            <param name="c">Control</param>
        </member>
        <member name="M:GLUTerminal.RemoveControl(GLUControl)">
            <summary>
            Removes control from terminal
            </summary>
            <param name="c">Control to remove</param>
            <returns>Result of operation</returns>
        </member>
        <member name="M:GLUTerminal.CheckFocus">
            <summary>
            Checks terminal's focus
            </summary>
            <returns>True if terminal is hit</returns>
        </member>
        <member name="M:GLUTerminal.CheckDistance">
            <summary>
            Check if terminal activation distance is exceeded (user is too far from terminal)
            </summary>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUTerminal.Update(System.Boolean)">
            <summary>
            Process forms and input
            </summary>
        </member>
        <member name="M:GLUTerminal.AddControl(GLUControl)">
            <summary>
            Sets up new control, adding it to controls list
            </summary>
            <param name="c">Control to add</param>
            <returns>Addition result</returns>
        </member>
        <member name="M:GLUTerminal.Awake">
            <summary>
            Set up internal states and variables
            </summary>
        </member>
        <member name="M:GLUTerminal.#ctor(System.String,System.Int32,System.Int32,GLUInteractiveTerminal,UnityEngine.RenderTexture)">
            <summary>
            Constructor
            </summary>
            <param name="monoBehaviour">Parent monobehaviour, terminal is attached to</param>
            <param name="name">Name of terminal</param>
            <param name="targetTexture">If null, terminal will be rendered on screen</param>
            <param name="width">Width of screen or targetTexture</param>
            <param name="height">Height of screen or targetTexture</param>
        </member>
        <member name="M:GLUTerminal.Destroy">
            <summary>
            Destroys terminal and its content
            </summary>
        </member>
        <member name="M:GLUTerminal.Create(System.String,System.Int32,System.Int32,GLUInteractiveTerminal,UnityEngine.RenderTexture)">
            <summary>
            Creates terminal
            </summary>
            <param name="name">Terminal name</param>
            <param name="width">Terminal width</param>
            <param name="height">Teeminal height</param>
            <param name="monoBehaviour">Interactive terminal</param>
            <param name="targetTexture">Target texture, if gameObject terminal, and null, if screen terminal</param>
            <returns>New GLUTerminal instance</returns>
        </member>
        <member name="P:GLUTerminal.monoBehaviour">
            <summary>
            MonoBehavior, terminal is attached to 
            </summary>
        </member>
        <member name="T:GLUPivotType">
            <summary>
            Object pivot type
            </summary>
        </member>
        <member name="F:GLUPivotType.center">
            <summary>
            Pivot is centered
            </summary>
        </member>
        <member name="F:GLUPivotType.parent">
            <summary>
            Pivot value is taken from parent
            </summary>
        </member>
        <member name="F:GLUPivotType.custom">
            <summary>
            Pivot must be set up by user
            </summary>
        </member>
        <member name="T:GLUGLULocalRotationSequenceSerializer">
            <summary>
            GLULocalRotationSequence serializer helper
            </summary>
        </member>
        <member name="M:GLUGLULocalRotationSequenceSerializer.Deserialize(System.String)">
            <summary>
            Parses provided text and creates GLULocalRotationSequence instance 
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLULocalRotationSequence instance</returns>
        </member>
        <member name="M:GLUGLULocalRotationSequenceSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Parses provided Xml node and creates GLULocalRotationSequence instance 
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLULocalRotationSequence instance</returns>
        </member>
        <member name="M:GLUGLULocalRotationSequenceSerializer.Serialize(System.Object)">
            <summary>
            Converts provided object to string 
            </summary>
            <param name="obj">Provided object</param>
            <returns>Text representation of the object</returns>
        </member>
        <member name="M:GLUGLULocalRotationSequenceSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node and fills it with provided object's content
            </summary>
            <param name="obj">Provided object</param>
            <param name="doc">Parent Xml document</param>
            <returns>Xml node</returns>
        </member>
        <member name="M:GLUGLULocalRotationSequenceSerializer.GetInstance">
            <summary>
            Returns an instance of GLUGLULocalRotationSequenceSerializer
            </summary>
            <returns>New GLUGLULocalRotationSequenceSerializer object</returns>
        </member>
        <member name="T:GLUSceneSelectorStyle">
            <summary>
            Label style 
            </summary>
        </member>
        <member name="F:GLUSceneSelectorStyle.selectorMaterial">
            <summary>
            Selection marquee material
            </summary>
        </member>
        <member name="F:GLUSceneSelectorStyle.selectorBorders">
            <summary>
            Selection marquee unstretched borders
            </summary>
        </member>
        <member name="F:GLUSceneSelectorStyle.healthBarBgMaterial">
            <summary>
            Units healthbar background material
            </summary>
        </member>
        <member name="F:GLUSceneSelectorStyle.healthBarBgBorders">
            <summary>
            Units healthbar background unstretched borders
            </summary>
        </member>
        <member name="F:GLUSceneSelectorStyle.healthBarMaterial">
            <summary>
            Units healthbar material
            </summary>
        </member>
        <member name="F:GLUSceneSelectorStyle.healthBarBorders">
            <summary>
            Units healthbar unstretched borders
            </summary>
        </member>
        <member name="F:GLUSceneSelectorStyle.healthBarSize">
            <summary>
            Units healthbar size
            </summary>
        </member>
        <member name="F:GLUSceneSelectorStyle.healthBarOffset">
            <summary>
            Units healthbar offset
            </summary>
        </member>
        <member name="M:GLUSceneSelectorStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUSceneSelectorStyle.#ctor(GLUStyleSheet,System.String,GLUPadding)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="padding">Control padding</param>
        </member>
        <member name="M:GLUSceneSelectorStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created scene selector style</returns>
        </member>
        <member name="T:GLUFormStyle">
            <summary>
            Style for GLUForm control
            </summary>
        </member>
        <member name="F:GLUFormStyle.titleHeight">
            <summary>
            Title height
            </summary>
        </member>
        <member name="F:GLUFormStyle.closeButtonStyle">
            <summary>
            Style for built-in close button
            </summary>
        </member>
        <member name="F:GLUFormStyle.showCloseButton">
            <summary>
            If true, built-in close button will be displayed
            </summary>
        </member>
        <member name="F:GLUFormStyle.hasTitleBar">
            <summary>
            If true, built-in title bar will be displayed
            </summary>
        </member>
        <member name="F:GLUFormStyle.closeButtonXOffset">
            <summary>
            Horizontal offset of close button left side from form's right side 
            </summary>
        </member>
        <member name="F:GLUFormStyle.closeButtonYOffset">
            <summary>
            Vertical offset of close button top side from form's top side 
            </summary>
        </member>
        <member name="M:GLUFormStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUFormStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLUFormStyle.CreateDefault">
            <summary>
            Creates default style for GLUForm control
            </summary>
            <returns>Newly created style</returns>
        </member>
        <member name="P:GLUFormStyle.titleSet">
            <summary>
            Animation set for form title
            </summary>
        </member>
        <member name="T:GLUButtonViewStyle">
            <summary>
            Button view style
            </summary>
        </member>
        <member name="M:GLUButtonViewStyle.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUButtonViewStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUButtonViewStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,System.String,System.String,GLUBorders,GLUPadding,GLURotation,GLUTextStyle,GLUHorizontalAlignment,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="width">Object width</param>
            <param name="height">Object height</param>
            <param name="normal">Normal layer texture</param>
            <param name="hover">Hovered layer texture</param>
            <param name="pressed">Pressed layer texture</param>
            <param name="borders">Textures borders</param>
            <param name="padding">Object padding</param>
            <param name="rotation">Object textures UV rotation</param>
            <param name="textStyle">Text style. Null, if style does not want text</param>
            <param name="textAlign">Text horizontal align</param>
            <param name="fadeInSpeed">Hovered layer fade in speed</param>
            <param name="fadeOutSpeed">Hovered layer fadeout speed</param>
            <example>
            This example shows how to use GLUButtonStyle constructor
            <code>
            \code
            GLUButtonStyle bs = new GLUButtonStyle(GLUStyleSheet.defaultSheet, "button", 0, 0, "GLU/Controls/Textures/Buttons/button_normal", "GLU/Controls/Textures/Buttons/button_hover", "GLU/Controls/Textures/Buttons/button_pressed", new GLUPadding(5), new GLUPadding(5), GLURotation.ccw0, new GLUTextStyle("arial", 12, FontStyle.Bold, new GLUColor(1, 1, 1, 1), false));
            bs.AddLayerStylesToSheet(GLUStyleSheet.defaultSheet);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUButtonViewStyle.CreateDefault">
            <summary>
            Called, when default style sheet is assembled
            </summary>
            <returns>Button style with default content and default name</returns>
        </member>
        <member name="T:GLUVScrollBar">
            <summary>
            Vertical scrollbar control
            </summary>
        </member>
        <member name="T:GLUScrollBar">
            <summary>
            Base class for scrollbar controls
            </summary>
        </member>
        <member name="F:GLUScrollBar.idButtonStep">
            <summary>
            Step of increase/decrease buttons
            </summary>
        </member>
        <member name="F:GLUScrollBar.minValue">
            <summary>
            Min value 
            </summary>
        </member>
        <member name="F:GLUScrollBar.maxValue">
            <summary>
            Max value
            </summary>
        </member>
        <member name="F:GLUScrollBar.internalSize">
            <summary>
            Internal size of scrollbar. Internal use
            </summary>
        </member>
        <member name="F:GLUScrollBar._decreaseButton">
            <summary>
            Itnernal. Button to decrease scroll bar position 
            </summary>
        </member>
        <member name="F:GLUScrollBar._increaseButton">
            <summary>
            Itnernal. Button to increase scroll bar position 
            </summary>
        </member>
        <member name="F:GLUScrollBar._track">
            <summary>
            Internal use. Track button
            </summary>
        </member>
        <member name="F:GLUScrollBar._thumbnail">
            <summary>
            Internal use. Thumbnail button
            </summary>
        </member>
        <member name="F:GLUScrollBar.OnChange">
            <summary>
            Change action. Called, when scrollBarPosition is changed
            </summary>
        </member>
        <member name="M:GLUScrollBar.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Start drag. Internal use
            </summary>
            <param name="mp">Cursor position</param>
            <param name="internalCall">If true, the call is made from child to parent control. Otherwize, it is direct call from terminal controller</param>
        </member>
        <member name="M:GLUScrollBar.CreateDecreaseButton(GLUScrollBarStyle)">
            <summary>
            Internal. Used to create decrease button. Should be overriden in inheritors
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUScrollBar.CreateIncreaseButton(GLUScrollBarStyle)">
            <summary>
            Internal. Used to create increase button. Should be overriden in inheritors
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUScrollBar.CreateTrack(GLUScrollBarStyle)">
            <summary>
            Internal. Used to create track button. Should be overriden in inheritors
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUScrollBar.CreateThumbnail(GLUScrollBarStyle)">
            <summary>
            Internal. Used to create thumbnail button. Should be overriden in inheritors
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUScrollBar.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle)">
            <summary>
            Simple scrollbar constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>    
            <param name="style">Control style</param>
        </member>
        <member name="M:GLUScrollBar.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUScrollBar.ProcessChar(System.Char)">
            <summary>
            Internal. Called by terminal, when control is needed to process character
            </summary>
            <param name="character">Char to process</param>
        </member>
        <member name="M:GLUScrollBar.ProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Internal. Called by terminal, when control is needed to process control key (arrows, tab, etc..) 
            </summary>
            <param name="key">Key code to process</param>
        </member>
        <member name="M:GLUScrollBar.SetFocus">
            <summary>
            Sets control focus
            </summary>
        </member>
        <member name="F:GLUScrollBar.db_width">
            <summary>
            Internal use. Stored decrease button width 
            </summary>
        </member>
        <member name="F:GLUScrollBar.db_height">
            <summary>
            Internal use. Stored increase button width 
            </summary>
        </member>
        <member name="F:GLUScrollBar.ib_width">
            <summary>
            Internal use. Stored decrease button width 
            </summary>
        </member>
        <member name="F:GLUScrollBar.ib_height">
            <summary>
            Internal use. Stored decrease button height
            </summary>
        </member>
        <member name="F:GLUScrollBar.tr_width">
            <summary>
            Internal use. Stored track button width 
            </summary>
        </member>
        <member name="F:GLUScrollBar.tr_height">
            <summary>
            Internal use. Stored track button height
            </summary>
        </member>
        <member name="F:GLUScrollBar.th_width">
            <summary>
            Internal use. Stored thumbnail button width 
            </summary>
        </member>
        <member name="F:GLUScrollBar.th_height">
            <summary>
            Internal use. Stored thumbnail button height
            </summary>
        </member>
        <member name="M:GLUScrollBar.Initialize">
            <summary>
            Used for the first initialization of the object
            </summary>
        </member>
        <member name="M:GLUScrollBar.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUScrollBar.TrackInputDown(GLUControl,UnityEngine.Vector3)">
            <summary>
            Track input down handler
            </summary>
            <param name="sender">Action caller</param>
            <param name="mp">Local cursor position</param>
        </member>
        <member name="M:GLUScrollBar.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUScrollBar.ThumbnailDrag(GLUControl,UnityEngine.Vector3)">
            <summary>
            Internal. Drag thumbnail handler
            </summary>
            <param name="sender">Action caller</param>
            <param name="mp">Local cursor position</param>
        </member>
        <member name="F:GLUScrollBar.startDragCursorPosition">
            <summary>
            Internal. Used tyo store start drag position
            </summary>
        </member>
        <member name="M:GLUScrollBar.ThumbnailStartDrag(GLUControl,UnityEngine.Vector3)">
            <summary>
            Internal. Thumbnail start drag handler
            </summary>
            <param name="sender">Dragged control</param>
            <param name="mp">Input position in local space</param>
        </member>
        <member name="M:GLUScrollBar.IncreaseButtonPress(GLUControl)">
            <summary>
            Internal. Increase button press handler
            </summary>
            <param name="sender">Action caller</param>
        </member>
        <member name="M:GLUScrollBar.DecreaseButtonPress(GLUControl)">
            <summary>
            Internal. Decrease button press handler
            </summary>
            <param name="sender">Action caller</param>
        </member>
        <member name="M:GLUScrollBar.Destroy">
            <summary>
            Destroys object content
            </summary>
        </member>
        <member name="M:GLUScrollBar.SetPosition(System.Single)">
            <summary>
            Set scrollBar position (from minValue to maxValue)
            </summary>
            <param name="position">Position</param>
        </member>
        <member name="M:GLUScrollBar.WheelRotated(UnityEngine.Vector3,System.Single,System.Boolean)">
            <summary>
            Internal. Called by terminal when control is needed to process wheel rotation 
            </summary>
            <param name="mp">Local cursor position</param>
            <param name="wheelDelta">Wheel rotation delta</param>
            <param name="internalCall">If true, the call is made from child to parent control. Otherwize, it is direct call from terminal controller</param>
        </member>
        <member name="M:GLUScrollBar.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUScrollBar.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="P:GLUScrollBar.scrollBarPosition">
            <summary>
            Current scrollbar position
            </summary>
        </member>
        <member name="P:GLUScrollBar.showButtons">
            <summary>
            If true, increase and decrease buttons will be visible
            </summary>
        </member>
        <member name="P:GLUScrollBar.decreaseButton">
            <summary>
            Button to decrease scroll bar position
            </summary>
        </member>
        <member name="P:GLUScrollBar.increaseButton">
            <summary>
            Button to increase scrollar position
            </summary>
        </member>
        <member name="P:GLUScrollBar.track">
            <summary>
            Track button
            </summary>
        </member>
        <member name="P:GLUScrollBar.thumbnail">
            <summary>
            Thumbnail button
            </summary>
        </member>
        <member name="M:GLUVScrollBar.CreateDecreaseButton(GLUScrollBarStyle)">
            <summary>
            Internal. Used to create decrease button
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUVScrollBar.CreateIncreaseButton(GLUScrollBarStyle)">
            <summary>
            Internal. Used to create increase button
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUVScrollBar.CreateTrack(GLUScrollBarStyle)">
            <summary>
            Internal. Used to create track button
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUVScrollBar.CreateThumbnail(GLUScrollBarStyle)">
            <summary>
            Internal. Used to create thumbnail button
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUVScrollBar.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle)">
            <summary>
            Simple scrollbar constructor
            </summary>
            <param name="parent">Control parent</param>
            <param name="name">Control name</param>
            <param name="x">Horizontal position of control</param>
            <param name="y">Vertical position of control</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="visible">Control visibility</param>
            <param name="style">Control style</param>
            <example>
            This example shows how to use GLUHScrollBar constructor
            <code>
            \code
            GLUVScrollBar vScrollBar = AddChild(new GLUVScrollBar(this, "vScrollBar", new GLUNumber(10), new GLUNumber(10), new GLUNumber(24), new GLUNumber(100), true, "vertScrollBar")) as GLUVScrollBar;
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUVScrollBar.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUVScrollBar.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUVScrollBar.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUVScrollBar.RefreshControl">
            <summary>
            Generate meshes. Override it to create custom scrollbars
            </summary>
        </member>
        <member name="M:GLUVScrollBar.TrackInputDown(GLUControl,UnityEngine.Vector3)">
            <summary>
            Internal track input down handler
            </summary>
            <param name="sender">Action caller</param>
            <param name="mp">Loacl cursor position</param>
        </member>
        <member name="M:GLUVScrollBar.ThumbnailDrag(GLUControl,UnityEngine.Vector3)">
            <summary>
            Internal. Thumbnail drag handler
            </summary>
            <param name="sender">Action caller</param>
            <param name="mp">Loacl cursor position</param>
        </member>
        <member name="M:GLUVScrollBar.SetPosition(System.Single)">
            <summary>
            Set scroll bar position
            </summary>
            <param name="position">Position</param>
        </member>
        <member name="M:GLUVScrollBar.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default vertical scroll bar. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Control's horizontal position</param>
            <param name="y">Control's vertical position</param>
            <returns>New instance of GLUVScrollBar with default content</returns>
        </member>
        <member name="M:GLUVScrollBar.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUVScrollBar from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="T:GLUCalendarCombo">
            <summary>
            Calendar combo
            </summary>
        </member>
        <member name="F:GLUCalendarCombo._calendar">
            <summary>
            Internal calendar control
            </summary>
        </member>
        <member name="F:GLUCalendarCombo._date">
            <summary>
            Internal date field
            </summary>
        </member>
        <member name="F:GLUCalendarCombo._culture">
            <summary>
            Internal culture field
            </summary>
        </member>
        <member name="M:GLUCalendarCombo.CreateDropDownControl(GLUComboControlStyle)">
            <summary>
            Creates GLUCalendar instance and assign it to dropdown property
            </summary>
            <param name="style">Calendar style</param>
        </member>
        <member name="M:GLUCalendarCombo.ApplyStyle">
            <summary>
            Applies new style to controls, changing its properties according to style
            </summary>
        </member>
        <member name="M:GLUCalendarCombo.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUCalendarCombo.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUCalendarCombo.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUCalendarCombo.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.Nullable{System.DateTime},GLUStyle)">
            <summary>
            Simple constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>    
            <param name="date">Current date</param>
            <param name="style">Style of the control</param>
            <example>
            This example shows how to use a GLUCalendarCombo constructor
            <code>
            \code
            public static GLUCalendarCombo CreateDefault(GLUObject parent, string name, GLUNumber x, GLUNumber y)
            {
                return new GLUCalendarCombo(parent, name, x, y, new GLUNumber(100), new GLUNumber(22), true, DateTime.Now, "calendarCombo");
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUCalendarCombo.RefreshControl">
            <summary>
            Common method. Used to update control's internal properties and visual appearance, reflecting any change of its public properties
            </summary>
        </member>
        <member name="M:GLUCalendarCombo.Destroy">
            <summary>
            Common destroy override
            </summary>
        </member>
        <member name="M:GLUCalendarCombo.TextEditChanged(GLUControl)">
            <summary>
            Internal text edit change handler
            </summary>
            <param name="sender">Event source</param>
        </member>
        <member name="M:GLUCalendarCombo.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Internally called by serializer to fill xml node with controls content
            </summary>
            <param name="doc">XML Document, for which a node is created</param>
            <param name="nodeName">Name of the node. If omitted, class name will be used as node name</param>
            <returns>Node</returns>
        </member>
        <member name="M:GLUCalendarCombo.Parse(System.Xml.XmlNode)">
            <summary>
            Internally called by deserializer. Parses provided node and fills content of control with parse results 
            </summary>
            <param name="n">Xml node</param>
        </member>
        <member name="M:GLUCalendarCombo.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates an instance of GLUCalendarCombo class with default content
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>A newly created GLUCalendarCombo instance</returns>
        </member>
        <member name="P:GLUCalendarCombo.calendar">
            <summary>
            Calendar control
            </summary>
        </member>
        <member name="P:GLUCalendarCombo.date">
            <summary>
            Current date. Can be null.
            </summary>
        </member>
        <member name="P:GLUCalendarCombo.culture">
            <summary>
            Current culture. Used in date-to-string conversion
            </summary>
        </member>
        <member name="P:GLUCalendarCombo.dateFormat">
            <summary>
            Date format property. Used to convert current date of calendar to a text property of textEdit
            </summary>
        </member>
        <member name="T:GLUButton">
            <summary>
            Custom button. Base class for all button objects
            </summary>
        </member>
        <member name="T:IGLUButton">
            <summary>
            Common button object interface
            </summary>
        </member>
        <member name="P:IGLUButton.OnPress">
            <summary>
            OnPress action property
            </summary>
        </member>
        <member name="M:GLUButton.SetAutoSize(System.Boolean)">
            <summary>
            Sets up autosize flag and performs all nesessary internal operations
            </summary>
            <param name="value">New autoSize value</param>
        </member>
        <member name="M:GLUButton.SetWidthConstraints(GLUConstraints)">
            <summary>
            Sets up new width constraints and performs all nesessary updates with it
            </summary>
            <param name="value">New width constraints</param>
        </member>
        <member name="M:GLUButton.UpdateGLyphLayer">
            <summary>
            Links text layer to textLayer variable
            </summary>
            <returns>True, if update successful</returns>
        </member>
        <member name="M:GLUButton.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUButton.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.Boolean,System.String,System.Boolean,GLUInternalGraphic[])">
             <summary>
             Constructor
             </summary>
             <param name="parent">Control's parent</param>
             <param name="name">Control's name</param>
             <param name="x">Horizontal position</param>
             <param name="y">Vertical position</param>
             <param name="width">Width of control</param>
             <param name="height">Height of control</param>
             <param name="toggle">Toggle button flag</param>
             <param name="layers">List of layers</param>
             <param name="padding">Content padding</param>
             <param name="visible">Visibility flag</param>
             <param name="text">Button caption</param>
             <example>
             This example shows how to use GLUButton constructor
             <code>
             \code
             GLULocalScaleSequence lss;
             GLULocalRotationSequence lrs = new GLULocalRotationSequence(WrapMode.Loop, WrapMode.Loop, 180, new GLUKey&lt;Vector3>(0, Vector3.zero), new GLUKey&lt;Vector3>(4f, new Vector3(0, 0, 360)));
             GLUMaterialColorSequence mcs = new GLUMaterialColorSequence(WrapMode.ClampForever, WrapMode.ClampForever,  3, new GLUKey&lt;Vector4>(0, new Vector4(1, 1, 1, 1)));
            
             GLUAnimationSet glueHUDSet = new GLUAnimationSet();
             
             glueHUDSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.hovered | GLUControlState.start), true, 0, GLUAnimationConflictDecisionType.replace, lrs, mcs));
             
             lrs = new GLULocalRotationSequence(WrapMode.ClampForever, WrapMode.ClampForever, 180, new GLUKey&lt;Vector3>(0, Vector3.zero));
             mcs = new GLUMaterialColorSequence(WrapMode.ClampForever, WrapMode.ClampForever, 3, new GLUKey&lt;Vector4>(0, new Vector4(1, 1, 1, 0.5f)));
             
             glueHUDSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.start), false, 0, GLUAnimationConflictDecisionType.replace, mcs, lrs));
             GLUAnimationSet compassSet = new GLUAnimationSet();
             
             mcs = new GLUMaterialColorSequence(WrapMode.ClampForever, WrapMode.ClampForever, 3, new GLUKey&lt;Vector4>(0, Vector4.one));
             lrs = new GLULocalRotationSequence(WrapMode.Loop, WrapMode.Loop, 180, new GLUKey&lt;Vector3>(0, Vector3.zero), new GLUKey&lt;Vector3>(4 , new Vector3(0, 0, -360)));
             compassSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.hovered | GLUControlState.start), true, 0, GLUAnimationConflictDecisionType.replace, lrs, mcs));
             
             mcs = new GLUMaterialColorSequence(WrapMode.ClampForever, WrapMode.ClampForever, 3, new GLUKey&lt;Vector4>(0, new Vector4(1, 1, 1, 0.75f)));
             lrs = new GLULocalRotationSequence(WrapMode.ClampForever, WrapMode.ClampForever, 180, new GLUKey&lt;Vector3>(0, Vector3.zero));
             
             compassSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.start), false, 0, GLUAnimationConflictDecisionType.replace, mcs, lrs));
             
             GLUAnimationSet satellitesSet = new GLUAnimationSet();
             
             mcs = new GLUMaterialColorSequence(WrapMode.Clamp, WrapMode.Clamp, 3, new GLUKey&lt;Vector4>(0, new Vector4(1, 1, 1, 0.75f)));
             lrs = new GLULocalRotationSequence(WrapMode.Clamp, WrapMode.Clamp, 180, new GLUKey&lt;Vector3>(0, Vector3.zero));
             lss = new GLULocalScaleSequence(WrapMode.Clamp, WrapMode.Clamp, 1, new GLUKey&lt;Vector3>(0, new Vector3(1.4f, 1.4f, 1.4f)));
             
             satellitesSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.hovered | GLUControlState.start), false, 1, GLUAnimationConflictDecisionType.replace, mcs, lrs, lss));
             
             mcs = new GLUMaterialColorSequence(WrapMode.Loop, WrapMode.Loop, 0, new GLUKey&lt;Vector4>(0, new Vector4(1, 1, 1, 0.75f)), new GLUKey&lt;Vector4>(0.5f, new Vector4(1, 1, 1, 0.75f)), new GLUKey&lt;Vector4>(0.55f, new Vector4(1, 0.5f, 0.5f, 1)));
             mcs.AddKey(0.6f, new Vector4(1, 1, 1, 0.75f));
             lrs = new GLULocalRotationSequence(WrapMode.Loop, WrapMode.Loop, 0, new GLUKey&lt;Vector3>(0, Vector3.zero), new GLUKey&lt;Vector3>(9f, new Vector3(0, 0, 360)));
             
             satellitesSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.hovered), true, 0, GLUAnimationConflictDecisionType.replace, mcs, lrs));
             
             mcs = new GLUMaterialColorSequence(WrapMode.Clamp, WrapMode.Clamp, 3, new GLUKey&lt;Vector4>(0, new Vector4(1, 1, 1, 0.5f)));
             lrs = new GLULocalRotationSequence(WrapMode.Clamp, WrapMode.Clamp, 180, new GLUKey&lt;Vector3>(0, Vector3.zero));
             
             satellitesSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.start), false, 1, GLUAnimationConflictDecisionType.replace, mcs, lrs));
             
             lss = new GLULocalScaleSequence(WrapMode.Clamp, WrapMode.Clamp, 1, new GLUKey&lt;Vector3>(0, new Vector3(1f, 1f, 1f)));
             satellitesSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, 0), false, 0, GLUAnimationConflictDecisionType.replace, lss));
             
             GLUAnimationSet pressSet = new GLUAnimationSet();
             
             mcs = new GLUMaterialColorSequence(WrapMode.Clamp, WrapMode.Clamp, 0, new GLUKey&lt;Vector4>(0.0f, new Vector4(1, 1, 1, 0.0f)));
             lss = new GLULocalScaleSequence(WrapMode.Clamp, WrapMode.Clamp, 0, new GLUKey&lt;Vector3>(0, new Vector3(0.25f, 0.25f, 0.25f)));
             
             pressSet.AddAnimation(new GLUAnimation(0, false, 255, GLUAnimationConflictDecisionType.replace, mcs, lss));
             
             mcs = new GLUMaterialColorSequence(WrapMode.Clamp, WrapMode.Clamp, 10, new GLUKey&lt;Vector4>(0, new Vector4(0.75f, 0.85f, 1, 1)), new GLUKey&lt;Vector4>(0.15f, new Vector4(0.75f, 0.85f, 1, 0)));
             lss = new GLULocalScaleSequence(WrapMode.Clamp, WrapMode.Clamp, 0, new GLUKey&lt;Vector3>(0, new Vector3(0.25f, 0.25f, 0.25f)), new GLUKey&lt;Vector3>(0.25f, new Vector3(1.4f, 1.4f, 1.4f)));
             
             pressSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.leftInputButtonPressed, GLUControlState.leftInputButtonPressed | GLUControlState.start), false, 1, GLUAnimationConflictDecisionType.replace, mcs, lss));
             
             GLUAnimationSet sectorsSet = new GLUAnimationSet();
             
             mcs = new GLUMaterialColorSequence(WrapMode.Clamp, WrapMode.Clamp,  0f, new GLUKey&lt;Vector4>(0, new Vector4(1f, 1f, 1f, 0.75f)));
             sectorsSet.AddAnimation(new GLUAnimation(0, false, 255, GLUAnimationConflictDecisionType.replace, mcs));
             
             mcs = new GLUMaterialColorSequence(WrapMode.Loop, WrapMode.Loop, 0);
             mcs.AddKey(0f, new Vector4(0.5f, 0.75f, 1f, 0.75f));
             mcs.AddKey(0.5f, new Vector4(1, 1, 1, 0.75f));
             mcs.AddKey(0.55f, new Vector4(1, 1, 1, 1)); 
             mcs.AddKey(0.6f, new Vector4(1, 1, 1, 0.75f));
             
             sectorsSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.hovered | GLUControlState.start), true, 0, GLUAnimationConflictDecisionType.replace, mcs));
             
             mcs = new GLUMaterialColorSequence(WrapMode.Clamp, WrapMode.Clamp, 0f, new GLUKey&lt;Vector4>(0, new Vector4(1f, 1f, 1f, 0.75f)));
             sectorsSet.AddAnimation(new GLUAnimation(GLUAnimationSet.CreateIndex(GLUControlState.hovered, GLUControlState.start), false, 0, GLUAnimationConflictDecisionType.replace, mcs));
             
             GLUButton testButton0 = AddChild(new GLUButton(this, "AButton0", new GLUNumber(64), new GLUNumber(64), new GLUNumber(128), new GLUNumber(128), new GLUPadding(0), false, "", false, new GLUInternalImage[7]{
                 new GLUInternalImage("pressLayer", "GLU/Controls/Textures/AButton/press", new GLUBorders(0), pressSet),
                 new GLUInternalImage("sectorsLayer", "GLU/Controls/Textures/AButton/sectorBg", new GLUBorders(0), sectorsSet),
                 new GLUInternalImage("starcLayer", "GLU/Controls/Textures/AButton/starc", new GLUBorders(0), null),
                 new GLUInternalImage("satellitesLayer", "GLU/Controls/Textures/AButton/satellites", new GLUBorders(0), satellitesSet),
                 new GLUInternalImage("hudLayer", new GLUNumber(0), new GLUNumber(0), new GLUNumber(96), new GLUNumber(96), "GLU/Controls/Textures/AButton/glueHUD", new GLUBorders(0), GLUHorizontalAlignment.center, GLUVerticalAlignment.middle, glueHUDSet),
                 new GLUInternalImage("compassLayer", new GLUNumber(0), new GLUNumber(0), new GLUNumber(76), new GLUNumber(76), "GLU/Controls/Textures/AButton/compass", new GLUBorders(0), GLUHorizontalAlignment.center, GLUVerticalAlignment.middle, compassSet),
                 new GLUInternalImage("dialLayer", new GLUNumber(0), new GLUNumber(0), new GLUNumber(56), new GLUNumber(56), "GLU/Controls/Textures/AButton/dial", new GLUBorders(0), GLUHorizontalAlignment.center, GLUVerticalAlignment.middle, null)})) as GLUButton;
             \endcode
             </code>
             </example>
        </member>
        <member name="M:GLUButton.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,GLUStyle,GLURotation)">
            <summary>
            Constructor with style
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Control's width</param>
            <param name="height">Control's height</param>
            <param name="visible">Control's visibility</param>
            <param name="style">Control's style</param>
            <param name="text">Button caption</param>
            <param name="rotation">Control's rotation. Internal use</param>
            <example>
            This example shows how to use GLUButton constructor
            <code>
            \code
            GLUButtonStyle btnStyle = new GLUButtonStyle(GLUStyleSheet.defaultSheet, "btn", new GLUNumber(0), new GLUNumber(0), "button_normal", "button_hover", "button_pressed", new GLUBorders(4), new GLUPadding(4));
            GLUButton b = AddChild(new GLUButton(this, "btn", new GLUNumber(10), new GLUNumber(10), new GLUNumber(24), new GLUNumber(100), true, "", btnStyle)) as GLUButton;
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUButton.Initialize">
            <summary>
            Used for the first initialization of the object
            </summary>
        </member>
        <member name="M:GLUButton.TextStyleChanged(GLUTextStyle)">
            <summary>
            Text style change handler
            </summary>
            <param name="ts">Changed style</param>
        </member>
        <member name="M:GLUButton.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUButton.ProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Processes control key. Internal use 
            </summary>
            <param name="key">Keycode to process</param>
        </member>
        <member name="M:GLUButton.InputReleased(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Process input release. Internal
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUButton.InputPressed(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Process input press. Internal
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUButton.ProcessChar(System.Char)">
            <summary>
            Processes char input
            </summary>
            <param name="character">Char to process</param>
        </member>
        <member name="M:GLUButton.Destroy">
            <summary>
            Destroys button
            </summary>
        </member>
        <member name="M:GLUButton.Reset">
            <summary>
            Resets internal control state
            </summary>
        </member>
        <member name="M:GLUButton.ResetState">
            <summary>
            Resets button internals
            </summary>
        </member>
        <member name="M:GLUButton.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal drag handler
            </summary>
            <param name="mp">Start drag cursor position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUButton.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUButton.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUButton.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUButton from provided Xml node
            </summary>
            <param name="node">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="M:GLUButton.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUButton.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parse results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUButton.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default button. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUButton with default content</returns>
        </member>
        <member name="P:GLUButton.toggle">
            <summary>
            If set to true, button will keep its state after input is released 
            </summary>
        </member>
        <member name="P:GLUButton.pressed">
            <summary>
            Pressed flag. If true, button is pressed 
            </summary>
        </member>
        <member name="P:GLUButton.OnPress">
            <summary>
            OnPress delegate. Called when user clicks input button (touch or mouse click)
            </summary>
        </member>
        <member name="P:GLUButton.glyphLayer">
            <summary>
            Gpyph layer. Contains layer with name "glyph" if exists, and null otherwize   
            </summary>
        </member>
        <member name="T:GLUBounds">
            <summary>
            Vector bounds
            </summary>
        </member>
        <member name="F:GLUBounds.min">
            <summary>
            Lower point 
            </summary>
        </member>
        <member name="F:GLUBounds.max">
            <summary>
            Upper point
            </summary>
        </member>
        <member name="M:GLUBounds.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Constructor
            </summary>
            <param name="min">Lower point </param>
            <param name="max">Upper point</param>
        </member>
        <member name="P:GLUBounds.size">
            <summary>
            Vector size
            </summary>
        </member>
        <member name="T:GLUTerminalType">
            <summary>
            Terminal type
            </summary>
        </member>
        <member name="F:GLUTerminalType.undefined">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:GLUTerminalType.screen">
            <summary>
            Terminal is drawn into screen using Camera and has maximum input priority over other types
            </summary>
        </member>
        <member name="F:GLUTerminalType.gameObject">
            <summary>
            Terminal is drawn on any mesh in 3D space and assumes mesh surface as screen surface. All cursor hit coordinates are calculated using UV
            </summary>
        </member>
        <member name="T:GLUInteractiveTerminal">
            <summary>
            Interactive terminal component, used to link GameObject and GLUTerminal together
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.terminal">
            <summary>
            GLUe terminal object
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.terminalName">
            <summary>
            Interactive terminal name. Usually, associated game object name
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.maxDistance">
            <summary>
            Maximum distance, from where terminal reacts input
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.freezeIfInactive">
            <summary>
            If true, terminal will not be affected by input, until it will be activated. 
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.inputCamera">
            <summary>
            Camera to calculate cursor position
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.processingOrder">
            <summary>
            Terminal place in input processing order list
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.width">
            <summary>
            Terminal width
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.height">
            <summary>
            Terminal height
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.aspect">
            <summary>
            Terminal mesh aspect
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.type">
            <summary>
            If set to screen, terminal's content will be displayed on screen
            If Set to gameObject, terminal's content will be rendered to render texture
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.target">
            <summary>
            Default terminal's skin
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.fontMaterial">
            <summary>
            Material, used to draw fonts
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.outlineMaterial">
            <summary>
            Material for drawing geometry primitives
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.terminalMaterial">
            <summary>
            Material for drawing terminal mesh
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.drawCursor">
            <summary>
            If true, cursor will be drawn
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.imageMaterial">
            <summary>
            Material for drawing images
            </summary>
        </member>
        <member name="F:GLUInteractiveTerminal.viewportMeshMaterial">
            <summary>
            Material for drawing viewport mesh
            </summary>
        </member>
        <member name="M:GLUInteractiveTerminal.CreateMesh">
            <summary>
            Creates default terminal mesh if no mesh component present
            </summary>
        </member>
        <member name="M:GLUInteractiveTerminal.OnDestroy">
            <summary>
            Destroys terminal
            </summary>
        </member>
        <member name="M:GLUInteractiveTerminal.Awake">
            <summary>
            Setup of Terminal
            </summary>
        </member>
        <member name="M:GLUInteractiveTerminal.CalculateBounds(UnityEngine.MeshFilter)">
            <summary>
            Measures the terminal viewport
            </summary>
            <returns>Terminal mesh bounds</returns>
        </member>
        <member name="M:GLUInteractiveTerminal.GetInputCoordinates(System.Boolean@,System.Boolean@)">
            <summary>
            Updates terminal's internal mechanics
            </summary>
        </member>
        <member name="M:GLUInteractiveTerminal.OnMouseEnter">
            <summary>
            Unity mouse enter handler.
            </summary>
        </member>
        <member name="M:GLUInteractiveTerminal.OnMouseExit">
            <summary>
            Unity mouse exit handler.
            </summary>
        </member>
        <member name="T:GLUKeyboard">
            <summary>
            Keyboard input holder
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftShiftPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftShiftDown">
            <summary>
            Triggered after key pressed an while it is held down
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftShiftUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftAltPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftAltDown">
            <summary>
            Triggered after key pressed an while it is held down
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftAltUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftCtrlPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftCtrlDown">
            <summary>
            Triggered after key pressed an while it is held down
            </summary>
        </member>
        <member name="F:GLUKeyboard.leftCtrlUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightShiftPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightShiftDown">
            <summary>
            Triggered after key pressed an while it is held down
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightShiftUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightAltPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightAltDown">
            <summary>
            Triggered after key pressed an while it is held down
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightAltUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightCtrlPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightCtrlDown">
            <summary>
            Triggered after key pressed an while it is held down
            </summary>
        </member>
        <member name="F:GLUKeyboard.rightCtrlUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="M:GLUKeyboard.Update">
            <summary>
            Updates Keyboard states
            </summary>
        </member>
        <member name="M:GLUKeyboard.Update(UnityEngine.Event)">
            <summary>
            Updates Keyboard states
            </summary>
        </member>
        <member name="M:GLUKeyboard.GetKeyDown(UnityEngine.KeyCode)">
            <summary>
            Returns key down state
            </summary>
            <param name="key">Key code</param>
            <returns>Key down state</returns>
        </member>
        <member name="M:GLUKeyboard.GetKeyUp(UnityEngine.KeyCode)">
            <summary>
            Returns key up state
            </summary>
            <param name="key">Key code</param>
            <returns>Key up state</returns>
        </member>
        <member name="M:GLUKeyboard.OpenTouchScreenKeyboard(System.String)">
            <summary>
            Invokes TouchScreenKeyboard.Open(..) method
            </summary>
            <param name="text">Initial text in keyboard text edit</param>
            <returns>Keyboard object</returns>
        </member>
        <member name="M:GLUKeyboard.GetTouchScreenKeyboardText(System.Object)">
            <summary>
            Returns text from already opened touchscreen keyboard
            </summary>
            <param name="tsk">Opened touchscreen keyboard</param>
            <returns>Keyboard text</returns>
        </member>
        <member name="M:GLUKeyboard.IsTouchScreenKeyboardDone(System.Object)">
            <summary>
            Checks, if provided touchscreen keyboard has finished its input
            </summary>
            <param name="tsk">Keyboard object</param>
            <returns>True, if keyboard is done</returns>
        </member>
        <member name="M:GLUKeyboard.IsTouchScreenKeyboardActive(System.Object)">
            <summary>
            Checks, if provided touchscreen keyboard is active
            </summary>
            <param name="tsk">Keyboard object</param>
            <returns>True, if keyboard is active</returns>
        </member>
        <member name="M:GLUKeyboard.SetTouchScreenKeyboardActive(System.Object,System.Boolean)">
            <summary>
            Sets up active flag in provided keyboard object
            </summary>
            <param name="tsk">Keyboard object</param>
            <param name="active">New active flag value</param>
        </member>
        <member name="P:GLUKeyboard.shiftPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="P:GLUKeyboard.altPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="P:GLUKeyboard.ctrlPressed">
            <summary>
            Triggered once per press
            </summary>
        </member>
        <member name="P:GLUKeyboard.shiftDown">
            <summary>
            Shift key down state flag
            </summary>
        </member>
        <member name="P:GLUKeyboard.altDown">
            <summary>
            Alt key down state flag
            </summary>
        </member>
        <member name="P:GLUKeyboard.ctrlDown">
            <summary>
            Ctrl key down state flag
            </summary>
        </member>
        <member name="P:GLUKeyboard.shiftUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="P:GLUKeyboard.altUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="P:GLUKeyboard.ctrlUp">
            <summary>
            Triggered once per release
            </summary>
        </member>
        <member name="P:GLUKeyboard.tskType">
            <summary>
            Touchscreen keyboard type
            </summary>
        </member>
        <member name="T:GLUWaitForFixedUpdate">
            <summary>
            Wait for fixed update instruction
            </summary>
        </member>
        <member name="M:GLUWaitForFixedUpdate.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:GLUSerializerTableEntry">
            <summary>
             Serializer table entry
            </summary>
        </member>
        <member name="F:GLUSerializerTableEntry.type">
            <summary>
            Serializer type
            </summary>
        </member>
        <member name="M:GLUSerializerTableEntry.GetInstance(System.Type)">
            <summary>
            Creates an instance of serializer class
            </summary>
            <param name="type">Serializer type</param>
            <returns>Serializer</returns>
        </member>
        <member name="M:GLUSerializerTableEntry.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUSerializerTableEntry.#ctor(System.Type)">
            <summary>
            Constructor 
            </summary>
            <param name="type">Serializer type</param>
        </member>
        <member name="P:GLUSerializerTableEntry.instance">
            <summary>
            Serializer object 
            </summary>
        </member>
        <member name="T:GLUCustomSerializerAttribute">
            <summary>
            Attribute, which indicates, that following class is Serializer for another objects
            </summary>
        </member>
        <member name="F:GLUCustomSerializerAttribute.parsers">
            <summary>
            Global serializers table
            </summary>
        </member>
        <member name="F:GLUCustomSerializerAttribute.targets">
            <summary>
            Object types, which are serializable by this one
            </summary>
        </member>
        <member name="M:GLUCustomSerializerAttribute.#ctor(System.Type[])">
            <summary>
            Constructor 
            </summary>
            <param name="targets">Object types, which are serializable by this one</param>
            <example>
            This example shows how to use GLUCustomSerializerAttribute constructor
            <code>
            \code
            [GLUCustomSerializerAttribute(typeof(GLUKeySequence))]
            public class GLUGLUKeySequenceSerializer : IGLUCustomSerializer
            {
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUCustomSerializerAttribute.GetSerializer(System.Type)">
            <summary>
            Searches serializers table by type parameter and returns Serializer object for provided type  
            </summary>
            <param name="type">Type being serialized</param>
            <returns>An instance of IGLUCustomSerializer class</returns>
            <example>
            This example shows how to use GetSerializer
            <code>
            \code
            string tn = "Vector3";
            Vector3 v = Vector3.zero;
            Type t = GLU.GetType(tn);
            if (t != null)
            {
                ser = GLUCustomSerializerAttribute.GetSerializer(t);
                if (ser != null)
                    v = ser.Deserialize("(1, 1, 1)");
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="T:GLULocalRotationSequence">
            <summary>
            Local rotation sequence. Controls localRotation property of an IGLUTransformable object. 
            </summary>
        </member>
        <member name="M:GLULocalRotationSequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single,GLUKey{UnityEngine.Vector3}[])">
            <summary>
            Constructor
            </summary>
            <param name="preWrapMode">Animation curve wrap mode before first frame</param>
            <param name="postWrapMode">Animation curve wrap mode after last frame</param>
            <param name="keys">Keys list</param>
            <param name="transitionSpeed">Transition speed in seconds</param>
            <example>
            This example shows how to use GLULocalRotationSequence constructor
            <code>
            \code
            GLULocalRotationSequence lrs = new GLULocalRotationSequence(WrapMode.Clamp, WrapMode.Clamp);
            lrs.AddKey(0.5f, Vector3.zero);
            lrs.AddKey(1f, new Vector3(0, 0, 360));
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, lrs));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULocalRotationSequence.#ctor">
            <summary>
            Parameterless constructor
            </summary>
            <example>
            This example shows how to use GLULocalRotationSequence constructor
            <code>
            \code
            GLULocalRotationSequence lrs = new GLULocalRotationSequence();
            los.AddKey(0.5f, Vector3.zero);
            los.AddKey(1f, new Vector3(0, 0, 360));
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, lrs));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULocalRotationSequence.Normalize(UnityEngine.Vector3)">
            <summary>
            Bring each component of Vector3 euler angle to a normal view ( - 180 &lt; A &gt; +180 )
            </summary>
            <param name="a">Vector3 euler angle</param>
            <returns>Normalised Vector3 euler angle</returns>
        </member>
        <member name="M:GLULocalRotationSequence.GetTargetValue(IGLUAnimateable)">
            <summary>
            Returns target's localRotation value
            </summary>
            <param name="target">Target object (must also be IGLUTransformable)</param>
            <returns>localRotation value</returns>
        </member>
        <member name="M:GLULocalRotationSequence.Apply(System.Single,IGLUAnimateable)">
            <summary>
            Applies sequence to the target object. Target must also be an IGLUTransformable
            </summary>
            <param name="time">Sequence time</param>
            <param name="target">Target object</param>
        </member>
        <member name="M:GLULocalRotationSequence.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new instance of GLULocalRotationSequence, filling it with node's parse results
            </summary>
            <param name="n">Node to parse</param>
            <returns>An instance of GLULocalRotationSequence</returns>
        </member>
        <member name="M:GLULocalRotationSequence.Clone">
            <summary>
            Creates a complete copy of the sequence
            </summary>
            <returns>Sequence copy</returns>
        </member>
        <member name="T:GLUButtonsView">
            <summary>
            Buttons view class. Buttons are arranged into columns and rows
            </summary>
        </member>
        <member name="M:GLUButtonsView.SetItemHandlers(GLUControl)">
            <summary>
            Internal. Sets item control list handlers
            </summary>
            <param name="c">Control to process</param>
        </member>
        <member name="M:GLUButtonsView.#ctor">
            <summary>
            Parameterless constructor for deserialization purposes
            </summary>
        </member>
        <member name="M:GLUButtonsView.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle,GLUListItem[])">
            <summary>
            Simple constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>
            <param name="items">Items array or list</param>
            <param name="style">Control style. If null or omitted, default style will be used</param>
            <example>
            This example shows how to use GLUButtonsList constructor
            <code>
            \code
            GLUButtonsList bl = new GLUButtonsList(this, "itemsControl", new GLUNumber(0), new GLUNumber(0), new GLUNumber(0), new GLUNumber(0), true, "button");
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUButtonsView.UpdateControl(System.Int32@,System.Int32@,GLUListItem)">
            <summary>
            Internal. Updates view item's control
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="li">List item</param>
        </member>
        <member name="M:GLUButtonsView.CalculatePaddedContentBounds(GLUConstraints,GLUConstraints,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates absolute object bounds in parent space
            </summary>
            <param name="widthConstraints">Width constraints</param>
            <param name="heightConstraints">Height constraints</param>
            <param name="pw">Specified parent width. If omitted, current parent width will be used</param>
            <param name="ph">Specified parent height. If omitted, current parent height will be used</param>
            <returns>Object bounds</returns>
        </member>
        <member name="M:GLUButtonsView.UpdateAutosizeLayout">
            <summary>
            Updates internal layout and prepares values for refreshing
            </summary>
        </member>
        <member name="M:GLUButtonsView.ResetItemControl(GLUControl)">
            <summary>
            Resets item control state 
            </summary>
            <param name="sender">Item control</param>
        </member>
        <member name="M:GLUButtonsView.SelectItem(GLUListItem)">
            <summary>
            Selects provided item or adds item to selection list if multiSelect == true
            </summary>
            <param name="item">Item to select</param>
        </member>
        <member name="M:GLUButtonsView.ItemSelected(GLUControl)">
            <summary>
            Called, when item control is selected
            </summary>
            <param name="sender">Item control</param>
        </member>
        <member name="M:GLUButtonsView.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUControlsList from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUControlsList</returns>
        </member>
        <member name="M:GLUButtonsView.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default GLUButtonsView. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUControlsList with default content</returns>
        </member>
        <member name="P:GLUButtonsView.OnItemButtonPress">
            <summary>
            Called, when item button pressed
            </summary>
        </member>
        <member name="T:GLUSerializer">
            <summary>
            GLUe XML Serializer class
            </summary>
        </member>
        <member name="M:GLUSerializer.AsString(System.Xml.XmlDocument)">
            <summary>
            Converts provided Xml Document to string
            </summary>
            <param name="xmlDoc">Provided document</param>
            <returns>Document, converted to string</returns>
        </member>
        <member name="F:GLUSerializer.depth">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:GLUSerializer.GetXmlNode(System.Xml.XmlDocument,System.String,System.Object,System.Type)">
            <summary>
            Creates new Xml node and fills it with obj content
            </summary>
            <param name="doc">Parent Xml document</param>
            <param name="name">Node name</param>
            <param name="obj">Provided object</param>
            <param name="t">Object type</param>
            <returns>New Xml node</returns>
            <example>
            This example shows how to use a GetXmlNode method
            <code>
            \code
            XmlDocument doc = new XmlDocument();
            Type t = obj.GetType();
            doc.AppendChild(GetXmlNode(doc, t.ToString(), obj, t));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUSerializer.CreateNode(System.Object,System.Xml.XmlDocument,System.String)">
            <summary>
            Creates an Xml node for provided object
            </summary>
            <param name="obj">Provided object</param>
            <param name="doc">Parent document</param>
            <param name="nodeName">Node name</param>
            <returns>New Xml node</returns>
            <example>
            This example shows how to use CreateNode method
            <code>
            \code
            XmlDocument doc = new XmlDocument();
            GLUButton b = GLUButton.CreateDefault(null, "button", 0, 0);
            XmlNode n = GLUSerializer.CreateNode(b, doc, "ButtonNode");
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUSerializer.Save(System.Object,System.String)">
            <summary>
            Serializes and saves provided object to provided URL
            </summary>
            <param name="obj">Provided object</param>
            <param name="fileName">Provided URL</param>
        </member>
        <member name="M:GLUSerializer.ToString(System.Object)">
            <summary>
            Returns Xml Document, created from provided object, in text format
            </summary>
            <param name="obj">Provided object</param>
            <returns>Xml Document in text format</returns>
        </member>
        <member name="T:GLUStyleEvent">
            <summary>
            Style change event
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:GLUComboBox">
            <summary>
            Combo box
            </summary>
        </member>
        <member name="F:GLUComboBox._listBox">
            <summary>
            Internal listBox field
            </summary>
        </member>
        <member name="M:GLUComboBox.ListBoxItemsChanged(GLUControl)">
            <summary>
            Items change handler of the listbox
            </summary>
            <param name="sender"></param>
        </member>
        <member name="F:GLUComboBox.OnItemSelected">
            <summary>
            Item selected delegete. Called when item is selected
            </summary>
        </member>
        <member name="M:GLUComboBox.ChildChanged(GLUObject)">
            <summary>
            Called, when child object changes its layout
            </summary>
            <param name="child">Child object</param>
        </member>
        <member name="M:GLUComboBox.CreateDropDownControl(GLUComboControlStyle)">
            <summary>
            Creates dropdown control and Assigns it to dropDownControl and listBox properties of provided combo box
            </summary>
            <param name="style">List box style</param>
        </member>
        <member name="M:GLUComboBox.ApplyStyle">
            <summary>
            Applies new style to control
            </summary>
        </member>
        <member name="M:GLUComboBox.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUComboBox.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUComboBox.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUComboBox.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,GLUStyle,GLUListItem[])">
            <summary>
            Simple constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>    
            <param name="text">Text of combo box</param>
            <param name="style">Style of control</param>
            <param name="items">Items</param>
            <example>
            This example shows how to use a GLUComboBox constructor
            <code>
            \code
            public static GLUComboBox CreateDefault(GLUObject parent, string name, GLUNumber x, GLUNumber y)
            {
                return new GLUComboBox(parent, name, x, y, new GLUNumber(100), new GLUNumber(22), true, name, "comboBox");
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUComboBox.SetListItems(GLUListItem[])">
            <summary>
            Replaces items collection with provided one
            </summary>
            <param name="items">provided items collection</param>
        </member>
        <member name="M:GLUComboBox.RefreshControl">
            <summary>
            Generates meshes of the control 
            </summary>
        </member>
        <member name="M:GLUComboBox.ClearItems">
            <summary>
            Clears items 
            </summary>
        </member>
        <member name="M:GLUComboBox.Destroy">
            <summary>
            Prepares control for GC collect
            </summary>
        </member>
        <member name="M:GLUComboBox.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Internally called by serializer to fill xml node with controls content
            </summary>
            <param name="doc">XML Document, for which a node is created</param>
            <param name="nodeName">Name of the node. If omitted, class name will be used as node name</param>
            <returns>Node</returns>
        </member>
        <member name="M:GLUComboBox.Parse(System.Xml.XmlNode)">
            <summary>
            Internally called by deserializer. Parses provided node and fills content of control with parse results 
            </summary>
            <param name="n">Xml node</param>
        </member>
        <member name="M:GLUComboBox.ShowDropDownControl">
            <summary>
            Internal use. Shows dropdown control
            </summary>
        </member>
        <member name="M:GLUComboBox.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates an instance of GLUComboBox class with default content
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>A newly created GLUComboBox instance</returns>
        </member>
        <member name="P:GLUComboBox.listBox">
            <summary>
            List box drop-down control
            </summary>
        </member>
        <member name="P:GLUComboBox.listBoxRowCount">
            <summary>
            Height of the listbox in rows
            </summary>
        </member>
        <member name="P:GLUComboBox.items">
            <summary>
            Items
            </summary>
        </member>
        <member name="P:GLUComboBox.selectedItem">
            <summary>
            Currently selected Item
            </summary>
        </member>
        <member name="T:GLUMessageDialogType">
            <summary>
            Message dialog type
            </summary>
        </member>
        <member name="F:GLUMessageDialogType.reserved">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="F:GLUMessageDialogType.yesNo">
            <summary>
            YesNo dialog
            </summary>
        </member>
        <member name="F:GLUMessageDialogType.Ok">
            <summary>
            Ok dialog
            </summary>
        </member>
        <member name="T:GLUModalResult">
            <summary>
            Modal result
            </summary>
        </member>
        <member name="F:GLUModalResult.reserved">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="F:GLUModalResult.mrNone">
            <summary>
            None
            </summary>
        </member>
        <member name="F:GLUModalResult.mrYes">
            <summary>
            Yes button pressed
            </summary>
        </member>
        <member name="F:GLUModalResult.mrNo">
            <summary>
            No button pressed
            </summary>
        </member>
        <member name="F:GLUModalResult.mrOk">
            <summary>
            Ok button pressed
            </summary>
        </member>
        <member name="F:GLUModalResult.mrCancel">
            <summary>
            Cancel button pressed
            </summary>
        </member>
        <member name="T:GLUMessageDialog">
            <summary>
            Message dialog
            </summary>
        </member>
        <member name="F:GLUMessageDialog.message">
            <summary>
            Dialogue's message 
            </summary>
        </member>
        <member name="F:GLUMessageDialog.messageLabel">
            <summary>
            Message label control
            </summary>
        </member>
        <member name="F:GLUMessageDialog.modalResult">
            <summary>
            Modal result
            </summary>
        </member>
        <member name="F:GLUMessageDialog.type">
            <summary>
            Dialogue type
            </summary>
        </member>
        <member name="M:GLUMessageDialog.CreateControls">
            <summary>
            Creates dialogue's controls
            </summary>
        </member>
        <member name="M:GLUMessageDialog.ShowYesNoModal(System.String,System.String,System.String,System.String,GLUControlEvent)">
            <summary>
            Creates and shows dialogue with provided title, message and two buttons. After selection of any button, dialogue closes and closeHander is called
            </summary>
            <param name="title">Dialogue title</param>
            <param name="message">Dialogue message</param>
            <param name="yesText">"Yes" button text</param>
            <param name="noText">"No" button text</param>
            <param name="closeHandler">Close handler</param>
        </member>
        <member name="M:GLUMessageDialog.ShowOkModal(System.String,System.String,System.String,GLUControlEvent,System.Int32)">
            <summary>
            Creates and shows dialogue with provided title, message one button. After selection of the button, dialogue closes and closeHander is called
            </summary>
            <param name="title">Dialogue title</param>
            <param name="message">Dialogue message</param>
            <param name="OkText">"Ok" button text</param>
            <param name="closeHandler">Close handler</param>
            <param name="width">Dialogue width</param>
        </member>
        <member name="T:GLU3DTools">
            <summary>
            3D mesh and vector helper
            </summary>
        </member>
        <member name="M:GLU3DTools.GeneratePolygon(GLUMesh,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Generates polygon by provided corner points
            </summary>
            <param name="m">Mesh</param>
            <param name="v0">First corner point</param>
            <param name="v1">Second corner point</param>
            <param name="v2">Third corner point</param>
            <param name="v3">Fourth corner point</param>
            <param name="fitUV">If true, first point UV got (0, 0), second - (0, 1), third - (1, 1), fourth - (1, 0). Otherwize, (v0.x, 0), (v1.x, 0), (v1.x, h), (v0.x, h), where h = (v0 - v3).magnitude</param>
        </member>
        <member name="M:GLU3DTools.GeneratePolygon(GLUMesh,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Generates polygon by provided corner points
            </summary>
            <param name="m">Mesh</param>
            <param name="v0">First corner point</param>
            <param name="v1">Second corner point</param>
            <param name="v2">Third corner point</param>
            <param name="v3">Fourth corner point</param>
            <param name="uv0">First point UV coordinates</param>
            <param name="uv1">Second point UV coordinates</param>
            <param name="uv2">Third point UV coordinates</param>
            <param name="uv3">Fourth point UV coordinates</param>
        </member>
        <member name="M:GLU3DTools.Perpendicular(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Creates vector, perpendicular plane (v0, v1, (0, 0, 1)) with magnitude == d
            </summary>
            <param name="v0">First point</param>
            <param name="v1">Second point</param>
            <param name="d">Magnitude</param>
            <returns>Perpendicular vector</returns>
        </member>
        <member name="M:GLU3DTools.Perpendicular(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Creates vector, perpendicular plane (v0, v1, v2) with magnitude == d
            </summary>
            <param name="v0">First point</param>
            <param name="v1">Second point</param>
            <param name="v2">Third point</param>
            <param name="d">Magnitude</param>
            <returns>Perpendicular vector</returns>
        </member>
        <member name="M:GLU3DTools.Intersects(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Checks if two numeric axe intervals intersects
            </summary>
            <param name="v0">First interval start point</param>
            <param name="v1">First interval end point</param>
            <param name="v2">Second interval start point</param>
            <param name="v3">Second interval end point</param>
            <returns>True, if intervals intersects</returns>
        </member>
        <member name="M:GLU3DTools.Intersects(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@)">
            <summary>
            Checks, if two segments intersect in 2D space (x, y)
            </summary>
            <param name="v0">First segment start point</param>
            <param name="v1">First segment end point</param>
            <param name="v2">Second segment start point</param>
            <param name="v3">Second segment end point</param>
            <param name="p">Intersection point, if segments intersecting</param>
            <returns>True, if segments are intercting</returns>
        </member>
        <member name="M:GLU3DTools.GeneratePrizm(GLUMesh,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Generates four sides prizm
            </summary>
            <param name="m">Mesh</param>
            <param name="v0">First base point</param>
            <param name="v1">Second base point</param>
            <param name="depth">Prizm depth</param>
            <param name="heigth">Prism height</param>
            <param name="invertNormals">If true, normals will be inverted</param>
            <param name="cap">If true, prizm caps will be generated</param>
        </member>
        <member name="M:GLU3DTools.GenerateParallelepiped(GLUMesh,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Generates vector-controlled parallelepiped
            </summary>
            <param name="m">Mesh</param>
            <param name="sv">Top base point</param>
            <param name="ev">Bottom base point</param>
            <param name="extent">Side extent</param>
            <param name="invertNormals">If true, normals will be inverted</param>
            <param name="cap">If true, prizm caps will be generated</param>
        </member>
        <member name="M:GLU3DTools.GenerateFrame(GLUMesh,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Generates polygonal frame
            </summary>
            <param name="m">Mesh</param>
            <param name="v0">First base point</param>
            <param name="v1">Second base point</param>
            <param name="bevel">Frame thickness</param>
            <param name="heigth">Frame height</param>
            <example>
            This example shows how to use a GLUScrollView constructor
            <code>
            \code
            GLUMesh m = new GLUMesh();
            GenerateFrame(m, new Vector3(0, 0, 0), new Vector3(1, 0, 0), 0.1f, 1);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLU3DTools.GeneratePortal(GLUMesh,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Generates portal
            </summary>
            <param name="m">Mesh</param>
            <param name="v0">First base vector</param>
            <param name="v1">Second base vector</param>
            <param name="extrusion">Portal extrusion</param>
            <param name="heigth">Portal height</param>
        </member>
        <member name="M:GLU3DTools.GeneratePortalPrizm(GLUMesh,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Generates four sides portal prizm
            </summary>
            <param name="m">Mesh</param>
            <param name="v0">First base point</param>
            <param name="v1">Second base point</param>
            <param name="depth">Prizm depth</param>
            <param name="heigth">Prism height</param>
            <param name="invertNormals">If true, normals will be inverted</param>
            <param name="cap">If true, prizm caps will be generated</param>
        </member>
        <member name="T:GLUVector4Sequence">
            <summary>
            Vector4 animation sequence
            </summary>
        </member>
        <member name="F:GLUVector4Sequence.xCurve">
            <summary>
            Internal animation curve
            </summary>
        </member>
        <member name="F:GLUVector4Sequence.yCurve">
            <summary>
            Internal animation curve
            </summary>
        </member>
        <member name="F:GLUVector4Sequence.zCurve">
            <summary>
            Internal animation curve
            </summary>
        </member>
        <member name="F:GLUVector4Sequence.wCurve">
            <summary>
            Internal animation curve
            </summary>
        </member>
        <member name="M:GLUVector4Sequence.UpdatePreWrapMode(UnityEngine.WrapMode)">
            <summary>
            Internal. Sets up new pre wrap mode and make all nesessary updates
            </summary>
            <param name="value">New post wrap mode</param>
        </member>
        <member name="M:GLUVector4Sequence.UpdatePostWrapMode(UnityEngine.WrapMode)">
            <summary>
            Internal. Sets up new post wrap mode and make all nesessary updates
            </summary>
            <param name="value">New post wrap mode</param>
        </member>
        <member name="M:GLUVector4Sequence.AddKey(System.Single,UnityEngine.Vector4)">
            <summary>
            Adds an animation key at provided time
            </summary>
            <param name="time">Provided time</param>
            <param name="value">Key value</param>
        </member>
        <member name="M:GLUVector4Sequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single,GLUKey{UnityEngine.Vector4}[])">
            <summary>
            Constructor
            </summary>
            <param name="preWrapMode">Wrap mode before start frame</param>
            <param name="postWrapMode">Wrap mode after end frame</param>
            <param name="transitionSpeed">Transition speed</param>
            <param name="keys">Keys array</param>
        </member>
        <member name="M:GLUVector4Sequence.#ctor">
            <summary>
            Constructor for deserialization
            </summary>
        </member>
        <member name="M:GLUVector4Sequence.GetValue(UnityEngine.Vector4,System.Single)">
            <summary>
            Calculates key value by provided time.
            </summary>
            <param name="targetValue">Default value</param>
            <param name="time">Provided time</param>
            <returns>Calculated key</returns>
        </member>
        <member name="M:GLUVector4Sequence.GetTargetValue(IGLUAnimateable)">
            <summary>
            Takes animated parameter value from target object
            </summary>
            <param name="target">Animated object</param>
            <returns>Animated parameter value</returns>
        </member>
        <member name="M:GLUVector4Sequence.UpdateTransitionSequence(IGLUAnimateable)">
            <summary>
            Updates targets transition sequence with new keys
            </summary>
            <param name="target">Animated object</param>
        </member>
        <member name="M:GLUVector4Sequence.GetMaxTime">
            <summary>
            Returns max frame time
            </summary>
            <returns>Max frame time</returns>
        </member>
        <member name="M:GLUVector4Sequence.Clear">
            <summary>
            Clears internal curves
            </summary>
        </member>
        <member name="M:GLUVector4Sequence.PrepareSerialization">
            <summary>
            Prepares serialization. Called by GLUSerializer
            </summary>
        </member>
        <member name="M:GLUVector4Sequence.PrepareDeserialization">
            <summary>
            Prepares deserialization. Called by GLUDeserializer
            </summary>
        </member>
        <member name="M:GLUVector4Sequence.CompleteDeserialization">
            <summary>
            Called by GLUDeserializer after deserialization 
            </summary>
        </member>
        <member name="M:GLUVector4Sequence.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes key sequence to node. 
            </summary>
            <param name="doc">Parent doc</param>
            <param name="nodeName">Node name</param>
            <returns>New Xml node filled with sequence content</returns>
        </member>
        <member name="M:GLUVector4Sequence.Parse(System.Xml.XmlNode)">
            <summary>
            Parses sequence from Xml node
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUVector4Sequence.Equals(System.Object)">
            <summary>
            Same as == operator
            </summary>
            <param name="obj">Obj to compare with</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUVector4Sequence.GetHashCode">
            <summary>
            Returns hashcode of the sequence
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:GLUVector4Sequence.Assign(GLUKeySequence)">
            <summary>
            Assign values from the source sequence to provided sequence
            </summary>
        </member>
        <member name="T:GLUStyleSheetEvent">
            <summary>
            Style sheet change event
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="T:GLUStyleSheet">
            <summary>
            Holder of styles. Used to store and load styles collection to/from file
            </summary>
        </member>
        <member name="F:GLUStyleSheet.fileExtension">
            <summary>
            Default stylesheet file extension
            </summary>
        </member>
        <member name="F:GLUStyleSheet.name">
            <summary>
            Style sheet name. Usualyy, local path to stylesheet file in Resources folder
            </summary>
        </member>
        <member name="F:GLUStyleSheet.animationSets">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="F:GLUStyleSheet.items">
            <summary>
            Styles collection
            </summary>
        </member>
        <member name="F:GLUStyleSheet.textStyles">
            <summary>
            Not implemented yet
            </summary>
        </member>
        <member name="M:GLUStyleSheet.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUStyleSheet.#ctor(System.String)">
            <summary>
            Style sheet constructor
            </summary>
            <param name="name">Style sheet name</param>
        </member>
        <member name="M:GLUStyleSheet.Load(System.String)">
            <summary>
            Loads stylesheet from provided path
            </summary>
            <param name="name">Style sheet path</param>
            <returns>Loaded stylesheet</returns>
        </member>
        <member name="M:GLUStyleSheet.LoadFromResource(System.String)">
            <summary>
            Loads stylesheet from provided resource path
            </summary>
            <param name="name">Resource path</param>
            <returns>Loaded stylesheet, if resource  was found and null otherwize</returns>
        </member>
        <member name="M:GLUStyleSheet.LoadXML(System.String)">
            <summary>
            Loads stylesheet from provided global path using .NET XML methods
            </summary>
            <param name="name">Path</param>
            <returns>Loaded stylesheet, if resource  was found and null otherwize</returns>
        </member>
        <member name="M:GLUStyleSheet.op_Implicit(System.String)~GLUStyleSheet">
            <summary>
            Implicit constructor. Loads style sheet from provided resource name
            </summary>
            <param name="name">Resource name</param>
            <returns>Loaded stylesheet, if resource was found and null otherwize</returns>
        </member>
        <member name="M:GLUStyleSheet.GetApplicableStyles(System.Type)">
            <summary>
            Returns a list of all styles, applicible to provided type
            </summary>
            <param name="type">provided type</param>
            <returns>List of applicible styles</returns>
        </member>
        <member name="M:GLUStyleSheet.GetStylesOfType(System.Type)">
            <summary>
            Returns a list of styles of provided type and its inheritors
            </summary>
            <param name="type">provided type</param>
            <returns>List of styles</returns>
        </member>
        <member name="M:GLUStyleSheet.AddStyle(GLUStyle)">
            <summary>
            Adds a style to this stylesheet
            </summary>
            <param name="style">Style to add</param>
        </member>
        <member name="M:GLUStyleSheet.Save(System.String)">
            <summary>
            Saves stylesheet to provided resource
            </summary>
            <param name="fileName">Resource name</param>
        </member>
        <member name="M:GLUStyleSheet.Save">
            <summary>
            Saves style sheet to resource with its name
            </summary>
        </member>
        <member name="M:GLUStyleSheet.CompleteDeserialization">
            <summary>
            This method is called after deserialisation
            </summary>
        </member>
        <member name="M:GLUStyleSheet.ToString">
            <summary>
            Converts provided stylesheet to string
            </summary>
            <returns>Name (local resource path) to stylesheet file</returns>
        </member>
        <member name="M:GLUStyleSheet.CreateNew(System.String,System.String)">
            <summary>
            Creates new stylesheet at provided path with provided name
            </summary>
            <param name="path">Local resources path (i. e. "GLU/Styles/")</param>
            <param name="name">Resource name</param>
            <returns>New stylesheet already savet to provided path</returns>
        </member>
        <member name="M:GLUStyleSheet.FillDefault">
            <summary>
            Recreates and fills up default stylesheet
            </summary>
        </member>
        <member name="P:GLUStyleSheet.sheets">
            <summary>
            Stylesheets cache. You should check cache before loading new style sheet
            </summary>
        </member>
        <member name="P:GLUStyleSheet.defaultSheet">
            <summary>
            Default style sheet. Assembled at runtime from every style class by invoking CreateDefault method
            </summary>
        </member>
        <member name="T:IGLUGameUnit">
            <summary>
            Game unit interface
            </summary>
        </member>
        <member name="P:IGLUGameUnit.maxHealth">
            <summary>
            Max unit health
            </summary>
        </member>
        <member name="P:IGLUGameUnit.health">
            <summary>
            Current health
            </summary>
        </member>
        <member name="P:IGLUGameUnit.transform">
            <summary>
            Unit transform
            </summary>
        </member>
        <member name="T:GLULabel">
            <summary>
            Simple label
            </summary>
        </member>
        <member name="M:GLULabel.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLULabel.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.Boolean,System.String,GLUInternalGraphic[])">
            <summary>
            Advanced Label constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="text">Label text</param>
            <param name="layers">List of graphic primitives</param>
            <param name="padding">Content padding</param>
            <param name="visible">Visibility flag</param>
            <example>
            This example shows how to use GLULabel constructor
            <code>
            \code
            AddChild(new GLULabel(this, "logo", new GLUNumber(0), new GLUNumber(0), new GLUNumber(clientWidth), new GLUNumber(clientHeight - 26), new GLUPadding(10, 10, 10, 10), true, "This is label", 
                 new GLUInternalImage("bg", "GLU/logo", new GLUBorders(0, 0, 0, 0), null), 
                 new GLUInternalText("text", new GLUTextStyle("arial", 14, FontStyle.Normal, new GLUColor(1, 1, 1, 1), false), "")));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULabel.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,GLUStyle,GLURotation)">
            <summary>
            Label constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="text">Label text</param>
            <param name="rotation">Textures rotation</param>
            <param name="style">Control style</param>
            <param name="visible">Visibility flag</param>
            <example>
            This example shows how to use GLULabel constructor
            <code>
            \code
            AddChild(new GLULabel(this, "logo", new GLUNumber(0), new GLUNumber(0), new GLUNumber(clientWidth), new GLUNumber(clientHeight - 26), true, "This is label", "label"));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLULabel.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLULabel.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLULabel instance from provided Xml node
            </summary>
            <param name="node">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="M:GLULabel.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default document view. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUDocumentView with default content</returns>
        </member>
        <member name="T:GLUInternalImage">
            <summary>
            Image primitive. Border-stretched mesh with material and animation set
            </summary>
        </member>
        <member name="F:GLUInternalImage.mesh">
            <summary>
            Mesh - usually polygon with texture 
            </summary>
        </member>
        <member name="M:GLUInternalImage.#ctor(System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUTexture,GLUBorders,GLUHorizontalAlignment,GLUVerticalAlignment,GLUAnimationSet)">
            <summary>
            Constructor
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Graphic width</param>
            <param name="height">Graphic height</param>
            <param name="alignment">Horizontal alignment</param>
            <param name="animationSet">Animation set</param>
            <param name="borders">Non-stretched borders</param>
            <param name="name">Object name</param>
            <param name="texture">Image texture URL</param>
            <param name="verticalAlignment">Vertical alignment</param>
            <example>
            This example shows how to use a GLUObject.Load&lt;T&gt; method
            <code>
            \code
            public static GLUInternalImage CreateDefault(GLUObject parent, string name, GLUNumber width, GLUNumber height)
            {
               GLUInternalImage ii = new GLUInternalImage(name, new GLUNumber(0), new GLUNumber(0), width, height, null, GLUPadding.zero, GLUHorizontalAlignment.center, GLUVerticalAlignment.middle, new GLUAnimationSet());
               ii.SetParent(parent);
               return ii;
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUInternalImage.#ctor(GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUStyle)">
            <summary>
            Constructor
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Graphic width</param>
            <param name="height">Graphic height</param>
            <param name="style">Graphic style</param>
            <example>
            This example shows how to use a GLUObject.Load&lt;T&gt; method
            <code>
            \code
            backgroundLayer = new GLUInternalImage(new GLUNumber(0), new GLUNumber(0), new GLUNumber(100), new GLUNumber(100), "background");
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUInternalImage.#ctor(GLUInternalImageStyle)">
            <summary>
            Constructor
            </summary>
            <param name="style">Graphic style</param>
        </member>
        <member name="M:GLUInternalImage.#ctor(System.String,GLUTexture,GLUBorders,GLUAnimationSet)">
            <summary>
            Constructor
            </summary>
            <param name="animationSet">Animation set</param>
            <param name="borders">Non-stretched borders</param>
            <param name="name">Object name</param>
            <param name="texture">Image texture URL</param>
        </member>
        <member name="M:GLUInternalImage.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUInternalImage.#ctor">
            <summary>
            Paramterless constructor
            </summary>
        </member>
        <member name="M:GLUInternalImage.Draw(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws label with provided offset and scale
            </summary>
            <param name="offset">Offset</param>
            <param name="scale">Scale</param>
            <param name="pivot">Transform pivot</param>
            <param name="rotation">Draw rotation</param>
        </member>
        <member name="M:GLUInternalImage.RefreshGraphicObject">
            <summary>
            Generates meshes
            </summary>
        </member>
        <member name="M:GLUInternalImage.Destroy">
            <summary>
            Destroys label, setting its content to null
            </summary>
        </member>
        <member name="M:GLUInternalImage.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes object to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUInternalImage.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling object's content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUInternalImage.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUInternalImage.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from object, creating new one if object content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUInternalImage.Assign(GLUInternalGraphic)">
            <summary>
            Assigns content from provided graphic
            </summary>
            <param name="ig">Provided graphic</param>
        </member>
        <member name="M:GLUInternalImage.Clone">
            <summary>
            Creates a shallow copy of primitive
            </summary>
            <returns>Shallow copy of primitive</returns>
        </member>
        <member name="M:GLUInternalImage.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default primitive. Used in forms editor
            </summary>
            <param name="parent">Object's parent</param>
            <param name="height">Object height</param>
            <param name="width">Object width</param>
            <param name="name">Object's name</param>
            <returns>New instance of primitive with default content</returns>
        </member>
        <member name="M:GLUInternalImage.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new primitive from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New primitive</returns>
        </member>
        <member name="P:GLUInternalImage.material">
            <summary>
            Image material
            </summary>
        </member>
        <member name="P:GLUInternalImage.rotation">
            <summary>
            Image UV rotation
            </summary>
        </member>
        <member name="P:GLUInternalImage.borders">
            <summary>
            Background borders. If you want non-stretching borders in you background texture, set them there.
            </summary>
        </member>
        <member name="T:GLURect">
            <summary>
            GLU serializable rect
            </summary>
        </member>
        <member name="M:GLURect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="xMin">Left coordinate</param>
            <param name="yMin">Top coordinate</param>
            <param name="xMax">Right coordinate</param>
            <param name="yMax">ottom coordinate</param>
        </member>
        <member name="M:GLURect.Rect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            UnityRect-style constructor
            </summary>
            <param name="x">Left coordinate</param>
            <param name="y">Top coordinate</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <returns></returns>
        </member>
        <member name="M:GLURect.Contains(UnityEngine.Vector3)">
            <summary>
            Checks if rect contains provided point
            </summary>
            <param name="p">Point to check</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLURect.Contains(GLURect)">
            <summary>
            Check if rect contains provided rect
            </summary>
            <param name="rect">Rect to check</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLURect.ToString">
            <summary>
            Converts rect to string (f, f, f, f)
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:GLURect.ToRect">
            <summary>
            Converts rect to unity Rect
            </summary>
            <returns>Rect</returns>
        </member>
        <member name="M:GLURect.Parse(System.String)">
            <summary>
            Parses string (f, f, f, f) and set rect values 
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="M:GLURect.#ctor(System.String)">
            <summary>
            Constructor. Creates GLURect and fills it with txt parse results
            </summary>
            <param name="txt">Text to parse</param>
        </member>
        <member name="M:GLURect.op_Addition(GLURect,System.Int32)">
            <summary>
            Addition operator
            </summary>
            <param name="rc">Rect</param>
            <param name="value">Number to add</param>
            <returns>Moved rect</returns>
        </member>
        <member name="M:GLURect.op_Addition(GLURect,UnityEngine.Vector2)">
            <summary>
            Addition operator
            </summary>
            <param name="rc">Rect</param>
            <param name="value">Vector2 to add</param>
            <returns>Moved rect</returns>
        </member>
        <member name="M:GLURect.op_Addition(GLURect,GLURect)">
            <summary>
            Boolean union operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Union result rect</returns>
        </member>
        <member name="P:GLURect.xMin">
            <summary>
            Left coordinate
            </summary>
        </member>
        <member name="P:GLURect.yMin">
            <summary>
            Top coordinate
            </summary>
        </member>
        <member name="P:GLURect.xMax">
            <summary>
            Right coordinate
            </summary>
        </member>
        <member name="P:GLURect.yMax">
            <summary>
            Bottom coordinate
            </summary>
        </member>
        <member name="P:GLURect.width">
            <summary>
            Rect width
            </summary>
        </member>
        <member name="P:GLURect.height">
            <summary>
            Rect width 
            </summary>
        </member>
        <member name="P:GLURect.x">
            <summary>
            Left relative coordinate
            </summary>
        </member>
        <member name="P:GLURect.y">
            <summary>
            Top relative coordinate
            </summary>
        </member>
        <member name="P:GLURect.zero">
            <summary>
            Zero rect
            </summary>
            <returns>(0, 0, 0, 0)</returns>
        </member>
        <member name="T:GLUMaterialList">
            <summary>
            Materials list. Used to build large text areas with combined text
            </summary>
        </member>
        <member name="F:GLUMaterialList.materials">
            <summary>
            Material  by color and image name list
            </summary>
        </member>
        <member name="M:GLUMaterialList.GetMaterial(System.String,UnityEngine.Color,UnityEngine.Material)">
            <summary>
            Returns material with provided texture name and color  
            </summary>
            <param name="textureName">Texture name</param>
            <param name="color">Color</param>
            <param name="baseMaterial">Base material</param>
            <returns>Material</returns>
        </member>
        <member name="M:GLUMaterialList.GetMaterial(System.String,UnityEngine.Color,System.String)">
            <summary>
            Returns material with provided texture name and color
            </summary>
            <param name="textureName">Texture name</param>
            <param name="color">Color</param>
            <param name="shader">Shader, if material need to be created</param>
            <returns>Material</returns>
        </member>
        <member name="M:GLUMaterialList.Clear">
            <summary>
            Clear material list
            </summary>
        </member>
        <member name="T:GLUVisibilitySequence">
            <summary>
            Object visibility sequence. Controls visible property of an IGLURenderable object. 
            </summary>
        </member>
        <member name="T:GLUFloatSequence">
            <summary>
            Sequence of float values 
            </summary>
        </member>
        <member name="F:GLUFloatSequence.curve">
            <summary>
            Internal animation curve
            </summary>
        </member>
        <member name="M:GLUFloatSequence.UpdatePreWrapMode(UnityEngine.WrapMode)">
            <summary>
            Updates internal prewrap mode
            </summary>
            <param name="value">New mode</param>
        </member>
        <member name="M:GLUFloatSequence.UpdatePostWrapMode(UnityEngine.WrapMode)">
            <summary>
            Updates internal postwrap mode
            </summary>
            <param name="value">New mode</param>
        </member>
        <member name="M:GLUFloatSequence.AddKey(System.Single,System.Single)">
            <summary>
            Inserts a key into curve at provided time
            </summary>
            <param name="time">Key time</param>
            <param name="value">Key value</param>
            <example>
            This example shows how to use GLUVisibilitySequence (inherits GLUFloatSequence) AddKey method
            <code>
            \code
            GLUVisibilitySequence vs = new GLUVisibilitySequence();
            vs.AddKey(0.5f, true);
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUFloatSequence.SetKey(System.Int32,System.Single,System.Single)">
            <summary>
            Sets key at provided index
            </summary>
            <param name="time">Key time</param>
            <param name="value">Key value</param>
            <param name="index">Key index</param>
            <example>
            This example shows how to use GLUVisibilitySequence (inherits GLUFloatSequence) SetKey method
            <code>
            \code
            GLUVisibilitySequence vs = new GLUVisibilitySequence();
            vs.AddKey(0.5f, true);
            vs.SetKey(0, 0.25f, false);
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUFloatSequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single,GLUKey{System.Single}[])">
            <summary>
            Constructor
            </summary>
            <param name="preWrapMode">Animation curve wrap mode before start frame</param>
            <param name="postWrapMode">Animation curve wrap mode after end frame</param>
            <param name="transitionSpeed">Transition speed in seconds</param>
            <param name="keys">Keyframes array</param>
        </member>
        <member name="M:GLUFloatSequence.#ctor">
            <summary>
            Parameterless constructor for deserialization 
            </summary>
        </member>
        <member name="M:GLUFloatSequence.GetValue(System.Single,System.Single)">
            <summary>
            Gets sequence value at provided time
            </summary>
            <param name="time">Time</param>
            <param name="targetValue">Default value</param>
            <returns>Float value</returns>
            <example>
            This example shows how to use GLUFloatSequence.GetValue method
            <code>
            \code
            public void Apply(GLUFloatSequence seq, float time, IGLUAnimateable target)
            {
                (target as IGLURenderable).visible = seq.GetValue(time) > 0.5f ? true : false;
            }
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUFloatSequence.GetTargetValue(IGLUAnimateable)">
            <summary>
            Returns some value from a target. Should be overriden in inheritors.
            </summary>
            <param name="target">Target</param>
            <returns>Some target value</returns>
        </member>
        <member name="M:GLUFloatSequence.UpdateTransitionSequence(IGLUAnimateable)">
            <summary>
            Resets sequence internal variables and initializes transition sequence (if needed)
            </summary>
            <param name="target">Object being animated</param>
        </member>
        <member name="M:GLUFloatSequence.GetMaxTime">
            <summary>
            Calculates max sequence time
            </summary>
            <returns>Max time</returns>
        </member>
        <member name="M:GLUFloatSequence.Clear">
            <summary>
            Clears sequence keys.
            </summary>
        </member>
        <member name="M:GLUFloatSequence.SerializeToString">
            <summary>
            Throws exception
            </summary>
            <returns>Nothing</returns>
        </member>
        <member name="M:GLUFloatSequence.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Creates a XMLNode and fills it with this instance's content
            </summary>
            <param name="doc">Doc </param>
            <param name="nodeName"></param>
            <returns>XmlNode representing this instance</returns>
        </member>
        <member name="M:GLUFloatSequence.Parse(System.Xml.XmlNode)">
            <summary>
            Parses provided Xml node, filling this instance's fields and properties
            </summary>
            <param name="n">Node to parse</param>
            <example>
            This example shows how to use GLUFloatSequence.Parse method
            <code>
            \code
            public new static GLUKeySequence Deserialize(XmlNode n)
            {
                GLUKeySequence ks = new GLUKeySequence();
                ks.Parse(n);
                return ks;
            }
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUFloatSequence.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUFloatSequence instance filling it with parsed node content
            </summary>
            <param name="n">Node to parse</param>
            <returns>Instance of GLUFloatSequence</returns>
        </member>
        <member name="M:GLUFloatSequence.Equals(System.Object)">
            <summary>
            Same as == operator
            </summary>
            <param name="obj">Obj to compare with</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUFloatSequence.GetHashCode">
            <summary>
            Returns hashcode of the sequence
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:GLUFloatSequence.Assign(GLUKeySequence)">
            <summary>
            Assign values from the source sequence to provided sequence
            </summary>
        </member>
        <member name="M:GLUVisibilitySequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single,GLUKey{System.Boolean}[])">
            <summary>
            Constructor
            </summary>
            <param name="preWrapMode">Animation curve wrap mode before first frame</param>
            <param name="postWrapMode">Animation curve wrap mode after last frame</param>
            <param name="transitionSpeed">Transition speed</param>
            <param name="keys">Array of keyframes</param>
            <example>
            This example shows how to use GLUVisibilitySequence constructor
            <code>
            \code
            GLUVisibilitySequence lvs = new GLUVisibilitySequence(WrapMode.Clamp, WrapMode.Clamp, 0, new GLUKey&lt;bool&gt;(0.33f, true), new GLUKey&lt;bool&gt;>(0.66f, false)); 
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.leave, false, lvs));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUVisibilitySequence.#ctor">
            <summary>
            Constructor
            </summary>
            <example>
            This example shows how to use GLUVisibilitySequence constructor
            <code>
            \code
            GLUVisibilitySequence lvs = new GLUVisibilitySequence(WrapMode.Clamp, WrapMode.Clamp);
            lvs.AddKey(0.5f, 1); // true
            lvs.AddKey(1f, 0); // false
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, lvs));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUVisibilitySequence.GetTargetValue(IGLUAnimateable)">
            <summary>
            Returns target's visible value
            </summary>
            <param name="target">Target object (must also be IGLURenderable)</param>
            <returns>visible value</returns>
        </member>
        <member name="M:GLUVisibilitySequence.Apply(System.Single,IGLUAnimateable)">
            <summary>
            Applies sequence to the target object. Target must also be an IGLURenderable
            </summary>
            <param name="time">Sequence time</param>
            <param name="target">Target object</param>
        </member>
        <member name="M:GLUVisibilitySequence.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new instance of GLUVisibilitySequence, filling it with node's parse results
            </summary>
            <param name="n">Node to parse</param>
            <returns>An instance of GLUVisibilitySequence</returns>
        </member>
        <member name="M:GLUVisibilitySequence.Clone">
            <summary>
            Creates a complete copy of the sequence
            </summary>
            <returns>Sequence copy</returns>
        </member>
        <member name="T:GLUGLULocalOffsetSequenceSerializer">
            <summary>
            GLULocalOffsetSequence serializer helper
            </summary>
        </member>
        <member name="M:GLUGLULocalOffsetSequenceSerializer.Deserialize(System.String)">
            <summary>
            Parses provided text and creates GLULocalOffsetSequence instance 
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLULocalOffsetSequence instance</returns>
        </member>
        <member name="M:GLUGLULocalOffsetSequenceSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Parses provided Xml node and creates GLULocalOffsetSequence instance 
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLULocalOffsetSequence instance</returns>
        </member>
        <member name="M:GLUGLULocalOffsetSequenceSerializer.Serialize(System.Object)">
            <summary>
            Converts provided object to string 
            </summary>
            <param name="obj">Provided object</param>
            <returns>Text representation of the object</returns>
        </member>
        <member name="M:GLUGLULocalOffsetSequenceSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node and fills it with provided object's content
            </summary>
            <param name="obj">Provided object</param>
            <param name="doc">Parent Xml document</param>
            <returns>Xml node</returns>
        </member>
        <member name="M:GLUGLULocalOffsetSequenceSerializer.GetInstance">
            <summary>
            Returns an instance of GLUGLULocalOffsetSequenceSerializer
            </summary>
            <returns>New GLUGLULocalOffsetSequenceSerializer object</returns>
        </member>
        <member name="T:GLUInternalTextStyle">
            <summary>
            Internal text style
            </summary>
        </member>
        <member name="F:GLUInternalTextStyle.textStyle">
            <summary>
            Text style
            </summary>
        </member>
        <member name="F:GLUInternalTextStyle.textAlignment">
            <summary>
            Horizontal text alignment
            </summary>
        </member>
        <member name="F:GLUInternalTextStyle.textVerticalAlignment">
            <summary>
            Vertical text alignment
            </summary>
        </member>
        <member name="M:GLUInternalTextStyle.CreateObject">
            <summary>
            Creates an instance of GLUInternalImage
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUInternalTextStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUInternalTextStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUInternalTextStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Used in serialization. Tests object of style adequacy
            </summary>
            <param name="obj">Object to test</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to provided style </returns>
        </member>
        <member name="M:GLUInternalTextStyle.CreateDefault">
            <summary>
            Creates default style for GLUInternalText primitive
            </summary>
            <returns>Newly created style</returns>
        </member>
        <member name="T:GLUMeshList">
            <summary>
            Mesh list 
            </summary>
        </member>
        <member name="F:GLUMeshList.meshes">
            <summary>
            Mesh by material dictionary
            </summary>
        </member>
        <member name="F:GLUMeshList.bgMeshes">
            <summary>
            Bg mesh by material dictionary
            </summary>
        </member>
        <member name="F:GLUMeshList.currentMesh">
            <summary>
            Currently selected mesh for generation
            </summary>
        </member>
        <member name="M:GLUMeshList.CombineMeshes(GLUMeshList)">
            <summary>
            Not implemented yet
            </summary>
            <param name="ml"></param>
        </member>
        <member name="M:GLUMeshList.GetMesh(GLUMaterial)">
            <summary>
            Returns mesh having provided material
            </summary>
            <param name="m">Material</param>
            <returns>Mesh</returns>
        </member>
        <member name="M:GLUMeshList.GetBgMesh(GLUMaterial)">
            <summary>
            Returns background mesh having provided material
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:GLUMeshList.Clear">
            <summary>
            Clears meshlist content
            </summary>
        </member>
        <member name="M:GLUMeshList.ClearMeshes">
            <summary>
            Clears meshlist content
            </summary>
        </member>
        <member name="M:GLUMeshList.Destroy">
            <summary>
            Destroys an object
            </summary>
        </member>
        <member name="T:GLUColor">
            <summary>
            GLU color. Has implicit constructor and is serializable
            </summary>
        </member>
        <member name="F:GLUColor.unityColor">
            <summary>
            Native unity color
            </summary>
        </member>
        <member name="M:GLUColor.ToString">
            <summary>
            Converts to string (#RRGGBBAA) 
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:GLUColor.TryParse(System.String,GLUColor@)">
            <summary>
            Trys to parse provided string to GLUColor
            </summary>
            <param name="s">String</param>
            <param name="c">Color</param>
            <returns>Try result</returns>
        </member>
        <member name="M:GLUColor.op_Implicit(System.String)~GLUColor">
            <summary>
            Implicit constructor
            </summary>
            <param name="s">String</param>
            <returns>Color</returns>
        </member>
        <member name="M:GLUColor.op_Implicit(GLUColor)~UnityEngine.Vector4">
            <summary>
            Implicit converter
            </summary>
            <param name="c">Color to convert</param>
            <returns>Color</returns>
        </member>
        <member name="M:GLUColor.TryParseColor(System.String)">
            <summary>
            Parses provided string and sets object's fields with parse results
            </summary>
            <param name="s">String</param>
            <returns>True if succesful and false otherwise</returns>
        </member>
        <member name="M:GLUColor.#ctor(UnityEngine.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c">Unity color</param>
        </member>
        <member name="M:GLUColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="r">Red component</param>
            <param name="g">Green component</param>
            <param name="b">Blue component</param>
            <param name="a">Alpha component</param>
        </member>
        <member name="M:GLUColor.#ctor(System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="g">Gray component</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:GLUColor.Lerp(GLUColor,GLUColor,System.Single)">
            <summary>
            Lerps between two GLUColors, returning a new one  
            </summary>
            <param name="a">First color</param>
            <param name="b">Second color</param>
            <param name="t">Parameter 0 .. 1</param>
            <returns></returns>
        </member>
        <member name="M:GLUColor.Equals(System.Object)">
            <summary>
            Checks if provided object is equal to this
            </summary>
            <param name="obj">Provided object</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUColor.op_Multiply(GLUColor,GLUColor)">
            <summary>
            Multiplies operands by components (a.r*b.r, a.g*a.g...)
            </summary>
            <param name="a">First operand</param>
            <param name="b">second operand</param>
            <returns>Multiplication product</returns>
        </member>
        <member name="M:GLUColor.op_Multiply(GLUColor,System.Single)">
            <summary>
            Multiplies first operand by second one (a.r*b, a.g*b...)
            </summary>
            <param name="a">First operand</param>
            <param name="b">second operand</param>
            <returns>Multiplication product</returns>
        </member>
        <member name="M:GLUColor.op_Multiply(GLUColor,UnityEngine.Vector2)">
            <summary>
            Multiplies first operand by second one (a.r*b.x, a.g*b.x... a.a*b.y)
            </summary>
            <param name="a">First operand</param>
            <param name="b">second operand</param>
            <returns>Multiplication product</returns>
        </member>
        <member name="M:GLUColor.op_Equality(GLUColor,GLUColor)">
            <summary>
            Equality operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUColor.op_Inequality(GLUColor,GLUColor)">
            <summary>
            Non-equality operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Check result</returns>
        </member>
        <member name="M:GLUColor.GetHashCode">
            <summary>
            Generates hash codes
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:GLUColor.r">
            <summary>
            Red component
            </summary>
        </member>
        <member name="P:GLUColor.g">
            <summary>
            Green component
            </summary>
        </member>
        <member name="P:GLUColor.b">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="P:GLUColor.a">
            <summary>
            Alpha component
            </summary>
        </member>
        <member name="T:GLUGLUMaterialColorSequenceSerializer">
            <summary>
            GLUMaterialColorSequence serializer helper
            </summary>
        </member>
        <member name="M:GLUGLUMaterialColorSequenceSerializer.Deserialize(System.String)">
            <summary>
            Parses provided text and creates GLUMaterialColorSequence instance 
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLUMaterialColorSequence instance</returns>
        </member>
        <member name="M:GLUGLUMaterialColorSequenceSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Parses provided text and creates GLUMaterialColorSequence instance 
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUMaterialColorSequence instance</returns>
        </member>
        <member name="M:GLUGLUMaterialColorSequenceSerializer.Serialize(System.Object)">
            <summary>
            Converts provided object to string 
            </summary>
            <param name="obj">Provided object</param>
            <returns>Text representation of the object</returns>
        </member>
        <member name="M:GLUGLUMaterialColorSequenceSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Converts provided object to string 
            </summary>
            <param name="obj">Provided object</param>
            <param name="doc">Parent Xml Doc</param>
            <returns>Text representation of the object</returns>
        </member>
        <member name="M:GLUGLUMaterialColorSequenceSerializer.GetInstance">
            <summary>
            Returns an instance of GLUGLUMaterialColorSequenceSerializer
            </summary>
            <returns>New GLUGLUMaterialColorSequenceSerializer object</returns>
        </member>
        <member name="T:GLUNumber">
            <summary>
            Float value with absolute/relative switch
            </summary>
        </member>
        <member name="M:GLUNumber.#ctor(System.String)">
            <summary>
            Number constructor
            </summary>
            <param name="text">Serialized number</param>
        </member>
        <member name="M:GLUNumber.#ctor(System.Single,System.Boolean,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="value">Value</param>
            <param name="multiplier">Number multiplier</param>
            <param name="relative">If true, number is relative. Relative number's result == value * multiplier. Otherwize, result == value.</param>
        </member>
        <member name="M:GLUNumber.Add(System.Single)">
            <summary>
            Adds specified value to number.value. If number is relative, value / multiplier is added 
            </summary>
            <param name="value">Specified value</param>
        </member>
        <member name="M:GLUNumber.op_BitwiseAnd(GLUNumber,System.Int32)">
            <summary>
            Result replace operator
            </summary>
            <param name="a">Number to replace result</param>
            <param name="b">New result</param>
            <returns>a.result = b; return a;</returns>
        </member>
        <member name="M:GLUNumber.op_BitwiseAnd(GLUNumber,System.Single)">
            <summary>
            Result replace operator
            </summary>
            <param name="a">Number to replace result</param>
            <param name="b">New result</param>
            <returns>a.result = b; return a;</returns>
        </member>
        <member name="M:GLUNumber.op_Equality(GLUNumber,GLUNumber)">
            <summary>
            Val-by-val comparsion of two numbers
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>True, if numbers are equal</returns>
        </member>
        <member name="M:GLUNumber.op_Inequality(GLUNumber,GLUNumber)">
            <summary>
            Val-by-val comparsion of two numbers
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>False, if numbers are equal</returns>
        </member>
        <member name="M:GLUNumber.op_Implicit(GLUNumber)~System.Int32">
            <summary>
            Implicit conversion. Number is substituted by its result value
            </summary>
            <param name="a">Operand</param>
            <returns>Result value</returns>
        </member>
        <member name="M:GLUNumber.op_ExclusiveOr(GLUNumber,System.Single)">
            <summary>
            Multiplier replacement operator
            </summary>
            <param name="a">Number to replace multiplier</param>
            <param name="b">New multiplier</param>
            <returns>New number with new multiplier</returns>
        </member>
        <member name="M:GLUNumber.op_Addition(GLUNumber,System.Single)">
            <summary>
            Addition operator.
            </summary>
            <param name="a">Number</param>
            <param name="b">Value</param>
            <returns>a.result + b</returns>
        </member>
        <member name="M:GLUNumber.op_Addition(GLUNumber,System.Int32)">
            <summary>
            Addition operator.
            </summary>
            <param name="a">Number</param>
            <param name="b">Value</param>
            <returns>a.result + b</returns>
        </member>
        <member name="M:GLUNumber.op_Subtraction(GLUNumber,System.Int32)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="a">Number</param>
            <param name="b">Value</param>
            <returns>a.result - b</returns>
        </member>
        <member name="M:GLUNumber.op_Addition(GLUNumber,GLUNumber)">
            <summary>
            Addition operator.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>a.result + b.result</returns>
        </member>
        <member name="M:GLUNumber.op_Increment(GLUNumber)">
            <summary>
            Result increment operator
            </summary>
            <param name="a">Number to increment</param>
            <returns>New number with incremented result</returns>
        </member>
        <member name="M:GLUNumber.op_Decrement(GLUNumber)">
            <summary>
            Result decrement operator
            </summary>
            <param name="a">Number to decrement</param>
            <returns>New number with decremented result</returns>
        </member>
        <member name="M:GLUNumber.ToString">
            <summary>
            Standard string conversion method
            </summary>
            <returns>Object's string representation</returns>
        </member>
        <member name="M:GLUNumber.Product(System.Single,GLUNumber,GLUNumber)">
            <summary>
            Calculates a sum of two numbers with "mul" coefficient. 
            Used to calculate maximum X bound of child object during autosize bounds calculation
            </summary>
            <param name="mul">Coefficient</param>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>If one of numbers is relative, result == a._value * mul / (1 - b._value) or b._value / (1 - a._value * mul).
            Otherwize, result == Mathf.RoundToInt(a._value * mul + b._value). If both numbers are relative, result == 0</returns>
        </member>
        <member name="M:GLUNumber.Equals(System.Object)">
            <summary>
            Checks, if specified object is equal to this one
            </summary>
            <param name="obj">Specified object</param>
            <returns>True, if equal</returns>
        </member>
        <member name="M:GLUNumber.GetHashCode">
            <summary>
            Calculates hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:GLUNumber.relative">
            <summary>
            Relative flag. Determines, whether value is relative or absolute. If relative == true, result == value * multiplier, otherwize, result == value
            </summary>
        </member>
        <member name="P:GLUNumber.multiplier">
            <summary>
            Multiplier. If relative == true, result == value * multiplier, otherwize, result == value
            </summary>
        </member>
        <member name="P:GLUNumber.result">
            <summary>
            Number result. Substituted, when casting number to float or int. If relative == true, result == value * multiplier, otherwize, result == value
            </summary>
        </member>
        <member name="P:GLUNumber.value">
            <summary>
            Number value. According to "relative" flag, can be treated as relative or absolute. In relative case, number result == value * multiplier
            </summary>
        </member>
        <member name="T:GLUPanelStyle">
            <summary>
            Panel style 
            </summary>
        </member>
        <member name="M:GLUPanelStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUPanelStyle.#ctor(GLUStyleSheet,System.String,System.String,GLUBorders,GLUPadding,GLUTextStyle,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="padding">Control padding</param>
            <param name="textAlignment">Text horizontal alignment</param>
            <param name="textVerticalAlignment">Text vertical alignment</param>
            <param name="textStyle">Text style</param>
        </member>
        <member name="M:GLUPanelStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created panel style</returns>
        </member>
        <member name="T:GLUHScrollBar">
            <summary>
            Horizontal Scrollbar control
            </summary>
        </member>
        <member name="M:GLUHScrollBar.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle)">
            <summary>
            Simple scrollbar constructor
            </summary>
            <param name="parent">Control parent</param>
            <param name="name">Control name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="visible">Control visibility</param>
            <param name="style">Control style</param>
            <example>
            This example shows how to use GLUHScrollBar constructor
            <code>
            \code
            GLUHScrollBar horScrollBar = AddChild(new GLUHScrollBar(this, "horScrollBar", new GLUNumber(10), new GLUNumber(10), new GLUNumber(100), new GLUNumber(24), true, "horScrollBar")) as GLUHScrollBar;
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUHScrollBar.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUHScrollBar.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUHScrollBar.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUHScrollBar.CreateDecreaseButton(GLUScrollBarStyle)">
            <summary>
            Internal. Creates decrease button
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUHScrollBar.CreateIncreaseButton(GLUScrollBarStyle)">
            <summary>
            Internal. Creates increase button
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUHScrollBar.CreateTrack(GLUScrollBarStyle)">
            <summary>
            Internal. Creates track button
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUHScrollBar.CreateThumbnail(GLUScrollBarStyle)">
            <summary>
            Internal. Creates thumbnail button
            </summary>
            <param name="style">Scroll bar style</param>
        </member>
        <member name="M:GLUHScrollBar.RefreshControl">
            <summary>
            Generate meshes. Override it to create custom scrollbars
            </summary>
        </member>
        <member name="M:GLUHScrollBar.TrackInputDown(GLUControl,UnityEngine.Vector3)">
            <summary>
            Internal. Handles track inputDown action
            </summary>
            <param name="sender">Action sender</param>
            <param name="mp">Local cursor position</param>
        </member>
        <member name="M:GLUHScrollBar.ThumbnailDrag(GLUControl,UnityEngine.Vector3)">
            <summary>
            Internal. Drag thumbnail handler
            </summary>
            <param name="sender">Action sender</param>
            <param name="localInputPosition">Local cursor position</param>
        </member>
        <member name="M:GLUHScrollBar.SetPosition(System.Single)">
            <summary>
            Set thumbnail position and calculates scrollBarPosition value
            </summary>
            <param name="position">Position</param>
        </member>
        <member name="M:GLUHScrollBar.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default horizontal scroll bar. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUHScrollBar with default content</returns>
        </member>
        <member name="M:GLUHScrollBar.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUHScrollBar from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="T:GLUHint">
            <summary>
            Hint label
            </summary>
        </member>
        <member name="F:GLUHint.backgroundLayer">
            <summary>
            Background image
            </summary>
        </member>
        <member name="M:GLUHint.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUHint.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle,GLURotation)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Hint parent</param>
            <param name="name">Control name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Hint width</param>
            <param name="height">Hint height</param>
            <param name="generateMeshes">If true, hint's content will be initialized afer creation</param>
            <param name="style">Hint style</param>
            <param name="rotation">Background UV Rotation</param>
        </member>
        <member name="M:GLUHint.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUHint.ProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Processes control key. Internal use 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:GLUHint.Destroy">
            <summary>
            Destroys button
            </summary>
        </member>
        <member name="M:GLUHint.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal drag handler
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUHint.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUHint.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUHint.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="T:GLUPopupMenu">
            <summary>
            Popup menu
            </summary>
        </member>
        <member name="F:GLUPopupMenu._itemsControl">
            <summary>
            Items control
            </summary>
        </member>
        <member name="M:GLUPopupMenu.SetupItemsControl(GLUButtonsList)">
            <summary>
            Sets up new items control 
            </summary>
            <param name="value">New items control</param>
        </member>
        <member name="M:GLUPopupMenu.ClearItems">
            <summary>
            Clears items list
            </summary>
        </member>
        <member name="F:GLUPopupMenu.sender">
            <summary>
            Caller of popup
            </summary>
        </member>
        <member name="M:GLUPopupMenu.UpdateInternals">
            <summary>
            Updates offsets and bounds
            </summary>
        </member>
        <member name="M:GLUPopupMenu.CreateEditorRepresentation">
            <summary>
            Creates editor representation icon
            </summary>
        </member>
        <member name="M:GLUPopupMenu.#ctor">
            <summary>
            Creates popup for deserialization
            </summary>
        </member>
        <member name="M:GLUPopupMenu.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUStyle,GLUListItem[])">
            <summary>
            Simple constructor
            </summary>
            <param name="parent">Control's parent form</param>
            <param name="name">Control's name</param>
            <param name="items">Items list</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="style">Control style</param>
            <example>
            This example shows how to use GLUPopupMenu constructor
            <code>
            \code
            GLUPopupMenu popup = AddChild(new GLUPopupMenu(this, "Popup", new GLUNumber(0), new GLUNumber(0), null,
                new GLUMenuItem("Item 1", 0, ItemSelected, 0),
                new GLUMenuItem("Item 2", 1, ItemSelected, false, new GLUMenuItem("Subitem 1", 0, ItemSelected), new GLUMenuItem("Subitem 2", 1, ItemSelected), new GLUMenuItem("Subitem 3", 2, null)),
                new GLUMenuItem("Item 3", 2, ItemSelected),
                new GLUMenuItem("-", -1, null),
                new GLUMenuItem("Item 4", 3, ItemSelected),
                new GLUMenuItem("Item 5", 4, ItemSelected)), false) as GLUPopupMenu;
            .
            .
            .
            private void ItemSelected(GLUControl sender)
            {
                GLUMenuItem mi = (sender.tag as GLUMenuItem);
                mi.isChecked = !mi.isChecked;
                GLUDebug.Log("ItemSelected " + mi);
            }
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUPopupMenu.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUPopupMenu.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUPopupMenu.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUPopupMenu.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws control with provided offset and scale. Non-uniform scale
            </summary>
            <param name="offset">Offset</param>
            <param name="scale">Scale</param>
        </member>
        <member name="M:GLUPopupMenu.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws control with provided offset and scale. Non-uniform scale
            </summary>
            <param name="offset">Offset</param>
            <param name="scale">Scale</param>
            <param name="maxX">Viewport right border</param>
            <param name="maxY">Viewport bottom border</param>
            <param name="minX">Viewport left border</param>
            <param name="minY">Viewport top border</param>
        </member>
        <member name="M:GLUPopupMenu.GetAllChildren(System.Boolean)">
            <summary>
            Returns all children of popup. Recursive
            </summary>
            <param name="includeInternal">If true, includes internal children></param>
            <returns>List of children</returns>
        </member>
        <member name="M:GLUPopupMenu.GetObjectByID(System.String,System.Boolean)">
            <summary>
            Internal. Search member holder(item) with provided id among this object and its children
            </summary>
            <param name="id">provided id</param>
            <param name="recursive">If true, children are also included in search</param>
            <returns>Object with provided id</returns>
        </member>
        <member name="M:GLUPopupMenu.Contains(UnityEngine.Vector3)">
            <summary>
            Checks point for containment
            </summary>
            <param name="p">Point coordinates</param>
            <returns>True, if point is contained</returns>
        </member>
        <member name="M:GLUPopupMenu.ResetState">
            <summary>
            Resets item controls
            </summary>
        </member>
        <member name="M:GLUPopupMenu.CalculatePaddedContentBounds(GLUConstraints,GLUConstraints,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Calculates internal bounds. Used in auto size mechanizm
            </summary>
        </member>
        <member name="M:GLUPopupMenu.ChildChanged(GLUObject)">
            <summary>
            Called by child, when it changes its position or alignment
            </summary>
            <param name="child">Changed child</param>
        </member>
        <member name="M:GLUPopupMenu.UpdateLayout">
            <summary>
            Updates popup internal layout
            </summary>
        </member>
        <member name="M:GLUPopupMenu.RefreshLayeredControl">
            <summary>
            Generates popup meshes
            </summary>
        </member>
        <member name="M:GLUPopupMenu.AddItem(GLUMenuItem)">
            <summary>
            Adds menuitem
            </summary>
            <param name="mi">MenuItem</param>
        </member>
        <member name="M:GLUPopupMenu.RemoveItem(GLUListItem)">
            <summary>
            Removes item 
            </summary>
            <param name="li">Item to remove</param>
        </member>
        <member name="M:GLUPopupMenu.Setup">
            <summary>
            Set delegate fields handlers. Called after deserialization
            </summary>
        </member>
        <member name="M:GLUPopupMenu.SetTestShow(System.Boolean)">
            <summary>
            Sets up test show flag and updates visual content
            </summary>
            <param name="value">Test show value</param>
        </member>
        <member name="M:GLUPopupMenu.UnFocus(GLUControl,GLUControl,System.Boolean)">
            <summary>
            Internal system method, which is called, when control looses focus
            </summary>
            <param name="sender">Focus looser</param>
            <param name="focused">New focused control</param>
            <param name="internalCall">Flag, which indicates, whether current call is made directly from terminal, or it is child-to-parent call</param>
        </member>
        <member name="M:GLUPopupMenu.DrawSelectedMesh(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws selection mesh. Editor internal use
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUPopupMenu.Show(GLUObject,UnityEngine.Vector3)">
            <summary>
            Shows popup menu at caller local position 
            </summary>
            <param name="sender">Popup caller</param>
            <param name="mp">provided position</param>
        </member>
        <member name="M:GLUPopupMenu.ShowInternal(GLUObject,UnityEngine.Vector3)">
            <summary>
            Internal use. Shows popup submenu at provided local position 
            </summary>
            <param name="sender">Popup caller</param>
            <param name="mp">provided position</param>
        </member>
        <member name="M:GLUPopupMenu.SetFocus">
            <summary>
            Sets focus to the control
            </summary>
        </member>
        <member name="M:GLUPopupMenu.SetParent(GLUObject)">
            <summary>
            Sets the parent of popup
            </summary>
            <param name="parent">Parent. Must be GLUForm, or one of its inheritors</param>
        </member>
        <member name="M:GLUPopupMenu.Destroy">
            <summary>
            Makes object content available for GC 
            </summary>
        </member>
        <member name="M:GLUPopupMenu.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUPopupMenu.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling object content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUPopupMenu.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUPopupMenu from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUPopupMenu</returns>
        </member>
        <member name="M:GLUPopupMenu.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default popup menu. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUPopupMenu with default content</returns>
        </member>
        <member name="P:GLUPopupMenu.itemsControl">
            <summary>
            Items control. A prototype of any child menuitem 
            </summary>
        </member>
        <member name="P:GLUPopupMenu.items">
            <summary>
            List of menu items
            </summary>
        </member>
        <member name="P:GLUPopupMenu.width">
            <summary>
            Width of the popup menu
            </summary>
        </member>
        <member name="P:GLUPopupMenu.height">
            <summary>
            Height of the popup menu
            </summary>    
        </member>
        <member name="P:GLUPopupMenu.visible">
            <summary>
            Visibility flag
            </summary>
        </member>
        <member name="P:GLUPopupMenu.testShow">
            <summary>
            Test visibility flag. If true, popup menu will be displayed in editor instead of icon
            </summary>
        </member>
        <member name="T:GLUTypeSerializer">
            <summary>
            Custom serializer for Type object
            </summary>
        </member>
        <member name="M:GLUTypeSerializer.Deserialize(System.String)">
            <summary>
            Searches assembly for type with provided name and creates its instance
            </summary>
            <param name="text">Text to parse</param>
            <returns>New instance</returns>
        </member>
        <member name="M:GLUTypeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Searches assembly for type with provided name and creates its instance
            </summary>
            <param name="n">Text to parse</param>
            <returns>New instance</returns>
        </member>
        <member name="M:GLUTypeSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node, filling it with object's content
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="doc">Parent Xml document</param>
            <returns>New Xml node</returns>
        </member>
        <member name="M:GLUTypeSerializer.Serialize(System.Object)">
            <summary>
            Returns type name
            </summary>
            <param name="obj">Object to convert</param>
            <returns>Type name</returns>
        </member>
        <member name="M:GLUTypeSerializer.GetInstance">
            <summary>
            Common method for custom serializers creation
            </summary>
            <returns>An instance of serializer</returns>
        </member>
        <member name="T:GLUConstraints">
            <summary>
            Struct for holding borders and padding values 
            </summary>
        </member>
        <member name="M:GLUConstraints.#ctor(GLUNumber,GLUNumber)">
            <summary>
            Constructor
            </summary>
            <param name="min">Min value</param>
            <param name="max">Max value</param>
        </member>
        <member name="M:GLUConstraints.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="min">Min value</param>
            <param name="max">Max value</param>
        </member>
        <member name="M:GLUConstraints.ToString">
            <summary>
            Creates string representation
            </summary>
            <returns>String </returns>
        </member>
        <member name="M:GLUConstraints.Parse(System.String)">
            <summary>
            Parses provided string and fills self content with parse results 
            </summary>
            <param name="rawString">String to parse</param>
        </member>
        <member name="M:GLUConstraints.#ctor(System.String)">
            <summary>
            Parses string and creates constraints instance
            </summary>
            <param name="s">String to parse</param>
            <returns>Newly created constraints</returns>
        </member>
        <member name="M:GLUConstraints.Clamp(System.Int32)">
            <summary>
            Clamps specified value
            </summary>
            <param name="value">Specified value</param>
            <returns>Clamped value</returns>
        </member>
        <member name="F:GLUConstraints.zero">
            <summary>
            Zero constraint (0, 0)
            </summary>
        </member>
        <member name="M:GLUConstraints.op_Equality(GLUConstraints,GLUConstraints)">
            <summary>
            Equality operator override
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsions result</returns>
        </member>
        <member name="M:GLUConstraints.op_Inequality(GLUConstraints,GLUConstraints)">
            <summary>
            Inequality operator override
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsions result</returns>
        </member>
        <member name="M:GLUConstraints.Equals(System.Object)">
            <summary>
            Equals method override
            </summary>
            <param name="obj">Object to compare</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUConstraints.GetHashCode">
            <summary>
            Generates hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:GLUConstraints.Add(GLUNumber,GLUNumber)">
            <summary>
            Adds values to min and max
            </summary>
            <param name="min">Min delta</param>
            <param name="max">Max delta</param>
        </member>
        <member name="M:GLUConstraints.Add(GLUNumber)">
            <summary>
            Adds specified number to both min and max
            </summary>
            <param name="value">Specified value</param>
        </member>
        <member name="M:GLUConstraints.Add(System.Single)">
            <summary>
            Adds specified value to both min and max
            </summary>
            <param name="value">Specified value</param>
        </member>
        <member name="M:GLUConstraints.op_Addition(GLUConstraints,UnityEngine.Vector2)">
            <summary>
            Adds specified Vector2 value to constraints
            </summary>
            <param name="a">Constraints</param>
            <param name="b">Vector2 to add</param>
            <returns></returns>
        </member>
        <member name="M:GLUConstraints.op_ExclusiveOr(GLUConstraints,UnityEngine.Vector2)">
            <summary>
            Replaces a.min and a.max multipliers with b.x and b.y
            </summary>
            <param name="a">Constraints</param>
            <param name="b">Vector2 to replace</param>
            <returns>New constraints with replaced multipliers</returns>
        </member>
        <member name="P:GLUConstraints.min">
            <summary>
            Min value
            </summary>
        </member>
        <member name="P:GLUConstraints.max">
            <summary>
            Max value
            </summary>
        </member>
        <member name="T:GLUTangentMode">
            <summary>
            Keyframe tangent mode
            </summary>
        </member>
        <member name="F:GLUTangentMode.Editable">
            <summary>
            Editable tangent
            </summary>
        </member>
        <member name="F:GLUTangentMode.Smooth">
            <summary>
            Smooth tangent
            </summary>
        </member>
        <member name="F:GLUTangentMode.Linear">
            <summary>
            Linear tangent
            </summary>
        </member>
        <member name="F:GLUTangentMode.Stepped">
            <summary>
            Stepped tangent
            </summary>
        </member>
        <member name="T:GLUTextEdit">
            <summary>
            Scrollable text editor. Can be single line or multiline
            </summary>
        </member>
        <member name="F:GLUTextEdit._multiLine">
            <summary>
            Internal. Determines if text is multiline
            </summary>
        </member>
        <member name="F:GLUTextEdit._readOnly">
            <summary>
            Internal. If set to true, user cannot change text of control
            </summary>
        </member>
        <member name="F:GLUTextEdit._text">
            <summary>
            Internal. Text of control. 
            </summary>
        </member>
        <member name="F:GLUTextEdit._internalText">
            <summary>
            Internal text control
            </summary>
        </member>
        <member name="M:GLUTextEdit.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUTextEdit.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,System.Boolean,System.Boolean,GLUStyle)">
            <summary>
            Simple text edit constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>    
            <param name="text">Control text</param>
            <param name="multiline">Multiline flag</param>
            <param name="style">Control style</param>
            <param name="readOnly">If set to true, user cannot change text content</param>
            <example>
            This example shows how to use GLUTextEdit constructor
            <code>
            \code
            GLUTextEdit textEdit = new GLUTextEdit(this, "textEdit", 0, 0, 100, 24, true, "Text", false, false);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUTextEdit.ApplyStyle">
            <summary>
            Internal. Used to change control content according to new style. Usually called at the beginning of RefreshGraphicObject()
            </summary>
        </member>
        <member name="M:GLUTextEdit.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUTextEdit.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUTextEdit.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Start drag. Use with caution
            </summary>
            <param name="mp">Local cursor position</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUTextEdit.ProcessControlKey(UnityEngine.KeyCode)">
            <summary>
            Processes control key
            </summary>
            <param name="key">Key code to process</param>
        </member>
        <member name="M:GLUTextEdit.ProcessChar(System.Char)">
            <summary>
            Processes text character. Internal use
            </summary>
            <param name="character">Char to process</param>
        </member>
        <member name="M:GLUTextEdit.SetFocus">
            <summary>
            Sets focus of the control
            </summary>
        </member>
        <member name="M:GLUTextEdit.InputPressed(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Input pressed. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUTextEdit.DoubleClick(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Standard double click handler
            </summary>
            <param name="mp">Cursor position in parent space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUTextEdit.CreateInternalText">
            <summary>
            Internal. Creates internal text control
            </summary>
        </member>
        <member name="M:GLUTextEdit.RefreshScrollView">
            <summary>
            Mesh generation. Common GLU method
            </summary>
        </member>
        <member name="M:GLUTextEdit.GetTextMesh">
            <summary>
            Returns textmesh from internal text. Useed in drag-drop to visualize text being dragged
            </summary>
            <returns>Text mesh</returns>
        </member>
        <member name="M:GLUTextEdit.Destroy">
            <summary>
            Destroys text edit and its content
            </summary>
        </member>
        <member name="M:GLUTextEdit.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Called by serializer to create Xml node and populates it with control's content  
            </summary>
            <param name="doc">Xml document, container of node</param>
            <param name="nodeName">Node name</param>
            <returns>New xml node, filled with control's content</returns>
        </member>
        <member name="M:GLUTextEdit.Parse(System.Xml.XmlNode)">
            <summary>
            Parses the provided XML node and fills the fields of provided instance
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUTextEdit.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUTextEdit from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="M:GLUTextEdit.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default text edit. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Control's horizontal position</param>
            <param name="y">Control's vertical position</param>
            <returns>New instance of GLUTextEdit with default content</returns>
        </member>
        <member name="P:GLUTextEdit.enabled">
            <summary>
            If true, 
            </summary>
        </member>
        <member name="P:GLUTextEdit.multiLine">
            <summary>
            Determines if text is multiline
            </summary>
        </member>
        <member name="P:GLUTextEdit.allowDragSelection">
            <summary>
            If set to true, user can drag selection
            </summary>
        </member>
        <member name="P:GLUTextEdit.allowSelection">
            <summary>
            If set to true, user can select text by dragging cursor
            </summary>
        </member>
        <member name="P:GLUTextEdit.textStyle">
            <summary>
            Text style of control
            </summary>
        </member>
        <member name="P:GLUTextEdit.readOnly">
            <summary>
            If set to true, user cannot change text of control
            </summary>
        </member>
        <member name="P:GLUTextEdit.text">
            <summary>
            Text of control. 
            </summary>
        </member>
        <member name="P:GLUTextEdit.textAlignment">
            <summary>
            Alignment of text. Only left-align is currently supported
            </summary>
        </member>
        <member name="P:GLUTextEdit.cursorPosition">
            <summary>
            Cursor position in text
            </summary>
        </member>
        <member name="P:GLUTextEdit.internalText">
            <summary>
            Internal text control. Is scroll child
            </summary>
        </member>
        <member name="T:GLUTextCharacter">
            <summary>
            Text character. Used internally
            </summary>
        </member>
        <member name="F:GLUTextCharacter.character">
            <summary>
            Character itself
            </summary>
        </member>
        <member name="F:GLUTextCharacter.meshBounds">
            <summary>
            Bounds of character polygon
            </summary>
        </member>
        <member name="F:GLUTextCharacter.position">
            <summary>
            One-dimensional position of character in text
            </summary>
        </member>
        <member name="F:GLUTextCharacter.row">
            <summary>
            Row, which contains character
            </summary>
        </member>
        <member name="F:GLUTextCharacter.column">
            <summary>
            Index of character in containing row
            </summary>
        </member>
        <member name="M:GLUTextCharacter.#ctor(System.Char,UnityEngine.Rect,System.Int32,GLUTextRow,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="character"></param>
            <param name="meshBounds"></param>
            <param name="position"></param>
            <param name="row"></param>
            <param name="column"></param>
        </member>
        <member name="M:GLUTextCharacter.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUTextCharacter.ToString">
            <summary>
            String conversion routine
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUTextCharacter.Destroy">
            <summary>
            Destroys this text character
            </summary>
        </member>
        <member name="M:GLUTextCharacter.Destroy(GLUTextCharacter)">
            <summary>
            Destroys provided text character
            </summary>
            <param name="c">Provided text character</param>
        </member>
        <member name="T:GLUEditableTextStyle">
            <summary>
            Style of editable text
            </summary>
        </member>
        <member name="F:GLUEditableTextStyle.textAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="F:GLUEditableTextStyle.textStyle">
            <summary>
            Text style 
            </summary>
        </member>
        <member name="F:GLUEditableTextStyle.selectionMeshMaterial">
            <summary>
            Selection mesh material
            </summary>
        </member>
        <member name="M:GLUEditableTextStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUEditableTextStyle.#ctor(System.String,GLUTextStyle,GLUHorizontalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="name">Style name</param>
            <param name="textStyle">Text style</param>
            <param name="textAlignment">Text alignment</param>
        </member>
        <member name="M:GLUEditableTextStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLUEditableTextStyle.CreateDefault">
            <summary>
            Creates default style for GLUEditableText control
            </summary>
            <returns>Newly created style</returns>
        </member>
        <member name="T:GLUComboBoxStyle">
            <summary>
            Combo box style
            </summary>
        </member>
        <member name="F:GLUComboBoxStyle.listBoxStyle">
            <summary>
            List box control style
            </summary>
        </member>
        <member name="F:GLUComboBoxStyle.listBoxRowCount">
            <summary>
            Maximum height of list box control (in item rows)
            </summary>
        </member>
        <member name="M:GLUComboBoxStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUComboBoxStyle.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUComboBoxStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLUComboBoxStyle.CreateDefault">
            <summary>
            Called, when default style sheet is assembled
            </summary>
            <returns>Button style with default content and default name</returns>
        </member>
        <member name="T:GLUVector2Serializer">
            <summary>
            Custom serializer for Vector2 struct
            </summary>
        </member>
        <member name="M:GLUVector2Serializer.Deserialize(System.String)">
            <summary>
            Creates new Vector2 instance filling it with string parsing results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New instance</returns>
        </member>
        <member name="M:GLUVector2Serializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new Vector3 instance filling it with node parsing results
            </summary>
            <param name="n">Node to parse</param>
            <returns>New Vector3 instance</returns>
        </member>
        <member name="M:GLUVector2Serializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node, filling it with object's content
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="doc">Parent Xml document</param>
            <returns>New Xml node</returns>
        </member>
        <member name="M:GLUVector2Serializer.Serialize(System.Object)">
            <summary>
            Converts object and all its fields to string
            </summary>
            <param name="obj">Object to convert</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="M:GLUVector2Serializer.GetInstance">
            <summary>
            Common method for custom serializers creation
            </summary>
            <returns>An instance of serializer</returns>
        </member>
        <member name="M:GLUVector2Serializer.StringToVector2(System.String)">
            <summary>
            Parses text and creates new Vector3 instance, filling it with parse results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New Vector3 instance</returns>
        </member>
        <member name="M:GLUVector2Serializer.Vector2ToString(UnityEngine.Vector2)">
            <summary>
            Converts Vector2 instance to string
            </summary>
            <param name="v">Vector to convert</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="T:GLUGLUInternalImageSerializer">
            <summary>
            Internal image primitive serializer
            </summary>
        </member>
        <member name="M:GLUGLUInternalImageSerializer.Deserialize(System.String)">
            <summary>
            Creates new GLUInternalImage instance filling it with string parsing results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLUInternalImage instance</returns>
        </member>
        <member name="M:GLUGLUInternalImageSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUInternalImage instance filling it with node parsing results
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUInternalImage instance</returns>
        </member>
        <member name="M:GLUGLUInternalImageSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node, filling it with object's content
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="doc">Parent Xml document</param>
            <returns>New Xml node</returns>
        </member>
        <member name="M:GLUGLUInternalImageSerializer.Serialize(System.Object)">
            <summary>
            Converting object and all its fields to text
            </summary>
            <param name="obj">Object to convert</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="M:GLUGLUInternalImageSerializer.GetInstance">
            <summary>
            Common method for custom serializers creation
            </summary>
            <returns>An instance of serializer</returns>
        </member>
        <member name="T:GLUInput">
            <summary>
            Mouse and touchscreen input holder
            </summary>
        </member>
        <member name="F:GLUInput.terminal">
            <summary>
            Terminal 
            </summary>
        </member>
        <member name="F:GLUInput.clickInterval">
            <summary>
            Maximum click duration. In seconds.
            </summary>
        </member>
        <member name="F:GLUInput.doubleClickInterval">
            <summary>
            Maximum doule click duration. In seconds.
            </summary>
        </member>
        <member name="F:GLUInput.maxClickMoveDistance">
            <summary>
            Maximum dobule click moving distance
            </summary>
        </member>
        <member name="F:GLUInput.rightButtonDown">
            <summary>
            Right mouse button state 
            </summary>
        </member>
        <member name="F:GLUInput.rightButtonPressed">
            <summary>
            Right button press flag. Triggered once per button press
            </summary>
        </member>
        <member name="F:GLUInput.rightButtonReleased">
            <summary>
            Right button release flag. Triggered once per button release
            </summary>
        </member>
        <member name="F:GLUInput.rightButtonClick">
            <summary>
            Right button click flag. Triggered once per button release
            </summary>
        </member>
        <member name="F:GLUInput.rightButtonDoubleClick">
            <summary>
            Right button double click flag. 
            </summary>
        </member>
        <member name="F:GLUInput.leftButtonDown">
            <summary>
            Left mouse button state
            </summary>
        </member>
        <member name="F:GLUInput.leftButtonPressed">
            <summary>
            Left button press flag. Triggered once per button press
            </summary>
        </member>
        <member name="F:GLUInput.leftButtonReleased">
            <summary>
            Left button release flag. Triggered once per button release
            </summary>
        </member>
        <member name="F:GLUInput.leftButtonClick">
            <summary>
            Left button click flag. Triggered once per button release
            </summary>
        </member>
        <member name="F:GLUInput.leftButtonDoubleClick">
            <summary>
            Left button double click flag. 
            </summary>
        </member>
        <member name="F:GLUInput.middleButtonDown">
            <summary>
            Middle mouse button state
            </summary>
        </member>
        <member name="F:GLUInput.middleButtonPressed">
            <summary>
            Middle button press flag. Triggered once per button press
            </summary>
        </member>
        <member name="F:GLUInput.middleButtonReleased">
            <summary>
            Middle button release flag. Triggered once per button release
            </summary>
        </member>
        <member name="F:GLUInput.middleButtonClick">
            <summary>
            Middle button click flag. Triggered once per button release
            </summary>
        </member>
        <member name="F:GLUInput.middleButtonDoubleClick">
            <summary>
            Middle button double click flag. 
            </summary>
        </member>
        <member name="F:GLUInput.anyButtonDown">
            <summary>
            Any mouse button down flag
            </summary>
        </member>
        <member name="F:GLUInput.anyButtonPressed">
            <summary>
            Any button press flag. Triggered once per button press
            </summary>
        </member>
        <member name="F:GLUInput.anyButtonReleased">
            <summary>
            Any button release flag. Triggered once per button release
            </summary>
        </member>
        <member name="F:GLUInput.anyButtonClick">
            <summary>
            Any button click flag. Triggered once per button release if button is held shorter than clickInterval seconds.
            </summary>
        </member>
        <member name="F:GLUInput.anyButtonDoubleClick">
            <summary>
            Any button double click flag. 
            </summary>
        </member>
        <member name="F:GLUInput.wheelDelta">
            <summary>
            Mouse wheel rotation delta. 0 if wheel is not rotated
            </summary>
        </member>
        <member name="F:GLUInput.positionDelta">
            <summary>
            Cursor or touch position delta since last frame
            </summary>
        </member>
        <member name="F:GLUInput.inputMoved">
            <summary>
            Mouse has moved
            </summary>
        </member>
        <member name="F:GLUInput.cursorPosition">
            <summary>
            Current mouse position in paper coordinates (point (0, 0) is top left corner)
            </summary>
        </member>
        <member name="M:GLUInput.Reset">
            <summary>
            Resets 
            </summary>
        </member>
        <member name="F:GLUInput.doubleClickRadius">
            <summary>
            Maximum cursor offset allowed between clicks in double click
            </summary>
        </member>
        <member name="M:GLUInput.InputIntercepted(UnityEngine.Vector3)">
            <summary>
            Processes terminal's input if it is intercepted by another terminal
            </summary>
            <param name="mp">Mouse position</param>
        </member>
        <member name="M:GLUInput.UpdateInput">
            <summary>
            Updates input at runtime
            </summary>
        </member>
        <member name="M:GLUInput.UpdateInput(UnityEngine.Event)">
            <summary>
            Updates input at design time
            </summary>
        </member>
        <member name="M:GLUInput.UpdateInput(UnityEngine.Event,UnityEngine.Vector3)">
            <summary>
            Updates input values
            </summary>
            <param name="e">Event</param>
            <param name="mp">Cursor position</param>
        </member>
        <member name="F:GLUInput.zoomCenter">
            <summary>
            Zoom center. Point, around which zoom is happened
            </summary>
        </member>
        <member name="M:GLUInput.Update">
            <summary>
            Updates mouse states, position, etc..
            </summary>
        </member>
        <member name="M:GLUInput.Update(UnityEngine.Vector3)">
            <summary>
            Updates mouse states, position, etc..
            </summary>
        </member>
        <member name="F:GLUInput.keyboard">
            <summary>
            Keyboard input holder
            </summary>
        </member>
        <member name="M:GLUInput.#ctor(GLUBaseTerminal)">
            <summary>
            Creates input holder for provided terminal
            </summary>
            <param name="terminal">Terminal</param>
        </member>
        <member name="P:GLUInput.screenDiagonal">
            <summary>
             Screen diagonal
            </summary>
        </member>
        <member name="T:GLUClipboardHelper">
            <summary>
            Clipoard helper. Used to acess system clipboard
            </summary>
        </member>
        <member name="P:GLUClipboardHelper.clipBoard">
            <summary>
            String representation of clipboard
            </summary>
        </member>
        <member name="T:GLUXMLDelegateLink">
            <summary>
            Attribute, which links together method in the source file and action property of control in XML file 
            </summary>
        </member>
        <member name="F:GLUXMLDelegateLink.guid">
            <summary>
            ID of control in Xml you are linking to
            </summary>
        </member>
        <member name="F:GLUXMLDelegateLink.xmlName">
            <summary>
            Name of object in Xml file you are linking to 
            </summary>
        </member>
        <member name="F:GLUXMLDelegateLink.delegateFieldName">
            <summary>
            Action property or field
            </summary>
        </member>
        <member name="M:GLUXMLDelegateLink.#ctor(System.String,System.String,System.String)">
             <summary>
             Constructor
             </summary>
             <param name="guid">ID of control in Xml you are linking to</param>
             <param name="xmlName">Name of property in Xml file you are linking to </param>
             <param name="delegateFieldName">Action property of linked Xml object (usually, control)</param>
             <example>
             This example shows how to use GLUInspectableMember 
             <code>
             \code
             [GLUXMLDelegateLink("7322287c-8314-4717-bf7c-2d1552bac7d4", "Label0", "OnShow")]
             private void Label0OnShow(GLUControl sender)
             {
            
             }
             \endcode
             </code>
             </example>    
        </member>
        <member name="T:GLUMemberGroup">
            <summary>
            Member type
            </summary>
        </member>
        <member name="F:GLUMemberGroup.reserved">
            <summary>
            Reserved. Used for initialization
            </summary>
        </member>
        <member name="F:GLUMemberGroup.Action">
            <summary>
            Action group. Contains event handlers list
            </summary>
        </member>
        <member name="F:GLUMemberGroup.Appearance">
            <summary>
            Appearance group. Contains everything about graphic representation
            </summary>
        </member>
        <member name="F:GLUMemberGroup.Behaviour">
            <summary>
            Behaviour group. Flags, childrens, etc..
            </summary>
        </member>
        <member name="F:GLUMemberGroup.Data">
            <summary>
            Data group. Text, attached objects, tags.
            </summary>
        </member>
        <member name="F:GLUMemberGroup.Design">
            <summary>
            Names and ID 
            </summary>
        </member>
        <member name="F:GLUMemberGroup.Layout">
            <summary>
            Coordinates and sizes
            </summary>
        </member>
        <member name="F:GLUMemberGroup.Misc">
            <summary>
            Other properties
            </summary>
        </member>
        <member name="F:GLUMemberGroup.Debug">
            <summary>
            Debug properties
            </summary>
        </member>
        <member name="T:GLUInspectableMember">
            <summary>
            Attribute, which indicates, that following member is exposed to GLU Object inspector
            </summary>
        </member>
        <member name="F:GLUInspectableMember.type">
            <summary>
            Property group, this object is belonged to 
            </summary>
        </member>
        <member name="F:GLUInspectableMember.displayName">
            <summary>
            Property display name in editor
            </summary>
        </member>
        <member name="F:GLUInspectableMember.order">
            <summary>
            Property order override
            </summary>
        </member>
        <member name="M:GLUInspectableMember.#ctor(GLUMemberGroup,System.String,System.Int32)">
            <summary>
            Constructor 
            </summary>
            <param name="type">Property group</param>
            <param name="displayName">Property display name in editor</param>
            <param name="order">Property order override</param>
            <example>
            This example shows how to use GLUInspectableMember 
            <code>
            \code
            [GLUInspectableMember(GLUMemberGroup.Behaviour, "Next Button", 0)]
            public GLUButton nextButton;
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUInspectableMember.#ctor(GLUMemberGroup,System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="type">Property group</param>
            <param name="displayName">Property display name in editor</param>
            <example>
            This example shows how to use GLUInspectableMember 
            <code>
            \code
            [GLUInspectableMember(GLUMemberGroup.Behaviour, "Next Button")]
            public GLUButton nextButton;
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUInspectableMember.#ctor(GLUMemberGroup)">
            <summary>
            Constructor 
            </summary>
            <param name="type">Property group</param>
            <example>
            This example shows how to use GLUInspectableMember 
            <code>
            \code
            [GLUInspectableMember(GLUMemberGroup.Behaviour)]
            public GLUButton nextButton;
            \endcode
            </code>
            </example>
        </member>
        <member name="T:GLUPopupMenuStyle">
            <summary>
            Popup menu style
            </summary>
        </member>
        <member name="F:GLUPopupMenuStyle.editorRepresentation">
            <summary>
            Icon for editor
            </summary>
        </member>
        <member name="F:GLUPopupMenuStyle.editorRepresentationSize">
            <summary>
            Editor icon size
            </summary>
        </member>
        <member name="F:GLUPopupMenuStyle.itemControlStyle">
            <summary>
            Style of item control
            </summary>
        </member>
        <member name="F:GLUPopupMenuStyle.autoSize">
            <summary>
            If true, menu will be auto sized
            </summary>
        </member>
        <member name="F:GLUPopupMenuStyle.minWidth">
            <summary>
            Minimum width of menu
            </summary>
        </member>
        <member name="M:GLUPopupMenuStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="M:GLUPopupMenuStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,GLUBorders,GLUPadding,GLUButtonStyle,GLURotation)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="normal">Normal texture</param>
            <param name="borders">Non-stretched texture borders</param>
            <param name="padding">Control padding</param>
            <param name="itemControlStyle">Style of items control</param>
            <param name="rotation">Textures UV rotation</param>
        </member>
        <member name="M:GLUPopupMenuStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created popup menu style</returns>
        </member>
        <member name="T:GLUHScrollBarStyle">
            <summary>
            Horizontal scrollbar style 
            </summary>
        </member>
        <member name="M:GLUHScrollBarStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUHScrollBarStyle.CreateObject">
            <summary>
            Creates default horizontal scrollbar with this style
            </summary>
            <returns>New GLUHscrollBar instance</returns>
        </member>
        <member name="M:GLUHScrollBarStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created horizontal scrollbar style</returns>
        </member>
        <member name="T:GLUDecoratedLabelStyle">
            <summary>
            Decorate label style
            </summary>
        </member>
        <member name="M:GLUDecoratedLabelStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUDecoratedLabelStyle.#ctor(System.String,GLUPadding)">
            <summary>
            Constructor
            </summary>
            <param name="name">Style name</param>
            <param name="padding">Object padding</param>
        </member>
        <member name="M:GLUDecoratedLabelStyle.CreateDefault">
            <summary>
            Called, when default style sheet is assembled
            </summary>
            <returns>Button style with default content and default name</returns>
        </member>
        <member name="T:GLUStyleLink">
            <summary>
            Style link class. Link to style by its name
            </summary>
        </member>
        <member name="M:GLUStyleLink.#ctor">
            <summary>
            Parameterless constructor for deserialization
            </summary>
        </member>
        <member name="M:GLUStyleLink.#ctor(GLUStyle,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="style">Style</param>
            <param name="styleName">Style name</param>
        </member>
        <member name="M:GLUStyleLink.op_Implicit(GLUStyle)~GLUStyleLink">
            <summary>
            Implicit constructor. Creates and initializes GLUStyleLink instance with provided style
            </summary>
            <param name="style">Style</param>
            <returns>An instance of GLUStyleLink if style parameter is style, and nulll otherwize</returns>
            <example>
            This example shows how to use GLUStyleLink implicit constructor
            <code>
            \code
            GLUButton b = new GLUButton(this, "button", new GLUNumber(10), new GLUNumber(10), new GLUNumber(100), new GLUNumber(24), true, "button");
            GLUStyleLink sl = b.style;
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUStyleLink.op_Implicit(System.String)~GLUStyleLink">
            <summary>
            Implicit constructor. Creates and initializes GLUStyleLink instance with provided style name
            </summary>
            <param name="styleName">Style name</param>
            <returns>An instance of GLUStyleLink</returns>
            <example>
            This example shows how to use GLUStyleLink implicit constructor
            <code>
            \code
            GLUStyleLink sl = "button";
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUStyleLink.ToString">
            <summary>
            Converts style link to string
            </summary>
            <returns>Style name</returns>
        </member>
        <member name="P:GLUStyleLink.styleName">
            <summary>
            Style name 
            </summary>
        </member>
        <member name="P:GLUStyleLink.style">
            <summary>
            Style
            </summary>
        </member>
        <member name="T:GLUCheckBox">
            <summary>
            Check box
            </summary>
        </member>
        <member name="M:GLUCheckBox.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,GLUStyle)">
            <summary>
            Constructor with full set of parameters
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>
            <param name="text">Text</param>
            <param name="style">Control style</param>
            <example>
            This example shows how to use GLUCheckBox constructor
            <code>
            \code
            GLUCheckBoxStyle chkStyle = new GLUCheckBoxStyle(GLUStyleSheet.defaultSheet, "checkBox", new GLUNumber(16), new GLUNumber(16), @"GLU/Controls/Textures/CheckBox/checkbox_normal", @"GLU/Controls/Textures/CheckBox/checkbox_hover", @"GLU/Controls/Textures/CheckBox/checkbox_pressed", new GLUBorders(0), new GLUPadding(0), GLURotation.ccw0, new GLUTextStyle("arial", 12, FontStyle.Normal, new GLUColor(1), false), GLUHorizontalAlignment.left);
            GLUCheckBox chkBx0 = AddChild(new GLUCheckBox(this, "chkBx", new GLUNumber(10), new GLUNumber(10), new GLUNumber(128), new GLUNumber(24), true, "checkBox0", chkStyle)) as GLUCheckBox;
            GLUCheckBox chkBx1 = AddChild(new GLUCheckBox(this, "chkBx", new GLUNumber(10), new GLUNumber(10), new GLUNumber(128), new GLUNumber(24), true, "checkBox0")) as GLUCheckBox;
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUCheckBox.#ctor">
            <summary>
            Parameterless constructor for deserialization 
            </summary>
        </member>
        <member name="M:GLUCheckBox.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default CheckBox with default content. Used in editor 
            </summary>
            <param name="parent">Parent control</param>
            <param name="name">New CheckBox name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>Newly created CheckBox</returns>
        </member>
        <member name="P:GLUCheckBox.isChecked">
            <summary>
            Checked flag
            </summary>
        </member>
        <member name="T:GLUEngine">
            <summary>
            Main GLU manager
            </summary>
        </member>
        <member name="M:GLUEngine.Awake">
            <summary>
            Setup of engine
            </summary>
        </member>
        <member name="M:GLUEngine.LogCallbackHandler(System.String,System.String,UnityEngine.LogType)">
            <summary>
            Debug log callback
            </summary>
            <param name="logString">Log string text</param>
            <param name="stackTrace">Event source in stack</param>
            <param name="type">Log type</param>
        </member>
        <member name="M:GLUEngine.Start">
            <summary>
            Starts GLU
            </summary>
        </member>
        <member name="M:GLUEngine.Update">
            <summary>
            Updates terminals internal mechanics
            </summary>
        </member>
        <member name="M:GLUEngine.OnPostRender">
            <summary>
            Renders terminals content
            </summary>
        </member>
        <member name="M:GLUEngine.FixedUpdate">
            <summary>
            Fixed update handler
            </summary>
        </member>
        <member name="M:GLUEngine.LateUpdate">
            <summary>
            Late update handler
            </summary>
        </member>
        <member name="T:GLUQueryDialogType">
            <summary>
            Message dialog type
            </summary>
        </member>
        <member name="F:GLUQueryDialogType.reserved">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="F:GLUQueryDialogType.text">
            <summary>
            Text query dialog
            </summary>
        </member>
        <member name="T:GLUQueryDialog">
            <summary>
            Query dialog
            </summary>
        </member>
        <member name="F:GLUQueryDialog.type">
            <summary>
            Dialogue type 
            </summary>
        </member>
        <member name="F:GLUQueryDialog.message">
            <summary>
            Query message
            </summary>
        </member>
        <member name="F:GLUQueryDialog.content">
            <summary>
            Query field content
            </summary>
        </member>
        <member name="F:GLUQueryDialog.messageLabel">
            <summary>
            Query message label
            </summary>
        </member>
        <member name="F:GLUQueryDialog.textEdit">
            <summary>
            Query text field
            </summary>
        </member>
        <member name="F:GLUQueryDialog.modalResult">
            <summary>
            Query modal result
            </summary>
        </member>
        <member name="M:GLUQueryDialog.CreateControls">
            <summary>
            Creates controls
            </summary>
        </member>
        <member name="M:GLUQueryDialog.ShowTextQueryModal(System.String,System.String,System.String,System.String,System.String,GLUControlEvent)">
            <summary>
            Show text modal query 
            </summary>
            <param name="title">Query window title</param>
            <param name="message">Query message</param>
            <param name="text">Query initial text</param>
            <param name="yesText">"Yes" button caption</param>
            <param name="noText">"No" button caption</param>
            <param name="closeHandler">Close handler. Called, when dialogue closes</param>
        </member>
        <member name="T:GLUVector3Serializer">
            <summary>
            Custom serializer for Vector3 struct
            </summary>
        </member>
        <member name="M:GLUVector3Serializer.Deserialize(System.String)">
            <summary>
            Creates new Vector3 instance filling it with string parsing results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New instance</returns>
        </member>
        <member name="M:GLUVector3Serializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new Vector3 instance filling it with node parsing results
            </summary>
            <param name="n">Node to parse</param>
            <returns>New Vector3 instance</returns>
        </member>
        <member name="M:GLUVector3Serializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node, filling it with object's content
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="doc">Parent Xml document</param>
            <returns>New Xml node</returns>
        </member>
        <member name="M:GLUVector3Serializer.Serialize(System.Object)">
            <summary>
            Converts object and all its fields to string
            </summary>
            <param name="obj">Object to convert</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="M:GLUVector3Serializer.GetInstance">
            <summary>
            Common method for custom serializers creation
            </summary>
            <returns>An instance of serializer</returns>
        </member>
        <member name="M:GLUVector3Serializer.StringToVector3(System.String)">
            <summary>
            Parses text and creates new Vector3 instance, filling it with parse results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New Vector3 instance</returns>
        </member>
        <member name="M:GLUVector3Serializer.Vector3ToString(UnityEngine.Vector3)">
            <summary>
            Converts object and all its fields to string
            </summary>
            <param name="v">Object to convert</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="T:GLUQuaternionSerializer">
            <summary>
            Custom serializer for quaternions
            </summary>
        </member>
        <member name="M:GLUQuaternionSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new Quaternion instance filling it with node parsing results
            </summary>
            <param name="n">Node to parse</param>
            <returns>New Quaternion instance</returns>
        </member>
        <member name="M:GLUQuaternionSerializer.Deserialize(System.String)">
            <summary>
            Creates new Quaternion instance filling it with string parsing results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New Quaternion instance</returns>
        </member>
        <member name="M:GLUQuaternionSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node, filling it with object's content
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="doc">Parent Xml document</param>
            <returns>New Xml node</returns>
        </member>
        <member name="M:GLUQuaternionSerializer.Serialize(System.Object)">
            <summary>
            Converts object and all its fields to text
            </summary>
            <param name="obj">Object to convert</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="M:GLUQuaternionSerializer.GetInstance">
            <summary>
            Common method for custom serializers creation
            </summary>
            <returns>An instance of serializer</returns>
        </member>
        <member name="M:GLUQuaternionSerializer.QuaternionToString(UnityEngine.Quaternion)">
            <summary>
            Converting object and all its fields to string
            </summary>
            <param name="q">Provided quaternion</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="M:GLUQuaternionSerializer.StringToQuaternion(System.String)">
            <summary>
            Parses text and creates new quaternion, filling it with parse results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New quaternion</returns>
        </member>
        <member name="T:GLUInternalText">
            <summary>
            Animateable text primitive
            </summary>
        </member>
        <member name="F:GLUInternalText.OnTextChange">
            <summary>
            Text change event
            </summary>
        </member>
        <member name="F:GLUInternalText.mesh">
            <summary>
            Foreground mesh - usually set of polygons with letter textures
            </summary>
        </member>
        <member name="M:GLUInternalText.#ctor(System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.String,GLUTextStyle,GLUHorizontalAlignment,GLUVerticalAlignment,GLUAnimationSet,GLUMaterial,GLUHorizontalAlignment,GLUVerticalAlignment)">
            <summary>
            Constructor
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Label width</param>
            <param name="height">Label height</param>
            <param name="text">Text</param>
            <param name="textStyle">Text style</param>
            <param name="alignment">Horizontal alignment in parent space</param>
            <param name="animationSet">Animation set</param>
            <param name="material">Primitive material</param>
            <param name="name">Primitive name</param>
            <param name="textAlignment">Horizontal text alignment in primitive space</param>
            <param name="textVerticalAlignment">Vertical text alignment in primitive space</param>
            <param name="verticalAlignment">Vertical alignment in parent space</param>
        </member>
        <member name="M:GLUInternalText.#ctor(GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.String,GLUStyle)">
            <summary>
            Constructor
            </summary>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Label width</param>
            <param name="height">Label height</param>
            <param name="text">Text</param>
            <param name="style">Object style</param>
        </member>
        <member name="M:GLUInternalText.#ctor">
            <summary>
            Paramterless constructor
            </summary>
        </member>
        <member name="M:GLUInternalText.#ctor(GLUInternalTextStyle,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="style">Graphit style</param>
            <param name="text">Text</param>
        </member>
        <member name="M:GLUInternalText.#ctor(System.String,GLUTextStyle,System.String,GLUAnimationSet)">
            <summary>
            Constructor
            </summary>
            <param name="textStyle">Text style</param>
            <param name="animationSet">Animation set</param>
            <param name="name">Primitive name</param>
            <param name="text">Text</param>
        </member>
        <member name="M:GLUInternalText.ApplyStyle">
            <summary>
            Sets internal values according to object's style
            </summary>
        </member>
        <member name="M:GLUInternalText.Draw(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws label with provided offset and scale
            </summary>
            <param name="offset">Offset</param>
            <param name="scale">Scale</param>
            <param name="pivot">Draw pivot</param>
            <param name="rotation">Draw rotation</param>
        </member>
        <member name="M:GLUInternalText.MaterialChanged(GLUMaterial)">
            <summary>
            Material change handler
            </summary>
            <param name="m">Changed material</param>
        </member>
        <member name="M:GLUInternalText.CalculatePaddedContentBounds(GLUConstraints,GLUConstraints,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Internal. Recalculate object bounds. Called during Refresh
            </summary>
        </member>
        <member name="M:GLUInternalText.RefreshGraphicObject">
            <summary>
            Generates meshes
            </summary>
        </member>
        <member name="M:GLUInternalText.GenerateRows(System.Single,System.Single,System.Single,System.Single,System.Collections.Generic.List{GLUInternalText.Row})">
            <summary>
            Generates text rows
            </summary>
            <param name="x">Horizontal start pos</param>
            <param name="y">Vertical start pos</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="rows">Rows to generate</param>
        </member>
        <member name="M:GLUInternalText.Destroy">
            <summary>
            Destroys label, setting its content to null
            </summary>
        </member>
        <member name="M:GLUInternalText.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes object to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUInternalText.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling object's content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUInternalText.Assign(GLUInternalGraphic)">
            <summary>
            Assigns content from provided graphic
            </summary>
            <param name="ig">Provided graphic</param>
        </member>
        <member name="M:GLUInternalText.FillStyleContent(GLUStyle,GLUStyleSheet)">
            <summary>
            When GetStyle method is called, FillStyleContent is used to fill newly created style. Internal 
            </summary>
            <param name="style">Style to fill</param>
            <param name="sheet">StyleSheet container</param>
        </member>
        <member name="M:GLUInternalText.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUInternalText.Clone">
            <summary>
            Creates a shallow copy of primitive
            </summary>
            <returns>Shallow copy of primitive</returns>
        </member>
        <member name="M:GLUInternalText.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default graphic primitive. Used in forms editor
            </summary>
            <param name="parent">Primitive parent</param>
            <param name="name">Primitive name</param>
            <param name="width">Object width</param>
            <param name="height">Object height</param>
            <returns>New instance of GLUInternalText with default content</returns>
        </member>
        <member name="M:GLUInternalText.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUInternalText from provided Xml node
            </summary>
            <param name="n">Node to parse</param>
            <returns>New primitive</returns>
        </member>
        <member name="P:GLUInternalText.material">
            <summary>
            Object's material
            </summary>
        </member>
        <member name="P:GLUInternalText.textAlignment">
            <summary>
            Text horizontal alignment
            </summary>
        </member>
        <member name="P:GLUInternalText.textVerticalAlignment">
            <summary>
            Text vertical alignment
            </summary>
        </member>
        <member name="P:GLUInternalText.textStyle">
            <summary>
            Current text style
            </summary>
        </member>
        <member name="P:GLUInternalText.text">
            <summary>
            Text of label
            </summary>
        </member>
        <member name="T:GLUTextureEvent">
            <summary>
            Texture event
            </summary>
            <param name="sender">Sender texture</param>
        </member>
        <member name="T:GLUTexture">
            <summary>
            GLU texture
            </summary>
        </member>
        <member name="F:GLUTexture.textures">
            <summary>
            All textures in system 
            </summary>
        </member>
        <member name="F:GLUTexture.data">
            <summary>
            If texture is stored in XML, it's data is stored here
            </summary>
        </member>
        <member name="F:GLUTexture.name">
            <summary>
            Texture's unique name, usually URL or file path
            </summary>
        </member>
        <member name="F:GLUTexture.loadFromResources">
            <summary>
            True, if texture loaded from Resources folder 
            </summary>
        </member>
        <member name="F:GLUTexture.textureWidth">
            <summary>
            Width of texture
            </summary>
        </member>
        <member name="F:GLUTexture.textureHeight">
            <summary>
            Height of texture
            </summary>
        </member>
        <member name="M:GLUTexture.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUTexture.#ctor(UnityEngine.Texture)">
            <summary>
            Constructor. Wraps provided UnityEngine.Texture into GLUTexture object
            </summary>
            <param name="texture">Provided texture</param>
        </member>
        <member name="M:GLUTexture.#ctor(System.String,UnityEngine.Texture,GLUNumber,GLUNumber,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">Texture name</param>
            <param name="texture">Unity texture. If texture is RenderTexture, it is copied to Texture2D</param>
            <param name="width">Texture width</param>
            <param name="height">Texture height</param>
            <param name="clone">Creates copy of provided texture</param>
        </member>
        <member name="M:GLUTexture.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="url">Texture URL</param>
            <param name="loadFromResources">True, if URL is local Resources path</param>
        </member>
        <member name="M:GLUTexture.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="url">Texture URL</param>
        </member>
        <member name="M:GLUTexture.Load(System.String,System.Boolean)">
            <summary>
            Returns texture loaded from specified URL
            </summary>
            <param name="url">Texture URL</param>
            <param name="loadFromResources">True, if URL is local Resources path</param>
            <returns></returns>
        </member>
        <member name="M:GLUTexture.Load(System.String)">
            <summary>
            Returns texture loaded from specified URL
            </summary>
            <param name="url">Texture URL. If starts from '*' symbol, texture tries to load itself from WWW URL</param>
            <returns></returns>
        </member>
        <member name="M:GLUTexture.ToString">
            <summary>
            Returns name of texture
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUTexture.Reload">
            <summary>
            Reloads texture
            </summary>
        </member>
        <member name="M:GLUTexture.GetTexture(System.String,System.Boolean)">
            <summary>
            Searches textures cache for provided url and returns cache entry if found, new Texture otherwise 
            </summary>
            <param name="url">URL to load</param>
            <param name="loadFromResources">True, if URL is local Resources path</param>
            <returns>GLU Texture</returns>
        </member>
        <member name="M:GLUTexture.GetTexture(System.String)">
            <summary>
            Searches textures cache for provided url and returns cache entry if found, new Texture otherwise 
            </summary>
            <param name="url">URL to load</param>
            <returns>GLU Texture</returns>
        </member>
        <member name="M:GLUTexture.LoadTextureFromURL(System.String)">
            <summary>
            Loads texture from WWW URL
            </summary>
            <param name="url">URL</param>
        </member>
        <member name="M:GLUTexture.LoadTextureFromHexString(System.String)">
            <summary>
            Loads texture from provided data string in HEX format (RRGGBBAA...RRGGBBAA)
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:GLUTexture.SaveTextureToHexString(UnityEngine.Texture2D)">
            <summary>
            Saves texture to string in HEX format (RRGGBAA...RRGGBAA)
            </summary>
            <param name="texture">Texture to save</param>
            <returns>Text representation</returns>
        </member>
        <member name="M:GLUTexture.SaveTextureToInternalStore">
            <summary>
            Saves texture to internal store (data field) in HEX format
            </summary>
        </member>
        <member name="M:GLUTexture.Save(System.String)">
            <summary>
            Saves texture to provided URL
            </summary>
            <param name="url">Provided URL</param>
        </member>
        <member name="M:GLUTexture.LoadTextureFromFile(System.String)">
            <summary>
            Loads texture from file
            </summary>
            <param name="filename">Path to file</param>
            <returns>New GLUTexture instance</returns>
        </member>
        <member name="M:GLUTexture.op_Implicit(System.String)~GLUTexture">
            <summary>
            Implicit constructor. 
            </summary>
            <param name="str">URL</param>
            <returns>Loaded or taken from cache texture</returns>
        </member>
        <member name="P:GLUTexture.texture">
            <summary>
            Native texture
            </summary>
        </member>
        <member name="E:GLUTexture.OnChange">
            <summary>
            Texture change event
            </summary>
        </member>
        <member name="T:GLUControlState">
            <summary>
            Control state flags set
            </summary>
        </member>
        <member name="F:GLUControlState.initial">
            <summary>
            initial flag. Means initial state of control
            </summary>
        </member>
        <member name="F:GLUControlState.start">
            <summary>
            Start flag. Means that state change just happened
            </summary>
        </member>
        <member name="F:GLUControlState.visible">
            <summary>
            Visible flag. Is set when control changes its visibility
            </summary>
        </member>
        <member name="F:GLUControlState.hovered">
            <summary>
            Hovered flag. Is set when cursor entered or leaved control
            </summary>
        </member>
        <member name="F:GLUControlState.focused">
            <summary>
            Focused flag. Is set when control gets or looses focus
            </summary>
        </member>
        <member name="F:GLUControlState.leftInputButtonPressed">
            <summary>
            Input button press flag. Is set when left mouse button or touchscreen is pressed
            </summary>
        </member>
        <member name="F:GLUControlState.rightInputButtonPressed">
            <summary>
            Input button press flag. Is set when right mouse button is pressed or touchscreen is held for 5 seconds
            </summary>
        </member>
        <member name="F:GLUControlState.middleInputButtonPressed">
            <summary>
            Input button press flag. Is set when middle mouse button is pressed
            </summary>
        </member>
        <member name="F:GLUControlState.wheelRotated">
            <summary>
            Wheel flag. Is set when mouse wheel rotates
            </summary>
        </member>
        <member name="F:GLUControlState.controlKeyPressed">
            <summary>
            Wheel flag. Is set when any control key (Ctrl, ALt, Esc, Return, Backspace, Arrows) is pressed
            </summary>
        </member>
        <member name="F:GLUControlState.charKeyPressed">
            <summary>
            Char key flag. Is set when user presses any char key
            </summary>
        </member>
        <member name="T:GLUHorizontalAlignment">
            <summary>
            Horizontal origin alignment
            </summary>
        </member>
        <member name="F:GLUHorizontalAlignment.left">
            <summary>
            Left alignment
            </summary>
        </member>
        <member name="F:GLUHorizontalAlignment.center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:GLUHorizontalAlignment.right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:GLUHorizontalAlignment.justify">
            <summary>
            Justify alignment
            </summary>
        </member>
        <member name="F:GLUHorizontalAlignment.client">
            <summary>
            Client area fill
            </summary>
        </member>
        <member name="F:GLUHorizontalAlignment.fill">
            <summary>
            Client area fill
            </summary>
        </member>
        <member name="T:GLUVerticalAlignment">
            <summary>
            Vertical origin alignment
            </summary>
        </member>
        <member name="F:GLUVerticalAlignment.top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:GLUVerticalAlignment.middle">
            <summary>
            Middle
            </summary>
        </member>
        <member name="F:GLUVerticalAlignment.bottom">
            <summary>
            Bottom 
            </summary>
        </member>
        <member name="F:GLUVerticalAlignment.client">
            <summary>
            Client area fill
            </summary>
        </member>
        <member name="F:GLUVerticalAlignment.fill">
            <summary>
            Client area fill
            </summary>
        </member>
        <member name="T:GLUControlEvent">
            <summary>
            Simple control event, such as OnChange, OnPress
            </summary>
            <param name="sender">Event sender</param>
        </member>
        <member name="T:GLUControlMemberEvent">
            <summary>
            Simple control member event, such as OnChange, OnPress
            </summary>
            <param name="sender">Event sender</param>
            <param name="memberName">Class member name</param>
            <param name="value">Member value</param>
            <param name="mi">Memebr info</param>
        </member>
        <member name="T:GLUDropEvent">
            <summary>
            Drop event. Send to drop target
            </summary>
            <param name="sender">Event sender</param>
            <param name="source">Drop source</param>
        </member>
        <member name="T:GLUDragEvent">
            <summary>
            Drag event. Send to drop source
            </summary>
            <param name="sender">Event sender</param>
            <param name="target">Drop target</param>
        </member>
        <member name="T:GLUFocusEvent">
            <summary>
            Focus event
            </summary>
            <param name="sender">New focused control</param>
            <param name="focusedControl">Old focused control</param>
        </member>
        <member name="T:GLUControlInputEvent">
            <summary>
            Input event
            </summary>
            <param name="sender">Event sender</param>
            <param name="mp">Input position in control's space</param>
        </member>
        <member name="T:GLUControlWheelEvent">
            <summary>
            Mouse wheel event
            </summary>
            <param name="sender">Event sender</param>
            <param name="mp">Input position in control's space</param>
            <param name="wheelDelta">Mouse wheel delta</param>
        </member>
        <member name="T:GLUControlDrawEvent">
            <summary>
            Control draw event
            </summary>
            <param name="sender">Event sender</param>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="maxX">Viewport right border</param>
            <param name="maxY">Viewport bottom border</param>
            <param name="minX">Viewport left border</param>
            <param name="minY">Viewport top border</param>
        </member>
        <member name="T:GLUControlDrawStretchedEvent">
            <summary>
            Stretched draw event
            </summary>
            <param name="sender">Event sender</param>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="T:GLUKeyboardEvent">
            <summary>
            Keyboard event
            </summary>
            <param name="sender">Event sender</param>
            <param name="key">Key code</param>
        </member>
        <member name="T:GLUCharEvent">
            <summary>
            Keyboard event
            </summary>
            <param name="sender">Event sender</param>
            <param name="key">Key code</param>
        </member>
        <member name="T:GLUXMLControlLink">
            <summary>
            Attribute, which links together property in the source file and property of control in XML file 
            </summary>
        </member>
        <member name="F:GLUXMLControlLink.guid">
            <summary>
            ID of control in Xml you are linking to
            </summary>
        </member>
        <member name="F:GLUXMLControlLink.xmlName">
            <summary>
            Name of property in Xml file you are linking to 
            </summary>
        </member>
        <member name="M:GLUXMLControlLink.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="guid">ID of control in Xml you are linking to</param>
            <param name="xmlName">Name of property in Xml file you are linking to </param>
            <example>
            This example shows how to use GLUXMLControlLink 
            <code>
            \code
            #region Controls
            [GLUXMLControlLink("cb178bcd-aa97-4e81-b462-207ccb176582", "HScrollBar0")]
            private GLUHScrollBar HScrollBar0;
            #endregion
            \endcode
            </code>
            </example>
        </member>
        <member name="T:GLUMaterialColorSequence">
            <summary>
            Material color sequence. Controls material.color parameter of graphic object
            </summary>
        </member>
        <member name="M:GLUMaterialColorSequence.#ctor(UnityEngine.WrapMode,UnityEngine.WrapMode,System.Single,GLUKey{UnityEngine.Vector4}[])">
            <summary>
            Constructor
            </summary>
            <param name="preWrapMode">Animation curve wrap mode before first frame</param>
            <param name="postWrapMode">Animation curve wrap mode after last frame</param>
            <param name="keys">Array of keyframes</param>
            <param name="transitionSpeed">Transition speed</param>
            <example>
            This example shows how to use GLUMaterialColorSequence constructor
            <code>
            \code
            GLUMaterialColorSequence colorfadeIn = new GLUMaterialColorSequence(WrapMode.ClampForever, WrapMode.ClampForever,
                new GLUKey&lt;Vector4&gt;(0.33f, new Vector4(1, 1, 1, 1)), new GLUKey&lt;Vector4&gt;(1f, new Vector4(0.5f, 0.5f, 0.5f, 1)));
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, colorFadeIn));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUMaterialColorSequence.#ctor">
            <summary>
            Constructor
            </summary>
            <example>
            This example shows how to use GLUMaterialColorSequence constructor
            <code>
            \code
            GLUMaterialColorSequence colorfadeIn = new GLUMaterialColorSequence();
            colorFaddeIn.AddKey(0.33f, new Vector4(1, 1, 1, 1));
            colorFaddeIn.AddKey(1f, new Vector4(0.5f, 0.5f, 0.5f, 1));
            GLUAnimationSet glueHUDSet = new GLUAnimationSet();
            glueHUDSet.AddAnimation(new GLUAnimation((int)GLUInternalButtonEvent.enter, false, colorFadeIn));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUMaterialColorSequence.GetTargetValue(IGLUAnimateable)">
            <summary>
            Returns Target material.color value.  
            </summary>
            <param name="target">Target object. Must be also IGLURenderable</param>
            <returns>Vector4 instance containing Color value</returns>
        </member>
        <member name="M:GLUMaterialColorSequence.Apply(System.Single,IGLUAnimateable)">
            <summary>
            Applies sequence to the target object. Target must also be an IGLUTransformable
            </summary>
            <param name="time">Sequence time</param>
            <param name="target">Target object</param>
        </member>
        <member name="M:GLUMaterialColorSequence.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new instance of GLUMaterialColorSequence, filling it with node's parse results
            </summary>
            <param name="n">Node to parse</param>
            <returns>An instance of GLUMaterialColorSequence</returns>
        </member>
        <member name="M:GLUMaterialColorSequence.Clone">
            <summary>
            Creates a complete copy of the sequence
            </summary>
            <returns>Sequence copy</returns>
        </member>
        <member name="T:GLUBordersEvent">
            <summary>
            Padding change delegate
            </summary>
            <param name="sender">Source padding structure</param>
        </member>
        <member name="T:GLUBorders">
            <summary>
            Struct for holding borders and padding values 
            </summary>
        </member>
        <member name="F:GLUBorders.left">
            <summary>
            Left border
            </summary>
        </member>
        <member name="F:GLUBorders.right">
            <summary>
            Right border
            </summary>
        </member>
        <member name="F:GLUBorders.top">
            <summary>
            Top border
            </summary>
        </member>
        <member name="F:GLUBorders.bottom">
            <summary>
            Bottom border
            </summary>
        </member>
        <member name="M:GLUBorders.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="left">Left border</param>
            <param name="right">Right border</param>
            <param name="top">Top border</param>
            <param name="bottom">Bottom border</param>
        </member>
        <member name="M:GLUBorders.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="value">Borders value</param>
        </member>
        <member name="M:GLUBorders.ToString">
            <summary>
            Converts borders to string
            </summary>
            <returns>String representation of padding</returns>
        </member>
        <member name="M:GLUBorders.Parse(System.String)">
            <summary>
            Parses provided string, filling new GLUPadding instance with parse results
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="M:GLUBorders.op_Implicit(System.String)~GLUBorders">
            <summary>
            Implicit constructor
            </summary>
            <param name="s">Text to parse</param>
            <returns>Newly created GLUPadding</returns>
        </member>
        <member name="F:GLUBorders.zero">
            <summary>
            Built-in zero padding
            </summary>
        </member>
        <member name="M:GLUBorders.op_Equality(GLUBorders,GLUBorders)">
            <summary>
            == operator override
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUBorders.op_Inequality(GLUBorders,GLUBorders)">
            <summary>
            != operator override
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUBorders.Equals(System.Object)">
            <summary>
            Checks, if provided object is equal to this one
            </summary>
            <param name="obj">Provided object</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUBorders.GetHashCode">
            <summary>
            GetHashCode override
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:GLUTextControlStyle">
            <summary>
            Style for all controls containing text with style
            </summary>
        </member>
        <member name="F:GLUTextControlStyle.textStyle">
            <summary>
            Text style (font name, font style, etc..)
            </summary>
        </member>
        <member name="F:GLUTextControlStyle.textAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="M:GLUTextControlStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to this style </returns>
        </member>
        <member name="T:GLUPanel">
            <summary>
            Panel, non-viewport container of children
            </summary>
        </member>
        <member name="M:GLUPanel.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUPanel.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.Boolean,System.String,GLUInternalGraphic[])">
            <summary>
            Advanced Panel constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="text">Label text</param>
            <param name="layers">List of graphic primitives</param>
            <param name="padding">Content padding</param>
            <param name="visible">Visibility flag</param>
            <example>
            This example shows how to use GLULabel constructor
            <code>
            \code
            AddChild(new GLUPanel(this, "logo", new GLUNumber(0), new GLUNumber(0), new GLUNumber(clientWidth), new GLUNumber(clientHeight - 26), new GLUPadding(10, 10, 10, 10), true, "This is label", 
                 new GLUInternalImage("bg", "GLU/logo", new GLUBorders(0, 0, 0, 0), null), 
                 new GLUInternalText("text", new GLUTextStyle("arial", 14, FontStyle.Normal, new GLUColor(1, 1, 1, 1), false), "")));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUPanel.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,System.String,GLUStyle,GLURotation)">
            <summary>
            Panel constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="text">Label text</param>
            <param name="rotation">Textures rotation</param>
            <param name="style">Control style</param>
            <param name="visible">Visibility flag</param>
            <example>
            This example shows how to use GLULabel constructor
            <code>
            \code
            AddChild(new GLUPanel(this, "logo", new GLUNumber(0), new GLUNumber(0), new GLUNumber(clientWidth), new GLUNumber(clientHeight - 26), true, "This is label", "label"));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUPanel.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUPanel.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLULabel instance from provided Xml node
            </summary>
            <param name="node">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="M:GLUPanel.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default document view. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUDocumentView with default content</returns>
        </member>
        <member name="T:GLUFileBrowserDialogType">
            <summary>
            Browser dialog type
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialogType.reserved">
            <summary>
            Reserved type. Do not use
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialogType.save">
            <summary>
            Save dialogue type
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialogType.load">
            <summary>
            Load dialogue type
            </summary>
        </member>
        <member name="T:GLUFileBrowserDialog">
            <summary>
            File browser dialog
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.folderImageUrl">
            <summary>
            Folder icon 
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.fileImageUrl">
            <summary>
            File icon
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.driveImageUrl">
            <summary>
            Drive icon
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.size">
            <summary>
            Browser size
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.fntSize">
            <summary>
            Default font size 
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.horizontalSpace">
            <summary>
            Controls horizontal space
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.verticalSpace">
            <summary>
            Controls vertical space
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.extensions">
            <summary>
            File extensions
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.modalResult">
            <summary>
            Current modal result
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.type">
            <summary>
            Dialogue tupe (load or save)
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.currentfolderLabel">
            <summary>
            Current folder label 
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.folderLabel">
            <summary>
            Folder  box description label
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.fileLabel">
            <summary>
            File box description label
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.folderBox">
            <summary>
            Folders box
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.fileBox">
            <summary>
            Current folder file list
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.fileEdit">
            <summary>
            File name field
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.extensionCombo">
            <summary>
            File extension combo box
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.okButton">
            <summary>
            Ok button
            </summary>
        </member>
        <member name="F:GLUFileBrowserDialog.cancelButton">
            <summary>
            Cancel button
            </summary>
        </member>
        <member name="M:GLUFileBrowserDialog.CreateControls">
            <summary>
            Common method for runtime controls creation
            </summary>
        </member>
        <member name="M:GLUFileBrowserDialog.ShowSaveDialog(System.String,System.String,System.String,System.String,System.String,System.String,GLUControlEvent,System.String[])">
            <summary>
            Displays save file modal dialogue
            </summary>
            <param name="title">Dialogue title</param>
            <param name="folderLabel">Folder box description</param>
            <param name="fileLabel">File box description</param>
            <param name="okText">Ok button text</param>
            <param name="cancelText">Cancel button text</param>
            <param name="fileName">File name</param>
            <param name="closeHandler">Close dialogue handler</param>
            <param name="extensions">File extensions list</param>
        </member>
        <member name="M:GLUFileBrowserDialog.ShowLoadDialog(System.String,System.String,System.String,System.String,System.String,System.String,GLUControlEvent,System.String[])">
            <summary>
            Displays load file modal dialogue
            </summary>
            <param name="title">Dialogue title</param>
            <param name="folderLabel">Folder box description</param>
            <param name="fileLabel">File box description</param>
            <param name="okText">Ok button text</param>
            <param name="cancelText">Cancel button text</param>
            <param name="fileName">File name</param>
            <param name="closeHandler">Close dialogue handler</param>
            <param name="extensions">File extensions list</param>
        </member>
        <member name="P:GLUFileBrowserDialog.labelStyle">
            <summary>
            File and folder box description style
            </summary>
        </member>
        <member name="P:GLUFileBrowserDialog.instance">
            <summary>
            Browser instance
            </summary>
        </member>
        <member name="P:GLUFileBrowserDialog.folderName">
            <summary>
            Current folder
            </summary>
        </member>
        <member name="P:GLUFileBrowserDialog.fileName">
            <summary>
            Current file
            </summary>
        </member>
        <member name="T:GLUGLUInternalTextSerializer">
            <summary>
            Internal text primitive serializer
            </summary>
        </member>
        <member name="M:GLUGLUInternalTextSerializer.Deserialize(System.String)">
            <summary>
            Creates new GLUInternalText instance filling it with string parsing results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLUInternalText instance</returns>
        </member>
        <member name="M:GLUGLUInternalTextSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUInternalText instance filling it with node parsing results
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUInternalText instance</returns>
        </member>
        <member name="M:GLUGLUInternalTextSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node, filling it with object's content
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="doc">Parent Xml document</param>
            <returns>New Xml node</returns>
        </member>
        <member name="M:GLUGLUInternalTextSerializer.Serialize(System.Object)">
            <summary>
            Converting object and all its fields to text
            </summary>
            <param name="obj">Object to convert</param>
            <returns>Text representation of provided object</returns>
        </member>
        <member name="M:GLUGLUInternalTextSerializer.GetInstance">
            <summary>
            Common method for custom serializers creation
            </summary>
            <returns>An instance of serializer</returns>
        </member>
        <member name="T:GLUDeserializer">
            <summary>
            Deserializer
            </summary>
        </member>
        <member name="M:GLUDeserializer.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Checks if member has attributes of provided type
            </summary>
            <param name="m">MamberInfo to check</param>
            <param name="attributeType">Attribute type</param>
            <returns>True, if provided memberInfo has an attribute of attributeType type</returns>
        </member>
        <member name="M:GLUDeserializer.Parse(System.Type,System.String)">
            <summary>
            Creates an object of provided type. filling it with text parse results
            </summary>
            <param name="type">Provided type</param>
            <param name="text">Text to parse</param>
            <returns>Object instance</returns>
        </member>
        <member name="M:GLUDeserializer.SetPropertyValue(System.Object,System.Reflection.PropertyInfo,System.String,System.String)">
            <summary>
            Sets property value via reflection. If property type has implicit string constructor, it is invoked. Otherwise, Convert.ChangeType is called
            </summary>
            <param name="obj">Obj to set value</param>
            <param name="pi">Property</param>
            <param name="value">Value to set</param>
            <param name="valueType">Value type name</param>
        </member>
        <member name="M:GLUDeserializer.SetFieldValue(System.Object,System.Reflection.FieldInfo,System.String,System.String)">
            <summary>
            Sets field value via reflection. If field type has implicit string constructor, it is invoked. Otherwise, Convert.ChangeType is called
            </summary>
            <param name="obj">Obj to set value</param>
            <param name="fi">Field</param>
            <param name="value">Value to set</param>
            <param name="valueType">Value type name</param>
        </member>
        <member name="M:GLUDeserializer.AddListValue(System.Collections.IList,System.String,System.String)">
            <summary>
            Adds provided value of provided type name to provided collection (obj)
            </summary>
            <param name="obj">Collection to add value</param>
            <param name="valueType">Value type name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:GLUDeserializer.AddDictionaryValue(System.Collections.IDictionary,System.String,System.String,System.Object)">
            <summary>
            Adds provided value of provided type name to provided dictionary (obj)
            </summary>
            <param name="obj">Collection to add value</param>
            <param name="valueType">Value type name</param>
            <param name="key">Key to add</param>
            <param name="value">Value</param>
        </member>
        <member name="M:GLUDeserializer.SetValue(System.Object,System.String,System.String,System.String)">
            <summary>
            Sets value of member
            </summary>
            <param name="obj">Object</param>
            <param name="memberName">Oject member</param>
            <param name="value">Value</param>
            <param name="valueType">Value type name</param>
        </member>
        <member name="M:GLUDeserializer.LoadContentFromString(System.Object,System.String)">
            <summary>
            Loads object's content from provided string containing xml-formatted text
            </summary>
            <param name="obj">Object to process</param>
            <param name="data">String to parse</param>
        </member>
        <member name="M:GLUDeserializer.InvokeParameterlessConstructor(System.Type)">
            <summary>
            Calls parameterless constructor if it exists
            </summary>
            <param name="type">Type to make instance</param>
            <returns>An instance of provided type</returns>
        </member>
        <member name="M:GLUDeserializer.InvokePrepareDeserialization(System.Object,System.Type)">
            <summary>
            Calls the "PrepareDeserialization" method on the provided object
            </summary>
            <param name="obj">Provided object</param>
            <param name="t">Object type</param>
        </member>
        <member name="M:GLUDeserializer.InvokeCompleteDeserialization(System.Object,System.Type)">
            <summary>
            Calls the "CompleteDeserialization" method on the provided object
            </summary>
            <param name="obj">Provided object</param>
            <param name="t">Object type</param>
        </member>
        <member name="M:GLUDeserializer.GetNodeType(System.Xml.XmlNode)">
            <summary>
            Returns Xml node type
            </summary>
            <param name="node">Xml node</param>
            <returns>Type</returns>
        </member>
        <member name="M:GLUDeserializer.LoadDataFromXMLNode(System.Object,System.Xml.XmlNode)">
            <summary>
            Populates provided object with values, extracted from provided node
            </summary>
            <param name="obj">Object</param>
            <param name="node">Node</param>
        </member>
        <member name="M:GLUDeserializer.Load``1(System.String)">
            <summary>
            Loads instance of T from fileName
            </summary>
            <typeparam name="T">Type to load</typeparam>
            <param name="fileName">File URL</param>
            <returns>An instance of T</returns>
        </member>
        <member name="M:GLUDeserializer.Load(System.Xml.XmlNode)">
            <summary>
            Creates and fills the object from provided xml node
            </summary>
            <param name="n">Provided node</param>
            <returns>Object</returns>
        </member>
        <member name="M:GLUDeserializer.Load(System.String)">
            <summary>
            Creates an instance of object's class and load its values from provided file
            </summary>
            <param name="fileName">File URL</param>
            <returns>Object</returns>
        </member>
        <member name="M:GLUDeserializer.FromString(System.String)">
            <summary>
            Deserializes object from string containing xml-formatted data
            </summary>
            <param name="str">String to process</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:GLUTextStyleEvent">
            Textstyle change event delegate
        </member>
        <member name="T:GLUTextStyle">
            <summary>
            Text style
            </summary>
        </member>
        <member name="F:GLUTextStyle.styles">
            <summary>
            Named text styles cache
            </summary>
        </member>
        <member name="M:GLUTextStyle.#ctor(GLUFont,System.Int32,UnityEngine.FontStyle,GLUColor,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="font">Font</param>
            <param name="fontSize">Font size</param>
            <param name="fontStyle">Font style</param>
            <param name="color">Text color</param>
            <param name="underline">Underline attribute</param>
        </member>
        <member name="M:GLUTextStyle.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUTextStyle.LetterByName(System.Char)">
            <summary>
            Returns LetterInfo by provided letter
            </summary>
            <param name="letter">provided letter</param>
            <returns>Its info</returns>
        </member>
        <member name="M:GLUTextStyle.GetMaterial(GLUMaterialList)">
            <summary>
            Returns style material from provided materials list. If there are material with same color and texture name already, it will be returned. Otherwise, creates new material
            </summary>
            <returns>Material</returns>
        </member>
        <member name="M:GLUTextStyle.GetMaterial">
            <summary>
            Returns style material. Creates new material with provided texture and color 
            </summary>
            <returns>Material</returns>
        </member>
        <member name="M:GLUTextStyle.CalculateTextSize(System.String)">
            <summary>
            Calculates size of provided text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:GLUTextStyle.ToString">
            <summary>
            Returns name of style if it is named style, and serialized style otherwize
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:GLUTextStyle.Parse(System.String)">
            <summary>
            Parses style string in format (font, fontSize, fontStyle, fontColor, underline)
            </summary>
            <param name="s">String to parse</param>
            <returns>New style</returns>
        </member>
        <member name="M:GLUTextStyle.#ctor(GLUTextStyle)">
            <summary>
            Creates clone of provided text style
            </summary>
            <param name="source">Text style to clone</param>
        </member>
        <member name="M:GLUTextStyle.op_Implicit(System.String)~GLUTextStyle">
            <summary>
            Implicit opertator string to style
            </summary>
            <param name="text">Style name or style string in format (font, fontSize, fontStyle, fontColor, underline)</param>
            <returns>Text style</returns>
        </member>
        <member name="M:GLUTextStyle.CreateNamed(System.String,GLUFont,System.Int32,UnityEngine.FontStyle,GLUColor,System.Boolean)">
            <summary>
            Creates named text style. Named text styles are stored in global dictionary, so you can address it by name 
            </summary>
            <param name="name">Text style name</param>
            <param name="font">Font</param>
            <param name="fontSize">Font size</param>
            <param name="fontStyle">Font style</param>
            <param name="color">Text color</param>
            <param name="underline">Underline flag</param>
            <returns>new GLUTextStyle instance</returns>
        </member>
        <member name="M:GLUTextStyle.Destroy">
            <summary>
            Clears content and destroys text style
            </summary>
        </member>
        <member name="M:GLUTextStyle.op_Inequality(GLUTextStyle,GLUTextStyle)">
            <summary>
            Check if provided operands are not equal
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Non-equality result</returns>
        </member>
        <member name="M:GLUTextStyle.op_Equality(GLUTextStyle,GLUTextStyle)">
            <summary>
            Check if provided operands are equal
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Equality result</returns>
        </member>
        <member name="M:GLUTextStyle.Equals(System.Object)">
            <summary>
            Check if argument string is equal to this
            </summary>
            <param name="obj">provided string</param>
            <returns>Equality result</returns>
        </member>
        <member name="M:GLUTextStyle.GetHashCode">
            <summary>
            Returns string's hashcode
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:GLUTextStyle.font">
            <summary>
            Font 
            </summary>
        </member>
        <member name="P:GLUTextStyle.fontName">
            <summary>
            Font name for deserialization. Basically, it is a name of font XML file in Resources/GLU/Fonts folder. You should already have font XML file and mipmaps
            </summary>
        </member>
        <member name="P:GLUTextStyle.fontSize">
            <summary>
            Font size. Font must have apropriate mipmap. Otherwise, you should generate mipmap with provided size using GLUFontImporter script
            </summary>
        </member>
        <member name="P:GLUTextStyle.fontStyle">
            <summary>
            Font style
            </summary>
        </member>
        <member name="P:GLUTextStyle.textColor">
            <summary>
            Text color
            </summary>
        </member>
        <member name="P:GLUTextStyle.underline">
            <summary>
            Underline attribute
            </summary>
        </member>
        <member name="P:GLUTextStyle.charHeight">
            <summary>
            Char height. All symbols of provided font size have equal char height, but differs in char width
            </summary>
        </member>
        <member name="P:GLUTextStyle.mipmap">
            <summary>
            Font mipmap
            </summary>
        </member>
        <member name="P:GLUTextStyle.spaceSize">
            <summary>
            Space size, relative to charHeight
            </summary>
        </member>
        <member name="E:GLUTextStyle.OnChange">
            <summary>
            Something changed
            </summary>
        </member>
        <member name="P:GLUTextStyle.texture">
            <summary>
            Returns style material. Creates new material with provided texture and color 
            </summary>
            <returns>Material</returns>
        </member>
        <member name="T:GLUMaterialEvent">
            <summary>
            Material event
            </summary>
            <param name="m">Source of event</param>
        </member>
        <member name="T:GLUMaterial">
            <summary>
            Serializable wrapper around native Unity Material
            </summary>
        </member>
        <member name="M:GLUMaterial.PrepareSerialization">
            <summary>
            Implementation of IGLUSerializable interface. For now, does nothing
            </summary>
        </member>
        <member name="M:GLUMaterial.PrepareDeserialization">
            <summary>
            Implementation of IGLUSerializable interface. For now, does nothing
            </summary>
        </member>
        <member name="M:GLUMaterial.CompleteDeserialization">
            <summary>
            Implementation of IGLUSerializable interface. For now, does nothing
            </summary>
        </member>
        <member name="M:GLUMaterial.#ctor(System.String,GLUTexture,GLUColor,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="shader">Shader name, for example: "GLU/GLU Image Shader"</param>
            <param name="mainTexture">Texture object, or URL</param>
            <param name="color">Main color</param>
            <param name="mainTextureOffset">Texture offset</param>
            <param name="mainTextureScale">Texture scale</param>
            <example>
            This example shows how to use a GLUMaterial constructor
            <code>
            \code
            GLUMaterial m = new GLUMaterial("GLU/GLU Image Shader", null, new GLUColor(1, 1), new Vector2(0, 0), new Vector2(1, 1));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUMaterial.#ctor(GLUMaterial)">
            <summary>
            Constructor. Creates a shallow copy of provided material
            </summary>
            <param name="source">Provided material</param>
        </member>
        <member name="M:GLUMaterial.#ctor(System.String,GLUTexture,GLUColor)">
            <summary>
            Simple constructor
            </summary>
            <param name="shader">Shader name, for example: "GLU/GLU Image Shader"</param>
            <param name="mainTexture">Texture object, or URL</param>
            <param name="color">Main color</param>
            <example>
            This example shows how to use a GLUMaterial constructor
            <code>
            \code
            GLUMaterial m = new GLUMaterial("GLU/GLU Image Shader", @"GLU/Controls/Textures/Calendar/New/dayButton_pressed", new GLUColor(1));
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUMaterial.#ctor(System.String)">
            <summary>
            Constructor. Parses string for parameters
            </summary>
            <param name="text">String to parse</param>
        </member>
        <member name="M:GLUMaterial.Assign(UnityEngine.Material)">
            <summary>
            Makes this material similar to provided one. (i.e. Copies all properties)
            </summary>
            <param name="material">Provided material</param>
        </member>
        <member name="M:GLUMaterial.#ctor(UnityEngine.Material)">
            <summary>
            Constructor. Creates a copy of provided material
            </summary>
            <param name="material">Provided material</param>
        </member>
        <member name="M:GLUMaterial.#ctor">
            <summary>
            Constructor for deserialization
            </summary>
        </member>
        <member name="M:GLUMaterial.ToString">
            <summary>
            Returns text representation of material
            </summary>
            <returns>String. For example, this one: (shader = "GLU/GLU Image Shader", mainTexture = "GLU/Controls/Textures/Calendar/New/dayButton_hovered", color = #00FF00FF)</returns>
        </member>
        <member name="M:GLUMaterial.op_Implicit(System.String)~GLUMaterial">
            <summary>
            Converts provided string in apropriate format to GLUMaterial
            </summary>
            <param name="text">Provided text</param>
            <returns>New instance of GLUMaterial</returns>
        </member>
        <member name="M:GLUMaterial.SerializeToString">
            <summary>
            Serialize to string 
            </summary>
            <returns></returns>
        </member>
        <member name="M:GLUMaterial.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUMaterial.Deserialize(System.String)">
            <summary>
            Creates new GLUMaterial instance and fills it with text parse results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLUMaterial instance</returns>
        </member>
        <member name="M:GLUMaterial.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUMaterial instance by parsing provided Xml node
            </summary>
            <param name="n">Provided node</param>
            <returns>New GLUMaterial</returns>
        </member>
        <member name="M:GLUMaterial.Parse(System.String)">
            <summary>
            Parses text, filling control content with parse results
            </summary>
            <param name="text">Text to parse</param>
        </member>
        <member name="M:GLUMaterial.SetOnChange(GLUMaterialEvent)">
            <summary>
            Sets up On Change handler
            </summary>
            <param name="handler">New handler</param>
        </member>
        <member name="M:GLUMaterial.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parse results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUMaterial.op_Inequality(GLUMaterial,GLUMaterial)">
            <summary>
            Non-equality operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>True, if a != b</returns>
        </member>
        <member name="M:GLUMaterial.op_Equality(GLUMaterial,GLUMaterial)">
            <summary>
            Equality operator
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>True, if a == b</returns>
        </member>
        <member name="M:GLUMaterial.Equals(System.Object)">
            <summary>
            Checks, if provided object is equal to this one 
            </summary>
            <param name="obj">Provided object</param>
            <returns>True, if objects are equal. This includes reference equality or member-by-member equality</returns>
        </member>
        <member name="M:GLUMaterial.GetHashCode">
            <summary>
            Returns hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="P:GLUMaterial.color">
            <summary>
            Main color. Wraps Material.color property
            </summary>
        </member>
        <member name="P:GLUMaterial.mainTexture">
            <summary>
            Main texture. Wraps Material.mainTexture
            </summary>
        </member>
        <member name="P:GLUMaterial.mainTextureOffset">
            <summary>
            Main texture offset. Texture origin offset. Wraps Material.mainTextureOffset
            </summary>
        </member>
        <member name="P:GLUMaterial.mainTextureScale">
            <summary>
            Main texture scale. Texture scale. Wraps Material.mainTextureScale
            </summary>
        </member>
        <member name="P:GLUMaterial.passCount">
            <summary>
            Returns pass count of wrapped material
            </summary>
        </member>
        <member name="P:GLUMaterial.unityMaterial">
            <summary>
            Wrapped unity material
            </summary>
        </member>
        <member name="P:GLUMaterial.shader">
            <summary>
            Wrapped shader
            </summary>
        </member>
        <member name="P:GLUMaterial.shaderName">
            <summary>
            Shader name. Used in serialization
            </summary>
        </member>
        <member name="E:GLUMaterial.OnChange">
            <summary>
            Material change event handler
            </summary>
        </member>
        <member name="T:GLUEditWithAttribute">
            <summary>
            Attribute, which sets an editor for provided class member
            </summary>
        </member>
        <member name="F:GLUEditWithAttribute.editor">
            <summary>
            Editor type name
            </summary>
        </member>
        <member name="M:GLUEditWithAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="editor">Editor type name</param>
            <example>
            This example shows how to use GLUEditWithAttribute 
            <code>
            \code
            [GLUEditWith("GLUControlEditor")]
            public GLUButton nextButton;
            \endcode
            </code>
            </example>
        </member>
        <member name="T:GLUGLUKeySequenceSerializer">
            <summary>
            Key sequence deserializer helper
            </summary>
        </member>
        <member name="M:GLUGLUKeySequenceSerializer.Deserialize(System.String)">
            <summary>
            Parses provided text and creates GLUKeySequence instance 
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLUKeySequence instance</returns>
        </member>
        <member name="M:GLUGLUKeySequenceSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Parses provided Xml node and creates GLUKeySequence instance 
            </summary>
            <param name="n">Node to parse</param>
            <returns>New GLUKeySequence instance</returns>
        </member>
        <member name="M:GLUGLUKeySequenceSerializer.Serialize(System.Object)">
            <summary>
            Converts provided object to string 
            </summary>
            <param name="obj">Provided object</param>
            <returns>Text representation of the object</returns>
        </member>
        <member name="M:GLUGLUKeySequenceSerializer.SerializeToNode(System.Object,System.Xml.XmlDocument)">
            <summary>
            Creates Xml node and fills it with provided object's content
            </summary>
            <param name="obj">Provided object</param>
            <param name="doc">Parent Xml document</param>
            <returns>Xml node</returns>
        </member>
        <member name="M:GLUGLUKeySequenceSerializer.GetInstance">
            <summary>
            Returns an instance of GLUGLUKeySequenceSerializer
            </summary>
            <returns>New GLUGLUKeySequenceSerializer object</returns>
        </member>
        <member name="T:GLUCurve">
            <summary>
            GLU keys curve
            </summary>
        </member>
        <member name="F:GLUCurve.keys">
            <summary>
            Keys list
            </summary>
        </member>
        <member name="F:GLUCurve.preWrapMode">
            <summary>
            Curve left wrap mode
            </summary>
        </member>
        <member name="F:GLUCurve.postWrapMode">
            <summary>
            Curve right wrap mode
            </summary>
        </member>
        <member name="M:GLUCurve.AddKey(System.Single,System.Single)">
            <summary>
            Adds key to curve
            </summary>
            <param name="time">Key time</param>
            <param name="value">Key value</param>
        </member>
        <member name="M:GLUCurve.KeysChanged">
            <summary>
            Update and sorts keys list 
            </summary>
        </member>
        <member name="M:GLUCurve.Clear">
            <summary>
            Clears keys list
            </summary>
        </member>
        <member name="M:GLUCurve.GetValue(System.Single,GLUCurveKey,GLUCurveKey)">
            <summary>
            Claculates value between two keys by specified time
            </summary>
            <param name="time">Specified time</param>
            <param name="start">Start key</param>
            <param name="end">End key</param>
            <returns>Result value</returns>
        </member>
        <member name="M:GLUCurve.Insert(GLUCurveKey)">
            <summary>
            Inserts key rto curve
            </summary>
            <param name="key">Key to insert</param>
        </member>
        <member name="M:GLUCurve.KeyByTime(System.Single)">
            <summary>
            Gets key index by specified time 
            </summary>
            <param name="time">Specified time</param>
            <returns>Key index. If time is smaller, than start time, result == -1. If time is larger, than end time, result = keys.length-1</returns>
        </member>
        <member name="M:GLUCurve.GetValue(System.Single)">
            <summary>
            Calculates curve value by specified time
            </summary>
            <param name="time">Specified time</param>
            <returns>Curve value</returns>
        </member>
        <member name="M:GLUCurve.Remove(GLUCurveKey)">
            <summary>
            Removes specified key from this curve
            </summary>
            <param name="key">Specified key</param>
        </member>
        <member name="M:GLUCurve.Remove(System.Int32)">
            <summary>
            Removes key at specified position
            </summary>
            <param name="index">Position to remove</param>
        </member>
        <member name="M:GLUCurve.ToString">
            <summary>
            Converts curve object to string
            </summary>
            <returns>String representation of curve</returns>
            <example>
            This example shows how to use GLUCurve.ToString() method
            <code>
            \code
            GLUVisibilitySequence vs = new GLUVisibilitySequence();
            vs.AddKey(0.5f, true);
            XmlNode n = doc.CreateNode("MyNode");
            n.Attributes.Append(doc.CreateAttribute("vs")).Value = CurveToString(vs.curve);
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUCurve.#ctor(GLUCurveKey[])">
            <summary>
            Curve constructor
            </summary>
            <param name="keys">Keys list</param>
        </member>
        <member name="M:GLUCurve.#ctor(System.String)">
            <summary>
            Creates an instance of GLUCurve, filling it with text parse results
            </summary>
            <param name="text">Text to parse</param>
            <returns>New GLUCurve</returns>
            <example>
            This example shows how to use GLUCurve constructor
            <code>
            \code
            GLUCurve c = new GLUCurve("1, 1, (0, 1, (0, 1), (0, -1), 0)");
            \endcode
            </code>
            </example>    
        </member>
        <member name="M:GLUCurve.Equals(System.Object)">
            <summary>
            Checks if specified curve are equal to this one. Val-by-val
            </summary>
            <param name="obj">Object to check</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUCurve.op_Equality(GLUCurve,GLUCurve)">
            <summary>
            Checks if curves are equal. Val-by-val
            </summary>
            <param name="a">First curve</param>
            <param name="b">Second curv</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUCurve.op_Inequality(GLUCurve,GLUCurve)">
            <summary>
            Checks if curves are not equal. Val-by-val
            </summary>
            <param name="a">First curve</param>
            <param name="b">Second curv</param>
            <returns>Comparsion result</returns>
        </member>
        <member name="M:GLUCurve.GetHashCode">
            <summary>
            Returns hashcode
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:GLUTextEditStyle">
            <summary>
            Text edit style 
            </summary>
        </member>
        <member name="F:GLUTextEditStyle.internalTextStyle">
            <summary>
            Style for internal text control
            </summary>
        </member>
        <member name="M:GLUTextEditStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUTextEditStyle.#ctor(GLUStyleSheet,System.String,GLUNumber,GLUNumber,System.String,System.String,System.String,GLUBorders,GLUPadding,GLUStyle,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,GLURotation,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent style sheet</param>
            <param name="name">Style name</param>
            <param name="width">Control width</param>
            <param name="height">Control height</param>
            <param name="normal">Normal state texture</param>
            <param name="hover">Hovered state texture</param>
            <param name="active">Active state texture</param>
            <param name="borders">Non-stretched texture borders</param>
            <param name="padding">Control padding</param>
            <param name="internalTextStyle">Internal text control style</param>
            <param name="showHorScrollBar">If true, horizontal scrollbar is visible</param>
            <param name="showVertScrollBar">If true, vertical scrollbar is visible</param>
            <param name="useSharedRenderTexture">If true, common render texture is used</param>
            <param name="horScrollBarStyle">Style for horizontal scrollbar</param>
            <param name="vertScrollBarStyle">Style for vertical scrollbar</param>
            <param name="rotation">Textures UV rotation</param>
            <param name="hScrollBarOffset">Horizontal scrollbar offset from viewport bottom</param>
            <param name="vScrollBarOffset">Vertical scrollbar offset from viewport left side</param>
        </member>
        <member name="M:GLUTextEditStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Internally called by serialized to check if object is adequate to provided style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited check will be called</param>
            <returns>True, if obj is adequate to provided style</returns>
        </member>
        <member name="M:GLUTextEditStyle.CreateDefault">
            <summary>
            Creates default style 
            </summary>
            <returns>Newly created text edit style</returns>
        </member>
        <member name="T:GLUCalendarComboStyle">
            <summary>
            Calendar combo style
            </summary>
        </member>
        <member name="F:GLUCalendarComboStyle.calendarStyle">
            <summary>
            Calendar style
            </summary>
        </member>
        <member name="M:GLUCalendarComboStyle.#ctor(GLUStyleSheet,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sheet">Parent sheet</param>
            <param name="name">Style name</param>
        </member>
        <member name="M:GLUCalendarComboStyle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:GLUCalendarComboStyle.CheckObject(System.Object,System.Boolean)">
            <summary>
            Checks if provided object is adequate to this style
            </summary>
            <param name="obj">Object to check</param>
            <param name="callInherited">If true, inherited CheckObject will be called </param>
            <returns>True, if object is adequate to provided style </returns>
        </member>
        <member name="M:GLUCalendarComboStyle.CreateDefault">
            <summary>
            Called, when default style sheet is assembled
            </summary>
            <returns>Button style with default content and default name</returns>
        </member>
        <member name="T:GLUSceneSelector">
            <summary>
            Scene object selector control. Usable in RTS-like games
            </summary>
        </member>
        <member name="F:GLUSceneSelector.selectorMaterial">
            <summary>
            Selection marquee material
            </summary>
        </member>
        <member name="F:GLUSceneSelector.selectorBorders">
            <summary>
            Selection marquee unstretched borders
            </summary>
        </member>
        <member name="F:GLUSceneSelector.healthBarBgMaterial">
            <summary>
            Units healthbar background material
            </summary>
        </member>
        <member name="F:GLUSceneSelector.healthBarBgBorders">
            <summary>
            Units healthbar background unstretched borders
            </summary>
        </member>
        <member name="F:GLUSceneSelector.healthBarMaterial">
            <summary>
            Units healthbar material
            </summary>
        </member>
        <member name="F:GLUSceneSelector.healthBarBorders">
            <summary>
            Units healthbar unstretched borders
            </summary>
        </member>
        <member name="F:GLUSceneSelector.healthBarSize">
            <summary>
            Units healthbar size
            </summary>
        </member>
        <member name="F:GLUSceneSelector.healthBarOffset">
            <summary>
            Units healthbar offset
            </summary>
        </member>
        <member name="F:GLUSceneSelector.selection">
            <summary>
            List of selected units
            </summary>
        </member>
        <member name="M:GLUSceneSelector.ApplyStyle">
            <summary>
            Internal. Applies style to control
            </summary>
        </member>
        <member name="M:GLUSceneSelector.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:GLUSceneSelector.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,GLUPadding,System.Boolean,GLUInternalGraphic[])">
            <summary>
            Advanced Selector constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="layers">List of graphic primitives</param>
            <param name="padding">Content padding</param>
            <param name="visible">Visibility flag</param>
        </member>
        <member name="M:GLUSceneSelector.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUStyle,GLURotation)">
            <summary>
            Selector constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="rotation">Textures rotation</param>
            <param name="style">Control style</param>
            <param name="visible">Visibility flag</param>
        </member>
        <member name="M:GLUSceneSelector.GetStyle(GLUStyleSheet,System.String)">
            <summary>
            Gets a style from control, creating new one, if control content doesn't matches its style, or it is null.
            </summary>
            <param name="sheet">Style Sheet</param>
            <param name="name">Name of style, if it will be created</param>
            <returns>Current style of object or new one</returns>
        </member>
        <member name="M:GLUSceneSelector.Deserialize(System.Xml.XmlNode)">
            <summary>
            Creates new GLUSceneSelector instance from provided Xml node
            </summary>
            <param name="node">Node to parse</param>
            <returns>New control</returns>
        </member>
        <member name="F:GLUSceneSelector.selectionStart">
            <summary>
            Selection marquee start corner
            </summary>
        </member>
        <member name="F:GLUSceneSelector.selectionEnd">
            <summary>
            Selection marquee end corner
            </summary>
        </member>
        <member name="F:GLUSceneSelector.marqueeSelectionMode">
            <summary>
            If true, marquee selection is currently active
            </summary>
        </member>
        <member name="M:GLUSceneSelector.StartDrag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Start drag. Use with caution
            </summary>
            <param name="mp">Local cursor position</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUSceneSelector.Drag(UnityEngine.Vector3,System.Boolean)">
            <summary>
            Internal Drag. Use with caution
            </summary>
            <param name="mp">Input position in local space</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="M:GLUSceneSelector.EndDrag(GLUControl,System.Boolean)">
            <summary>
            Internal End drag. Use with caution
            </summary>
            <param name="target">Drop target</param>
            <param name="internalCall">Internal call flag. If set to true, call is made in child-to-parent direction</param>
        </member>
        <member name="F:GLUSceneSelector.selectorRotation">
            <summary>
            Selection UV rotation
            </summary>
        </member>
        <member name="M:GLUSceneSelector.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Draws control with provided offset and scale
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUSceneSelector.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUSceneSelector.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling control content with parse results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUSceneSelector.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates default document view. Used in forms editor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>New instance of GLUDocumentView with default content</returns>
        </member>
        <member name="T:GLUDecoratedLabel">
            <summary>
            A multiline label with formatting
            </summary>
        </member>
        <member name="M:GLUDecoratedLabel.#ctor(GLUObject,System.String,GLUNumber,GLUNumber,GLUNumber,GLUNumber,System.Boolean,GLUString,GLUStyle)">
            <summary>
            Constructor
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <param name="width">Width of control</param>
            <param name="height">Height of control</param>
            <param name="visible">Control's visibility</param>    
            <param name="text">Label text</param>
            <param name="style">Control style</param>
            <example>
            This example shows how to use GLUDecoratedLabel constructor
            <code>
            \code
            GLUDecoratedLabel messageLabel = new GLUDecoratedLabel(this, "message", new GLUNumber(20), new GLUNumber(25), new GLUNumber(width - 40), new GLUNumber(24), true, "&lt;typeWritten, 16, Bold, #626262ff, False&gt;Text for message box demonstration. \n&lt;typeWritten, 14, Normal, #FF6432ff, False&gt;You may use text styles like this: \n" +
                "&lt;handWritten, 12, Normal, #326432ff, False&gt;&lt;Font name(allowed values - typeWritten, handWritten),\n font size (10, 12, 14, 16), font style (Normal, Bold, Italic), text color (#RRGGBBAA), underline flag (True, False)&gt;");
            AddChild(messageLabel);
            \endcode
            </code>
            </example>
        </member>
        <member name="M:GLUDecoratedLabel.#ctor">
            <summary>
            Parameterless constructor for Xml deserialization purposes
            </summary>
        </member>
        <member name="M:GLUDecoratedLabel.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Standard GLU draw method
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
        </member>
        <member name="M:GLUDecoratedLabel.DefaultDraw(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Standard GLU draw method
            </summary>
            <param name="offset">Draw offset</param>
            <param name="scale">Draw scale</param>
            <param name="maxX">Viewport right border</param>
            <param name="maxY">Viewport bottom border</param>
            <param name="minX">Viewport left border</param>
            <param name="minY">Viewport top border</param>
        </member>
        <member name="M:GLUDecoratedLabel.WordMesh(GLUMeshList,System.Single,System.Single,GLUString,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Generates mesh for provided GLUString
            </summary>
            <param name="ml">Meshlist where word meshes should be placed</param>
            <param name="x">Left coordinate of word mesh</param>
            <param name="y">Top coordinate of word mesh</param>
            <param name="s">Word</param>
            <param name="pos">Word position in text</param>
            <param name="maxHeight">Maximum height of whole string. Word mesh is aligned usint it</param>
            <param name="bottomPosition">Bottom position of letters</param>
            <param name="separatorIncrement">Space increment if used Right, Center or Justify alignment</param>
        </member>
        <member name="M:GLUDecoratedLabel.GetWord(System.Int32@,System.Boolean@,GLUString,System.Single)">
            <summary>
            Gets word from the text starting from position i
            </summary>
            <param name="i">Start position of search in text</param>
            <param name="text">Text to search</param>
            <param name="newLine">New line flag</param>
            <param name="maxWidth">Max width of word. If word is bigger then max width, it is divided</param>
            <returns></returns>
        </member>
        <member name="M:GLUDecoratedLabel.RefreshLayeredControl">
            <summary>
            Generates meshes
            </summary>
        </member>
        <member name="M:GLUDecoratedLabel.ToString">
            <summary>
            Returns text.ToString()
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:GLUDecoratedLabel.Destroy">
            <summary>
            Destroys object 
            </summary>
        </member>
        <member name="M:GLUDecoratedLabel.SerializeToNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Serializes control to XmlNode
            </summary>
            <param name="doc">Document container</param>
            <param name="nodeName">Node name</param>
            <returns>Node, filled with control's content</returns>
        </member>
        <member name="M:GLUDecoratedLabel.Parse(System.Xml.XmlNode)">
            <summary>
            Parses node, filling controls content with parsing results
            </summary>
            <param name="n">Node to parse</param>
        </member>
        <member name="M:GLUDecoratedLabel.CreateDefault(GLUObject,System.String,GLUNumber,GLUNumber)">
            <summary>
            Creates an instance of GLUDecoratedLabel class with default content
            </summary>
            <param name="parent">Control's parent</param>
            <param name="name">Control's name</param>
            <param name="x">Horizontal position</param>
            <param name="y">Vertical position</param>
            <returns>A newly created GLUDecoratedLabel instance</returns>
        </member>
        <member name="P:GLUDecoratedLabel.defaultTextStyle">
            <summary>
            If no chars has style attribute, default text style is used
            </summary>
        </member>
        <member name="P:GLUDecoratedLabel.autoSize">
            <summary>
            If set to true, controls width and height will be updated after refresh
            </summary>
        </member>
        <member name="P:GLUDecoratedLabel.text">
            <summary>
            Label text
            </summary>
        </member>
        <member name="P:GLUDecoratedLabel.textAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
    </members>
</doc>
